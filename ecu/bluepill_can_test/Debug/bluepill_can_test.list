
bluepill_can_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003110  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08003220  08003220  00004220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003420  08003420  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003420  08003420  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003420  08003420  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003420  08003420  00004420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003424  08003424  00004424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003428  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  08003434  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08003434  000050a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000043e1  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011d0  00000000  00000000  00009416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000528  00000000  00000000  0000a5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003c0  00000000  00000000  0000ab10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016599  00000000  00000000  0000aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005df5  00000000  00000000  00021469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fb74  00000000  00000000  0002725e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a6dd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016d4  00000000  00000000  000a6e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000a84ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003208 	.word	0x08003208

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003208 	.word	0x08003208

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__gedf2>:
 800071c:	f04f 3cff 	mov.w	ip, #4294967295
 8000720:	e006      	b.n	8000730 <__cmpdf2+0x4>
 8000722:	bf00      	nop

08000724 <__ledf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	e002      	b.n	8000730 <__cmpdf2+0x4>
 800072a:	bf00      	nop

0800072c <__cmpdf2>:
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800073c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000746:	d01b      	beq.n	8000780 <__cmpdf2+0x54>
 8000748:	b001      	add	sp, #4
 800074a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074e:	bf0c      	ite	eq
 8000750:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000754:	ea91 0f03 	teqne	r1, r3
 8000758:	bf02      	ittt	eq
 800075a:	ea90 0f02 	teqeq	r0, r2
 800075e:	2000      	moveq	r0, #0
 8000760:	4770      	bxeq	lr
 8000762:	f110 0f00 	cmn.w	r0, #0
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf58      	it	pl
 800076c:	4299      	cmppl	r1, r3
 800076e:	bf08      	it	eq
 8000770:	4290      	cmpeq	r0, r2
 8000772:	bf2c      	ite	cs
 8000774:	17d8      	asrcs	r0, r3, #31
 8000776:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800077a:	f040 0001 	orr.w	r0, r0, #1
 800077e:	4770      	bx	lr
 8000780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000788:	d102      	bne.n	8000790 <__cmpdf2+0x64>
 800078a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078e:	d107      	bne.n	80007a0 <__cmpdf2+0x74>
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d1d6      	bne.n	8000748 <__cmpdf2+0x1c>
 800079a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079e:	d0d3      	beq.n	8000748 <__cmpdf2+0x1c>
 80007a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_cdrcmple>:
 80007a8:	4684      	mov	ip, r0
 80007aa:	4610      	mov	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	468c      	mov	ip, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4663      	mov	r3, ip
 80007b4:	e000      	b.n	80007b8 <__aeabi_cdcmpeq>
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdcmpeq>:
 80007b8:	b501      	push	{r0, lr}
 80007ba:	f7ff ffb7 	bl	800072c <__cmpdf2>
 80007be:	2800      	cmp	r0, #0
 80007c0:	bf48      	it	mi
 80007c2:	f110 0f00 	cmnmi.w	r0, #0
 80007c6:	bd01      	pop	{r0, pc}

080007c8 <__aeabi_dcmpeq>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff fff4 	bl	80007b8 <__aeabi_cdcmpeq>
 80007d0:	bf0c      	ite	eq
 80007d2:	2001      	moveq	r0, #1
 80007d4:	2000      	movne	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <__aeabi_dcmplt>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff ffea 	bl	80007b8 <__aeabi_cdcmpeq>
 80007e4:	bf34      	ite	cc
 80007e6:	2001      	movcc	r0, #1
 80007e8:	2000      	movcs	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmple>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffe0 	bl	80007b8 <__aeabi_cdcmpeq>
 80007f8:	bf94      	ite	ls
 80007fa:	2001      	movls	r0, #1
 80007fc:	2000      	movhi	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmpge>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffce 	bl	80007a8 <__aeabi_cdrcmple>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpgt>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffc4 	bl	80007a8 <__aeabi_cdrcmple>
 8000820:	bf34      	ite	cc
 8000822:	2001      	movcc	r0, #1
 8000824:	2000      	movcs	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <__aeabi_d2iz>:
 800082c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000830:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000834:	d215      	bcs.n	8000862 <__aeabi_d2iz+0x36>
 8000836:	d511      	bpl.n	800085c <__aeabi_d2iz+0x30>
 8000838:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800083c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000840:	d912      	bls.n	8000868 <__aeabi_d2iz+0x3c>
 8000842:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000846:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800084a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800084e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000852:	fa23 f002 	lsr.w	r0, r3, r2
 8000856:	bf18      	it	ne
 8000858:	4240      	negne	r0, r0
 800085a:	4770      	bx	lr
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	4770      	bx	lr
 8000862:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000866:	d105      	bne.n	8000874 <__aeabi_d2iz+0x48>
 8000868:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800086c:	bf08      	it	eq
 800086e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop

0800087c <set_data>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void set_data(double new)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	e9c7 0100 	strd	r0, r1, [r7]
	memcpy(&data, &new, sizeof(data));
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <set_data+0x24>)
 8000888:	461a      	mov	r2, r3
 800088a:	463b      	mov	r3, r7
 800088c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000890:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	20000068 	.word	0x20000068
 80008a4:	00000000 	.word	0x00000000

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	@ 0x30
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ae:	f000 faf3 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b2:	f000 f939 	bl	8000b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b6:	f000 f9b3 	bl	8000c20 <MX_GPIO_Init>
  MX_CAN_Init();
 80008ba:	f000 f97b 	bl	8000bb4 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  filter.FilterBank = 0;
 80008be:	4b90      	ldr	r3, [pc, #576]	@ (8000b00 <main+0x258>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  filter.FilterIdHigh = 0;
 80008c4:	4b8e      	ldr	r3, [pc, #568]	@ (8000b00 <main+0x258>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
  filter.FilterIdLow = 0;
 80008ca:	4b8d      	ldr	r3, [pc, #564]	@ (8000b00 <main+0x258>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
  filter.FilterMaskIdHigh = 0;
 80008d0:	4b8b      	ldr	r3, [pc, #556]	@ (8000b00 <main+0x258>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  filter.FilterMaskIdLow = 0;
 80008d6:	4b8a      	ldr	r3, [pc, #552]	@ (8000b00 <main+0x258>)
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80008dc:	4b88      	ldr	r3, [pc, #544]	@ (8000b00 <main+0x258>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80008e2:	4b87      	ldr	r3, [pc, #540]	@ (8000b00 <main+0x258>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	61da      	str	r2, [r3, #28]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80008e8:	4b85      	ldr	r3, [pc, #532]	@ (8000b00 <main+0x258>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  filter.FilterActivation = CAN_FILTER_DISABLE;
 80008ee:	4b84      	ldr	r3, [pc, #528]	@ (8000b00 <main+0x258>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  filter.SlaveStartFilterBank = 0;
 80008f4:	4b82      	ldr	r3, [pc, #520]	@ (8000b00 <main+0x258>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	@ 0x24

  // Configure the CAN Tx Header
  header.DLC = 8;                   // Data length: 8 bytes
 80008fa:	4b82      	ldr	r3, [pc, #520]	@ (8000b04 <main+0x25c>)
 80008fc:	2208      	movs	r2, #8
 80008fe:	611a      	str	r2, [r3, #16]
  header.StdId = 0x123;              // Set CAN ID (change as needed)
 8000900:	4b80      	ldr	r3, [pc, #512]	@ (8000b04 <main+0x25c>)
 8000902:	f240 1223 	movw	r2, #291	@ 0x123
 8000906:	601a      	str	r2, [r3, #0]
  header.IDE = CAN_ID_STD;           // Use Standard ID
 8000908:	4b7e      	ldr	r3, [pc, #504]	@ (8000b04 <main+0x25c>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  header.RTR = CAN_RTR_DATA;         // Data frame
 800090e:	4b7d      	ldr	r3, [pc, #500]	@ (8000b04 <main+0x25c>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  header.TransmitGlobalTime = DISABLE;
 8000914:	4b7b      	ldr	r3, [pc, #492]	@ (8000b04 <main+0x25c>)
 8000916:	2200      	movs	r2, #0
 8000918:	751a      	strb	r2, [r3, #20]

  if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK) {
 800091a:	4979      	ldr	r1, [pc, #484]	@ (8000b00 <main+0x258>)
 800091c:	487a      	ldr	r0, [pc, #488]	@ (8000b08 <main+0x260>)
 800091e:	f000 fc3c 	bl	800119a <HAL_CAN_ConfigFilter>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <main+0x84>
    Error_Handler();
 8000928:	f000 f9c6 	bl	8000cb8 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan) != HAL_OK) {
 800092c:	4876      	ldr	r0, [pc, #472]	@ (8000b08 <main+0x260>)
 800092e:	f000 fcfd 	bl	800132c <HAL_CAN_Start>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <main+0x94>
    Error_Handler();
 8000938:	f000 f9be 	bl	8000cb8 <Error_Handler>
  }

  // Time variable for oscillation (radians)
  double t = 0.0;
 800093c:	f04f 0200 	mov.w	r2, #0
 8000940:	f04f 0300 	mov.w	r3, #0
 8000944:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  const double dt = 0.1;  // increment per loop
 8000948:	a369      	add	r3, pc, #420	@ (adr r3, 8000af0 <main+0x248>)
 800094a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800094e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Advance time
	  t += dt;
 8000952:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000956:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800095a:	f7ff fd29 	bl	80003b0 <__adddf3>
 800095e:	4602      	mov	r2, r0
 8000960:	460b      	mov	r3, r1
 8000962:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	  if (t > 2.0 * M_PI) {
 8000966:	a364      	add	r3, pc, #400	@ (adr r3, 8000af8 <main+0x250>)
 8000968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800096c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000970:	f7ff ff52 	bl	8000818 <__aeabi_dcmpgt>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d00a      	beq.n	8000990 <main+0xe8>
		  t -= 2.0 * M_PI;
 800097a:	a35f      	add	r3, pc, #380	@ (adr r3, 8000af8 <main+0x250>)
 800097c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000980:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000984:	f7ff fd12 	bl	80003ac <__aeabi_dsub>
 8000988:	4602      	mov	r2, r0
 800098a:	460b      	mov	r3, r1
 800098c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	  // Compute four oscillating values:
	  //   id 1 → 0…70
	  //   id 2 → 0…100
	  //   id 3 → 0…5
	  //   id 4 → 0…1
	  double v1 = (sin(t) + 1.0) * (70.0  / 2.0);    // [0,70]
 8000990:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000994:	f001 fc34 	bl	8002200 <sin>
 8000998:	f04f 0200 	mov.w	r2, #0
 800099c:	4b5b      	ldr	r3, [pc, #364]	@ (8000b0c <main+0x264>)
 800099e:	f7ff fd07 	bl	80003b0 <__adddf3>
 80009a2:	4602      	mov	r2, r0
 80009a4:	460b      	mov	r3, r1
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	f04f 0200 	mov.w	r2, #0
 80009ae:	4b58      	ldr	r3, [pc, #352]	@ (8000b10 <main+0x268>)
 80009b0:	f7ff fbce 	bl	8000150 <__aeabi_dmul>
 80009b4:	4602      	mov	r2, r0
 80009b6:	460b      	mov	r3, r1
 80009b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  double v2 = (sin(t) + 1.0) * (100.0 / 2.0);    // [0,100]
 80009bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80009c0:	f001 fc1e 	bl	8002200 <sin>
 80009c4:	f04f 0200 	mov.w	r2, #0
 80009c8:	4b50      	ldr	r3, [pc, #320]	@ (8000b0c <main+0x264>)
 80009ca:	f7ff fcf1 	bl	80003b0 <__adddf3>
 80009ce:	4602      	mov	r2, r0
 80009d0:	460b      	mov	r3, r1
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	f04f 0200 	mov.w	r2, #0
 80009da:	4b4e      	ldr	r3, [pc, #312]	@ (8000b14 <main+0x26c>)
 80009dc:	f7ff fbb8 	bl	8000150 <__aeabi_dmul>
 80009e0:	4602      	mov	r2, r0
 80009e2:	460b      	mov	r3, r1
 80009e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  double v3 = (sin(t) + 1.0) * (5.0   / 2.0);    // [0,5]
 80009e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80009ec:	f001 fc08 	bl	8002200 <sin>
 80009f0:	f04f 0200 	mov.w	r2, #0
 80009f4:	4b45      	ldr	r3, [pc, #276]	@ (8000b0c <main+0x264>)
 80009f6:	f7ff fcdb 	bl	80003b0 <__adddf3>
 80009fa:	4602      	mov	r2, r0
 80009fc:	460b      	mov	r3, r1
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	f04f 0200 	mov.w	r2, #0
 8000a06:	4b44      	ldr	r3, [pc, #272]	@ (8000b18 <main+0x270>)
 8000a08:	f7ff fba2 	bl	8000150 <__aeabi_dmul>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	460b      	mov	r3, r1
 8000a10:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  double v4 = (sin(t) + 1.0) * (1.0   / 2.0);    // [0,1]
 8000a14:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000a18:	f001 fbf2 	bl	8002200 <sin>
 8000a1c:	f04f 0200 	mov.w	r2, #0
 8000a20:	4b3a      	ldr	r3, [pc, #232]	@ (8000b0c <main+0x264>)
 8000a22:	f7ff fcc5 	bl	80003b0 <__adddf3>
 8000a26:	4602      	mov	r2, r0
 8000a28:	460b      	mov	r3, r1
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f04f 0200 	mov.w	r2, #0
 8000a32:	4b3a      	ldr	r3, [pc, #232]	@ (8000b1c <main+0x274>)
 8000a34:	f7ff fb8c 	bl	8000150 <__aeabi_dmul>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	e9c7 2300 	strd	r2, r3, [r7]

	  // ID = 1
	  header.StdId = 1;
 8000a40:	4b30      	ldr	r3, [pc, #192]	@ (8000b04 <main+0x25c>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	601a      	str	r2, [r3, #0]
	  set_data(v1);
 8000a46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000a4a:	f7ff ff17 	bl	800087c <set_data>
	  if (HAL_CAN_AddTxMessage(&hcan, &header, data, &mailbox) != HAL_OK) {
 8000a4e:	4b34      	ldr	r3, [pc, #208]	@ (8000b20 <main+0x278>)
 8000a50:	4a34      	ldr	r2, [pc, #208]	@ (8000b24 <main+0x27c>)
 8000a52:	492c      	ldr	r1, [pc, #176]	@ (8000b04 <main+0x25c>)
 8000a54:	482c      	ldr	r0, [pc, #176]	@ (8000b08 <main+0x260>)
 8000a56:	f000 fcad 	bl	80013b4 <HAL_CAN_AddTxMessage>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <main+0x1bc>
		  Error_Handler();
 8000a60:	f000 f92a 	bl	8000cb8 <Error_Handler>
	  }
	  HAL_Delay(2);
 8000a64:	2002      	movs	r0, #2
 8000a66:	f000 fa79 	bl	8000f5c <HAL_Delay>

	  // ID = 2
	  header.StdId = 2;
 8000a6a:	4b26      	ldr	r3, [pc, #152]	@ (8000b04 <main+0x25c>)
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	601a      	str	r2, [r3, #0]
	  set_data(v2);
 8000a70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000a74:	f7ff ff02 	bl	800087c <set_data>
	  if (HAL_CAN_AddTxMessage(&hcan, &header, data, &mailbox) != HAL_OK) {
 8000a78:	4b29      	ldr	r3, [pc, #164]	@ (8000b20 <main+0x278>)
 8000a7a:	4a2a      	ldr	r2, [pc, #168]	@ (8000b24 <main+0x27c>)
 8000a7c:	4921      	ldr	r1, [pc, #132]	@ (8000b04 <main+0x25c>)
 8000a7e:	4822      	ldr	r0, [pc, #136]	@ (8000b08 <main+0x260>)
 8000a80:	f000 fc98 	bl	80013b4 <HAL_CAN_AddTxMessage>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <main+0x1e6>
		  Error_Handler();
 8000a8a:	f000 f915 	bl	8000cb8 <Error_Handler>
	  }
	  HAL_Delay(2);
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f000 fa64 	bl	8000f5c <HAL_Delay>

	  // ID = 3
	  header.StdId = 3;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <main+0x25c>)
 8000a96:	2203      	movs	r2, #3
 8000a98:	601a      	str	r2, [r3, #0]
	  set_data(v3);
 8000a9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a9e:	f7ff feed 	bl	800087c <set_data>
	  if (HAL_CAN_AddTxMessage(&hcan, &header, data, &mailbox) != HAL_OK) {
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <main+0x278>)
 8000aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8000b24 <main+0x27c>)
 8000aa6:	4917      	ldr	r1, [pc, #92]	@ (8000b04 <main+0x25c>)
 8000aa8:	4817      	ldr	r0, [pc, #92]	@ (8000b08 <main+0x260>)
 8000aaa:	f000 fc83 	bl	80013b4 <HAL_CAN_AddTxMessage>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <main+0x210>
		  Error_Handler();
 8000ab4:	f000 f900 	bl	8000cb8 <Error_Handler>
	  }
	  HAL_Delay(2);
 8000ab8:	2002      	movs	r0, #2
 8000aba:	f000 fa4f 	bl	8000f5c <HAL_Delay>

	  // ID = 4
	  header.StdId = 4;
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <main+0x25c>)
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	601a      	str	r2, [r3, #0]
	  set_data(v4);
 8000ac4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ac8:	f7ff fed8 	bl	800087c <set_data>
	  if (HAL_CAN_AddTxMessage(&hcan, &header, data, &mailbox) != HAL_OK) {
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <main+0x278>)
 8000ace:	4a15      	ldr	r2, [pc, #84]	@ (8000b24 <main+0x27c>)
 8000ad0:	490c      	ldr	r1, [pc, #48]	@ (8000b04 <main+0x25c>)
 8000ad2:	480d      	ldr	r0, [pc, #52]	@ (8000b08 <main+0x260>)
 8000ad4:	f000 fc6e 	bl	80013b4 <HAL_CAN_AddTxMessage>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <main+0x23a>
		  Error_Handler();
 8000ade:	f000 f8eb 	bl	8000cb8 <Error_Handler>
	  }
	  HAL_Delay(2);
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	f000 fa3a 	bl	8000f5c <HAL_Delay>
  {
 8000ae8:	e733      	b.n	8000952 <main+0xaa>
 8000aea:	bf00      	nop
 8000aec:	f3af 8000 	nop.w
 8000af0:	9999999a 	.word	0x9999999a
 8000af4:	3fb99999 	.word	0x3fb99999
 8000af8:	54442d18 	.word	0x54442d18
 8000afc:	401921fb 	.word	0x401921fb
 8000b00:	20000074 	.word	0x20000074
 8000b04:	20000050 	.word	0x20000050
 8000b08:	20000028 	.word	0x20000028
 8000b0c:	3ff00000 	.word	0x3ff00000
 8000b10:	40418000 	.word	0x40418000
 8000b14:	40490000 	.word	0x40490000
 8000b18:	40040000 	.word	0x40040000
 8000b1c:	3fe00000 	.word	0x3fe00000
 8000b20:	20000070 	.word	0x20000070
 8000b24:	20000068 	.word	0x20000068

08000b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b090      	sub	sp, #64	@ 0x40
 8000b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2e:	f107 0318 	add.w	r3, r7, #24
 8000b32:	2228      	movs	r2, #40	@ 0x28
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f002 fb3a 	bl	80031b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b66:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6c:	f107 0318 	add.w	r3, r7, #24
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 ff67 	bl	8001a44 <HAL_RCC_OscConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b7c:	f000 f89c 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b80:	230f      	movs	r3, #15
 8000b82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b84:	2302      	movs	r3, #2
 8000b86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2102      	movs	r1, #2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f001 f9d4 	bl	8001f48 <HAL_RCC_ClockConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ba6:	f000 f887 	bl	8000cb8 <Error_Handler>
  }
}
 8000baa:	bf00      	nop
 8000bac:	3740      	adds	r7, #64	@ 0x40
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <MX_CAN_Init+0x64>)
 8000bba:	4a18      	ldr	r2, [pc, #96]	@ (8000c1c <MX_CAN_Init+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <MX_CAN_Init+0x64>)
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <MX_CAN_Init+0x64>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bca:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <MX_CAN_Init+0x64>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <MX_CAN_Init+0x64>)
 8000bd2:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000bd6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <MX_CAN_Init+0x64>)
 8000bda:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000bde:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000be0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c18 <MX_CAN_Init+0x64>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <MX_CAN_Init+0x64>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <MX_CAN_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <MX_CAN_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <MX_CAN_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <MX_CAN_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	@ (8000c18 <MX_CAN_Init+0x64>)
 8000c06:	f000 f9cd 	bl	8000fa4 <HAL_CAN_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000c10:	f000 f852 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000028 	.word	0x20000028
 8000c1c:	40006400 	.word	0x40006400

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c34:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb0 <MX_GPIO_Init+0x90>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a1d      	ldr	r2, [pc, #116]	@ (8000cb0 <MX_GPIO_Init+0x90>)
 8000c3a:	f043 0310 	orr.w	r3, r3, #16
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <MX_GPIO_Init+0x90>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0310 	and.w	r3, r3, #16
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4c:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <MX_GPIO_Init+0x90>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a17      	ldr	r2, [pc, #92]	@ (8000cb0 <MX_GPIO_Init+0x90>)
 8000c52:	f043 0320 	orr.w	r3, r3, #32
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <MX_GPIO_Init+0x90>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0320 	and.w	r3, r3, #32
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <MX_GPIO_Init+0x90>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a11      	ldr	r2, [pc, #68]	@ (8000cb0 <MX_GPIO_Init+0x90>)
 8000c6a:	f043 0308 	orr.w	r3, r3, #8
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <MX_GPIO_Init+0x90>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0308 	and.w	r3, r3, #8
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c82:	480c      	ldr	r0, [pc, #48]	@ (8000cb4 <MX_GPIO_Init+0x94>)
 8000c84:	f000 fec6 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2302      	movs	r3, #2
 8000c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4804      	ldr	r0, [pc, #16]	@ (8000cb4 <MX_GPIO_Init+0x94>)
 8000ca2:	f000 fd3b 	bl	800171c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3720      	adds	r7, #32
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40011000 	.word	0x40011000

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <Error_Handler+0x8>

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_MspInit+0x5c>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4a14      	ldr	r2, [pc, #80]	@ (8000d20 <HAL_MspInit+0x5c>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6193      	str	r3, [r2, #24]
 8000cd6:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <HAL_MspInit+0x5c>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <HAL_MspInit+0x5c>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d20 <HAL_MspInit+0x5c>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cec:	61d3      	str	r3, [r2, #28]
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <HAL_MspInit+0x5c>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <HAL_MspInit+0x60>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	4a04      	ldr	r2, [pc, #16]	@ (8000d24 <HAL_MspInit+0x60>)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010000 	.word	0x40010000

08000d28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	@ 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a25      	ldr	r2, [pc, #148]	@ (8000dd8 <HAL_CAN_MspInit+0xb0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d143      	bne.n	8000dd0 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d48:	4b24      	ldr	r3, [pc, #144]	@ (8000ddc <HAL_CAN_MspInit+0xb4>)
 8000d4a:	69db      	ldr	r3, [r3, #28]
 8000d4c:	4a23      	ldr	r2, [pc, #140]	@ (8000ddc <HAL_CAN_MspInit+0xb4>)
 8000d4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d52:	61d3      	str	r3, [r2, #28]
 8000d54:	4b21      	ldr	r3, [pc, #132]	@ (8000ddc <HAL_CAN_MspInit+0xb4>)
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d60:	4b1e      	ldr	r3, [pc, #120]	@ (8000ddc <HAL_CAN_MspInit+0xb4>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a1d      	ldr	r2, [pc, #116]	@ (8000ddc <HAL_CAN_MspInit+0xb4>)
 8000d66:	f043 0308 	orr.w	r3, r3, #8
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <HAL_CAN_MspInit+0xb4>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0308 	and.w	r3, r3, #8
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4814      	ldr	r0, [pc, #80]	@ (8000de0 <HAL_CAN_MspInit+0xb8>)
 8000d8e:	f000 fcc5 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	480e      	ldr	r0, [pc, #56]	@ (8000de0 <HAL_CAN_MspInit+0xb8>)
 8000da8:	f000 fcb8 	bl	800171c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000dac:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <HAL_CAN_MspInit+0xbc>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db4:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dbc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dca:	4a06      	ldr	r2, [pc, #24]	@ (8000de4 <HAL_CAN_MspInit+0xbc>)
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dce:	6053      	str	r3, [r2, #4]

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	@ 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40006400 	.word	0x40006400
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010c00 	.word	0x40010c00
 8000de4:	40010000 	.word	0x40010000

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <NMI_Handler+0x4>

08000df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <MemManage_Handler+0x4>

08000e00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e38:	f000 f874 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e4c:	f7ff fff8 	bl	8000e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e50:	480b      	ldr	r0, [pc, #44]	@ (8000e80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e52:	490c      	ldr	r1, [pc, #48]	@ (8000e84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e54:	4a0c      	ldr	r2, [pc, #48]	@ (8000e88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a09      	ldr	r2, [pc, #36]	@ (8000e8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e68:	4c09      	ldr	r4, [pc, #36]	@ (8000e90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e76:	f002 f9a3 	bl	80031c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e7a:	f7ff fd15 	bl	80008a8 <main>
  bx lr
 8000e7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e88:	08003428 	.word	0x08003428
  ldr r2, =_sbss
 8000e8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e90:	200000a0 	.word	0x200000a0

08000e94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC1_2_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <HAL_Init+0x28>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	@ (8000ec0 <HAL_Init+0x28>)
 8000ea2:	f043 0310 	orr.w	r3, r3, #16
 8000ea6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 fc03 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	200f      	movs	r0, #15
 8000eb0:	f000 f808 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff ff06 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40022000 	.word	0x40022000

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fc0d 	bl	8001702 <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 fbe3 	bl	80016ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	@ (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <HAL_IncTick+0x1c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <HAL_IncTick+0x20>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a03      	ldr	r2, [pc, #12]	@ (8000f44 <HAL_IncTick+0x20>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	20000008 	.word	0x20000008
 8000f44:	2000009c 	.word	0x2000009c

08000f48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b02      	ldr	r3, [pc, #8]	@ (8000f58 <HAL_GetTick+0x10>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	2000009c 	.word	0x2000009c

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff fff0 	bl	8000f48 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffe0 	bl	8000f48 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e0ed      	b.n	8001192 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d102      	bne.n	8000fc8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff feb0 	bl	8000d28 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f042 0201 	orr.w	r2, r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fd8:	f7ff ffb6 	bl	8000f48 <HAL_GetTick>
 8000fdc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fde:	e012      	b.n	8001006 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fe0:	f7ff ffb2 	bl	8000f48 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b0a      	cmp	r3, #10
 8000fec:	d90b      	bls.n	8001006 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2205      	movs	r2, #5
 8000ffe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e0c5      	b.n	8001192 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0e5      	beq.n	8000fe0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0202 	bic.w	r2, r2, #2
 8001022:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001024:	f7ff ff90 	bl	8000f48 <HAL_GetTick>
 8001028:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800102a:	e012      	b.n	8001052 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800102c:	f7ff ff8c 	bl	8000f48 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b0a      	cmp	r3, #10
 8001038:	d90b      	bls.n	8001052 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800103e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2205      	movs	r2, #5
 800104a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e09f      	b.n	8001192 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1e5      	bne.n	800102c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7e1b      	ldrb	r3, [r3, #24]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d108      	bne.n	800107a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e007      	b.n	800108a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001088:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7e5b      	ldrb	r3, [r3, #25]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d108      	bne.n	80010a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e007      	b.n	80010b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7e9b      	ldrb	r3, [r3, #26]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d108      	bne.n	80010ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0220 	orr.w	r2, r2, #32
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	e007      	b.n	80010de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0220 	bic.w	r2, r2, #32
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7edb      	ldrb	r3, [r3, #27]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d108      	bne.n	80010f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 0210 	bic.w	r2, r2, #16
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e007      	b.n	8001108 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 0210 	orr.w	r2, r2, #16
 8001106:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7f1b      	ldrb	r3, [r3, #28]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d108      	bne.n	8001122 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0208 	orr.w	r2, r2, #8
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	e007      	b.n	8001132 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0208 	bic.w	r2, r2, #8
 8001130:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7f5b      	ldrb	r3, [r3, #29]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d108      	bne.n	800114c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f042 0204 	orr.w	r2, r2, #4
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	e007      	b.n	800115c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0204 	bic.w	r2, r2, #4
 800115a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	ea42 0103 	orr.w	r1, r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	430a      	orrs	r2, r1
 8001180:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800119a:	b480      	push	{r7}
 800119c:	b087      	sub	sp, #28
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011b0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80011b2:	7cfb      	ldrb	r3, [r7, #19]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d003      	beq.n	80011c0 <HAL_CAN_ConfigFilter+0x26>
 80011b8:	7cfb      	ldrb	r3, [r7, #19]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	f040 80aa 	bne.w	8001314 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80011c6:	f043 0201 	orr.w	r2, r3, #1
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	f003 031f 	and.w	r3, r3, #31
 80011d8:	2201      	movs	r2, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d123      	bne.n	8001242 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43db      	mvns	r3, r3
 8001204:	401a      	ands	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800121c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3248      	adds	r2, #72	@ 0x48
 8001222:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001236:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001238:	6979      	ldr	r1, [r7, #20]
 800123a:	3348      	adds	r3, #72	@ 0x48
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	440b      	add	r3, r1
 8001240:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d122      	bne.n	8001290 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	431a      	orrs	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800126a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3248      	adds	r2, #72	@ 0x48
 8001270:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001284:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001286:	6979      	ldr	r1, [r7, #20]
 8001288:	3348      	adds	r3, #72	@ 0x48
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	440b      	add	r3, r1
 800128e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d109      	bne.n	80012ac <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80012aa:	e007      	b.n	80012bc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	431a      	orrs	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d109      	bne.n	80012d8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80012d6:	e007      	b.n	80012e8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	431a      	orrs	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d107      	bne.n	8001300 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	431a      	orrs	r2, r3
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001306:	f023 0201 	bic.w	r2, r3, #1
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	e006      	b.n	8001322 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001318:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
  }
}
 8001322:	4618      	mov	r0, r3
 8001324:	371c      	adds	r7, #28
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3020 	ldrb.w	r3, [r3, #32]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d12e      	bne.n	800139e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2202      	movs	r2, #2
 8001344:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001358:	f7ff fdf6 	bl	8000f48 <HAL_GetTick>
 800135c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800135e:	e012      	b.n	8001386 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001360:	f7ff fdf2 	bl	8000f48 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b0a      	cmp	r3, #10
 800136c:	d90b      	bls.n	8001386 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001372:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2205      	movs	r2, #5
 800137e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e012      	b.n	80013ac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1e5      	bne.n	8001360 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e006      	b.n	80013ac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
  }
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	@ 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80013d2:	7ffb      	ldrb	r3, [r7, #31]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d003      	beq.n	80013e0 <HAL_CAN_AddTxMessage+0x2c>
 80013d8:	7ffb      	ldrb	r3, [r7, #31]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	f040 80ad 	bne.w	800153a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10a      	bne.n	8001400 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d105      	bne.n	8001400 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 8095 	beq.w	800152a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	0e1b      	lsrs	r3, r3, #24
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800140a:	2201      	movs	r2, #1
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10d      	bne.n	8001438 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001426:	68f9      	ldr	r1, [r7, #12]
 8001428:	6809      	ldr	r1, [r1, #0]
 800142a:	431a      	orrs	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3318      	adds	r3, #24
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	440b      	add	r3, r1
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	e00f      	b.n	8001458 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001442:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001448:	68f9      	ldr	r1, [r7, #12]
 800144a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800144c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3318      	adds	r3, #24
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	440b      	add	r3, r1
 8001456:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6819      	ldr	r1, [r3, #0]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	691a      	ldr	r2, [r3, #16]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3318      	adds	r3, #24
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	440b      	add	r3, r1
 8001468:	3304      	adds	r3, #4
 800146a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	7d1b      	ldrb	r3, [r3, #20]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d111      	bne.n	8001498 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	3318      	adds	r3, #24
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	4413      	add	r3, r2
 8001480:	3304      	adds	r3, #4
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	6811      	ldr	r1, [r2, #0]
 8001488:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3318      	adds	r3, #24
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	440b      	add	r3, r1
 8001494:	3304      	adds	r3, #4
 8001496:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3307      	adds	r3, #7
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	061a      	lsls	r2, r3, #24
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3306      	adds	r3, #6
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	041b      	lsls	r3, r3, #16
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3305      	adds	r3, #5
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	4313      	orrs	r3, r2
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	3204      	adds	r2, #4
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	4610      	mov	r0, r2
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	6811      	ldr	r1, [r2, #0]
 80014c0:	ea43 0200 	orr.w	r2, r3, r0
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	440b      	add	r3, r1
 80014ca:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80014ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3303      	adds	r3, #3
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	061a      	lsls	r2, r3, #24
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3302      	adds	r3, #2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	041b      	lsls	r3, r3, #16
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3301      	adds	r3, #1
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	4313      	orrs	r3, r2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	7812      	ldrb	r2, [r2, #0]
 80014f0:	4610      	mov	r0, r2
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	6811      	ldr	r1, [r2, #0]
 80014f6:	ea43 0200 	orr.w	r2, r3, r0
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	440b      	add	r3, r1
 8001500:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001504:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3318      	adds	r3, #24
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	4413      	add	r3, r2
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	6811      	ldr	r1, [r2, #0]
 8001518:	f043 0201 	orr.w	r2, r3, #1
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3318      	adds	r3, #24
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	440b      	add	r3, r1
 8001524:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e00e      	b.n	8001548 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e006      	b.n	8001548 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
  }
}
 8001548:	4618      	mov	r0, r3
 800154a:	3724      	adds	r7, #36	@ 0x24
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
	...

08001554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001564:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800157c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a0:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <__NVIC_GetPriorityGrouping+0x18>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	f003 0307 	and.w	r3, r3, #7
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	db0a      	blt.n	80015e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	490c      	ldr	r1, [pc, #48]	@ (8001604 <__NVIC_SetPriority+0x4c>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	0112      	lsls	r2, r2, #4
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	440b      	add	r3, r1
 80015dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e0:	e00a      	b.n	80015f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4908      	ldr	r1, [pc, #32]	@ (8001608 <__NVIC_SetPriority+0x50>)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	3b04      	subs	r3, #4
 80015f0:	0112      	lsls	r2, r2, #4
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	440b      	add	r3, r1
 80015f6:	761a      	strb	r2, [r3, #24]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000e100 	.word	0xe000e100
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	@ 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f1c3 0307 	rsb	r3, r3, #7
 8001626:	2b04      	cmp	r3, #4
 8001628:	bf28      	it	cs
 800162a:	2304      	movcs	r3, #4
 800162c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3304      	adds	r3, #4
 8001632:	2b06      	cmp	r3, #6
 8001634:	d902      	bls.n	800163c <NVIC_EncodePriority+0x30>
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3b03      	subs	r3, #3
 800163a:	e000      	b.n	800163e <NVIC_EncodePriority+0x32>
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	401a      	ands	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001654:	f04f 31ff 	mov.w	r1, #4294967295
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	43d9      	mvns	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	4313      	orrs	r3, r2
         );
}
 8001666:	4618      	mov	r0, r3
 8001668:	3724      	adds	r7, #36	@ 0x24
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001680:	d301      	bcc.n	8001686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001682:	2301      	movs	r3, #1
 8001684:	e00f      	b.n	80016a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001686:	4a0a      	ldr	r2, [pc, #40]	@ (80016b0 <SysTick_Config+0x40>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168e:	210f      	movs	r1, #15
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f7ff ff90 	bl	80015b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001698:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <SysTick_Config+0x40>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169e:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <SysTick_Config+0x40>)
 80016a0:	2207      	movs	r2, #7
 80016a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	e000e010 	.word	0xe000e010

080016b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff49 	bl	8001554 <__NVIC_SetPriorityGrouping>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016dc:	f7ff ff5e 	bl	800159c <__NVIC_GetPriorityGrouping>
 80016e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	6978      	ldr	r0, [r7, #20]
 80016e8:	f7ff ff90 	bl	800160c <NVIC_EncodePriority>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff5f 	bl	80015b8 <__NVIC_SetPriority>
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ffb0 	bl	8001670 <SysTick_Config>
 8001710:	4603      	mov	r3, r0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	b480      	push	{r7}
 800171e:	b08b      	sub	sp, #44	@ 0x2c
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172e:	e161      	b.n	80019f4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001730:	2201      	movs	r2, #1
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	69fa      	ldr	r2, [r7, #28]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	429a      	cmp	r2, r3
 800174a:	f040 8150 	bne.w	80019ee <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4a97      	ldr	r2, [pc, #604]	@ (80019b0 <HAL_GPIO_Init+0x294>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d05e      	beq.n	8001816 <HAL_GPIO_Init+0xfa>
 8001758:	4a95      	ldr	r2, [pc, #596]	@ (80019b0 <HAL_GPIO_Init+0x294>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d875      	bhi.n	800184a <HAL_GPIO_Init+0x12e>
 800175e:	4a95      	ldr	r2, [pc, #596]	@ (80019b4 <HAL_GPIO_Init+0x298>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d058      	beq.n	8001816 <HAL_GPIO_Init+0xfa>
 8001764:	4a93      	ldr	r2, [pc, #588]	@ (80019b4 <HAL_GPIO_Init+0x298>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d86f      	bhi.n	800184a <HAL_GPIO_Init+0x12e>
 800176a:	4a93      	ldr	r2, [pc, #588]	@ (80019b8 <HAL_GPIO_Init+0x29c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d052      	beq.n	8001816 <HAL_GPIO_Init+0xfa>
 8001770:	4a91      	ldr	r2, [pc, #580]	@ (80019b8 <HAL_GPIO_Init+0x29c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d869      	bhi.n	800184a <HAL_GPIO_Init+0x12e>
 8001776:	4a91      	ldr	r2, [pc, #580]	@ (80019bc <HAL_GPIO_Init+0x2a0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d04c      	beq.n	8001816 <HAL_GPIO_Init+0xfa>
 800177c:	4a8f      	ldr	r2, [pc, #572]	@ (80019bc <HAL_GPIO_Init+0x2a0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d863      	bhi.n	800184a <HAL_GPIO_Init+0x12e>
 8001782:	4a8f      	ldr	r2, [pc, #572]	@ (80019c0 <HAL_GPIO_Init+0x2a4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d046      	beq.n	8001816 <HAL_GPIO_Init+0xfa>
 8001788:	4a8d      	ldr	r2, [pc, #564]	@ (80019c0 <HAL_GPIO_Init+0x2a4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d85d      	bhi.n	800184a <HAL_GPIO_Init+0x12e>
 800178e:	2b12      	cmp	r3, #18
 8001790:	d82a      	bhi.n	80017e8 <HAL_GPIO_Init+0xcc>
 8001792:	2b12      	cmp	r3, #18
 8001794:	d859      	bhi.n	800184a <HAL_GPIO_Init+0x12e>
 8001796:	a201      	add	r2, pc, #4	@ (adr r2, 800179c <HAL_GPIO_Init+0x80>)
 8001798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179c:	08001817 	.word	0x08001817
 80017a0:	080017f1 	.word	0x080017f1
 80017a4:	08001803 	.word	0x08001803
 80017a8:	08001845 	.word	0x08001845
 80017ac:	0800184b 	.word	0x0800184b
 80017b0:	0800184b 	.word	0x0800184b
 80017b4:	0800184b 	.word	0x0800184b
 80017b8:	0800184b 	.word	0x0800184b
 80017bc:	0800184b 	.word	0x0800184b
 80017c0:	0800184b 	.word	0x0800184b
 80017c4:	0800184b 	.word	0x0800184b
 80017c8:	0800184b 	.word	0x0800184b
 80017cc:	0800184b 	.word	0x0800184b
 80017d0:	0800184b 	.word	0x0800184b
 80017d4:	0800184b 	.word	0x0800184b
 80017d8:	0800184b 	.word	0x0800184b
 80017dc:	0800184b 	.word	0x0800184b
 80017e0:	080017f9 	.word	0x080017f9
 80017e4:	0800180d 	.word	0x0800180d
 80017e8:	4a76      	ldr	r2, [pc, #472]	@ (80019c4 <HAL_GPIO_Init+0x2a8>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ee:	e02c      	b.n	800184a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	623b      	str	r3, [r7, #32]
          break;
 80017f6:	e029      	b.n	800184c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	3304      	adds	r3, #4
 80017fe:	623b      	str	r3, [r7, #32]
          break;
 8001800:	e024      	b.n	800184c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	3308      	adds	r3, #8
 8001808:	623b      	str	r3, [r7, #32]
          break;
 800180a:	e01f      	b.n	800184c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	330c      	adds	r3, #12
 8001812:	623b      	str	r3, [r7, #32]
          break;
 8001814:	e01a      	b.n	800184c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800181e:	2304      	movs	r3, #4
 8001820:	623b      	str	r3, [r7, #32]
          break;
 8001822:	e013      	b.n	800184c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d105      	bne.n	8001838 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800182c:	2308      	movs	r3, #8
 800182e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	611a      	str	r2, [r3, #16]
          break;
 8001836:	e009      	b.n	800184c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001838:	2308      	movs	r3, #8
 800183a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	615a      	str	r2, [r3, #20]
          break;
 8001842:	e003      	b.n	800184c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
          break;
 8001848:	e000      	b.n	800184c <HAL_GPIO_Init+0x130>
          break;
 800184a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2bff      	cmp	r3, #255	@ 0xff
 8001850:	d801      	bhi.n	8001856 <HAL_GPIO_Init+0x13a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	e001      	b.n	800185a <HAL_GPIO_Init+0x13e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3304      	adds	r3, #4
 800185a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2bff      	cmp	r3, #255	@ 0xff
 8001860:	d802      	bhi.n	8001868 <HAL_GPIO_Init+0x14c>
 8001862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	e002      	b.n	800186e <HAL_GPIO_Init+0x152>
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	3b08      	subs	r3, #8
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	210f      	movs	r1, #15
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	401a      	ands	r2, r3
 8001880:	6a39      	ldr	r1, [r7, #32]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	431a      	orrs	r2, r3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 80a9 	beq.w	80019ee <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800189c:	4b4a      	ldr	r3, [pc, #296]	@ (80019c8 <HAL_GPIO_Init+0x2ac>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a49      	ldr	r2, [pc, #292]	@ (80019c8 <HAL_GPIO_Init+0x2ac>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b47      	ldr	r3, [pc, #284]	@ (80019c8 <HAL_GPIO_Init+0x2ac>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018b4:	4a45      	ldr	r2, [pc, #276]	@ (80019cc <HAL_GPIO_Init+0x2b0>)
 80018b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b8:	089b      	lsrs	r3, r3, #2
 80018ba:	3302      	adds	r3, #2
 80018bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	220f      	movs	r2, #15
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	4013      	ands	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a3d      	ldr	r2, [pc, #244]	@ (80019d0 <HAL_GPIO_Init+0x2b4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d00d      	beq.n	80018fc <HAL_GPIO_Init+0x1e0>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a3c      	ldr	r2, [pc, #240]	@ (80019d4 <HAL_GPIO_Init+0x2b8>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d007      	beq.n	80018f8 <HAL_GPIO_Init+0x1dc>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a3b      	ldr	r2, [pc, #236]	@ (80019d8 <HAL_GPIO_Init+0x2bc>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d101      	bne.n	80018f4 <HAL_GPIO_Init+0x1d8>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e004      	b.n	80018fe <HAL_GPIO_Init+0x1e2>
 80018f4:	2303      	movs	r3, #3
 80018f6:	e002      	b.n	80018fe <HAL_GPIO_Init+0x1e2>
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <HAL_GPIO_Init+0x1e2>
 80018fc:	2300      	movs	r3, #0
 80018fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001900:	f002 0203 	and.w	r2, r2, #3
 8001904:	0092      	lsls	r2, r2, #2
 8001906:	4093      	lsls	r3, r2
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	4313      	orrs	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800190e:	492f      	ldr	r1, [pc, #188]	@ (80019cc <HAL_GPIO_Init+0x2b0>)
 8001910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	3302      	adds	r3, #2
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001928:	4b2c      	ldr	r3, [pc, #176]	@ (80019dc <HAL_GPIO_Init+0x2c0>)
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	492b      	ldr	r1, [pc, #172]	@ (80019dc <HAL_GPIO_Init+0x2c0>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	608b      	str	r3, [r1, #8]
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001936:	4b29      	ldr	r3, [pc, #164]	@ (80019dc <HAL_GPIO_Init+0x2c0>)
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	43db      	mvns	r3, r3
 800193e:	4927      	ldr	r1, [pc, #156]	@ (80019dc <HAL_GPIO_Init+0x2c0>)
 8001940:	4013      	ands	r3, r2
 8001942:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d006      	beq.n	800195e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001950:	4b22      	ldr	r3, [pc, #136]	@ (80019dc <HAL_GPIO_Init+0x2c0>)
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	4921      	ldr	r1, [pc, #132]	@ (80019dc <HAL_GPIO_Init+0x2c0>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	60cb      	str	r3, [r1, #12]
 800195c:	e006      	b.n	800196c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800195e:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <HAL_GPIO_Init+0x2c0>)
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	43db      	mvns	r3, r3
 8001966:	491d      	ldr	r1, [pc, #116]	@ (80019dc <HAL_GPIO_Init+0x2c0>)
 8001968:	4013      	ands	r3, r2
 800196a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001978:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <HAL_GPIO_Init+0x2c0>)
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	4917      	ldr	r1, [pc, #92]	@ (80019dc <HAL_GPIO_Init+0x2c0>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
 8001984:	e006      	b.n	8001994 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <HAL_GPIO_Init+0x2c0>)
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	43db      	mvns	r3, r3
 800198e:	4913      	ldr	r1, [pc, #76]	@ (80019dc <HAL_GPIO_Init+0x2c0>)
 8001990:	4013      	ands	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d01f      	beq.n	80019e0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019a0:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <HAL_GPIO_Init+0x2c0>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	490d      	ldr	r1, [pc, #52]	@ (80019dc <HAL_GPIO_Init+0x2c0>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	600b      	str	r3, [r1, #0]
 80019ac:	e01f      	b.n	80019ee <HAL_GPIO_Init+0x2d2>
 80019ae:	bf00      	nop
 80019b0:	10320000 	.word	0x10320000
 80019b4:	10310000 	.word	0x10310000
 80019b8:	10220000 	.word	0x10220000
 80019bc:	10210000 	.word	0x10210000
 80019c0:	10120000 	.word	0x10120000
 80019c4:	10110000 	.word	0x10110000
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010000 	.word	0x40010000
 80019d0:	40010800 	.word	0x40010800
 80019d4:	40010c00 	.word	0x40010c00
 80019d8:	40011000 	.word	0x40011000
 80019dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <HAL_GPIO_Init+0x2f4>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	4909      	ldr	r1, [pc, #36]	@ (8001a10 <HAL_GPIO_Init+0x2f4>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	3301      	adds	r3, #1
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fa:	fa22 f303 	lsr.w	r3, r2, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f47f ae96 	bne.w	8001730 <HAL_GPIO_Init+0x14>
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	372c      	adds	r7, #44	@ 0x2c
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	40010400 	.word	0x40010400

08001a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
 8001a20:	4613      	mov	r3, r2
 8001a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a24:	787b      	ldrb	r3, [r7, #1]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a30:	e003      	b.n	8001a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	041a      	lsls	r2, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	611a      	str	r2, [r3, #16]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e272      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8087 	beq.w	8001b72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a64:	4b92      	ldr	r3, [pc, #584]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d00c      	beq.n	8001a8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a70:	4b8f      	ldr	r3, [pc, #572]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d112      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5e>
 8001a7c:	4b8c      	ldr	r3, [pc, #560]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a88:	d10b      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8a:	4b89      	ldr	r3, [pc, #548]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d06c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x12c>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d168      	bne.n	8001b70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e24c      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x76>
 8001aac:	4b80      	ldr	r3, [pc, #512]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a7f      	ldr	r2, [pc, #508]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	e02e      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x98>
 8001ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7a      	ldr	r2, [pc, #488]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b78      	ldr	r3, [pc, #480]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a77      	ldr	r2, [pc, #476]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e01d      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0xbc>
 8001ae6:	4b72      	ldr	r3, [pc, #456]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a71      	ldr	r2, [pc, #452]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a6e      	ldr	r2, [pc, #440]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e00b      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001b00:	4b6b      	ldr	r3, [pc, #428]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a6a      	ldr	r2, [pc, #424]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b68      	ldr	r3, [pc, #416]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a67      	ldr	r2, [pc, #412]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d013      	beq.n	8001b48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff fa12 	bl	8000f48 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fa0e 	bl	8000f48 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	@ 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e200      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0xe4>
 8001b46:	e014      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff f9fe 	bl	8000f48 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff f9fa 	bl	8000f48 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	@ 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e1ec      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	4b53      	ldr	r3, [pc, #332]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x10c>
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d063      	beq.n	8001c46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b7e:	4b4c      	ldr	r3, [pc, #304]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00b      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b8a:	4b49      	ldr	r3, [pc, #292]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d11c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x18c>
 8001b96:	4b46      	ldr	r3, [pc, #280]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d116      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	4b43      	ldr	r3, [pc, #268]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_RCC_OscConfig+0x176>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e1c0      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bba:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4939      	ldr	r1, [pc, #228]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	e03a      	b.n	8001c46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd8:	4b36      	ldr	r3, [pc, #216]	@ (8001cb4 <HAL_RCC_OscConfig+0x270>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff f9b3 	bl	8000f48 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be6:	f7ff f9af 	bl	8000f48 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e1a1      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4927      	ldr	r1, [pc, #156]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
 8001c18:	e015      	b.n	8001c46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1a:	4b26      	ldr	r3, [pc, #152]	@ (8001cb4 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff f992 	bl	8000f48 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c28:	f7ff f98e 	bl	8000f48 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e180      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d03a      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d019      	beq.n	8001c8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5a:	4b17      	ldr	r3, [pc, #92]	@ (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c60:	f7ff f972 	bl	8000f48 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c68:	f7ff f96e 	bl	8000f48 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e160      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c86:	2001      	movs	r0, #1
 8001c88:	f000 fa9c 	bl	80021c4 <RCC_Delay>
 8001c8c:	e01c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c94:	f7ff f958 	bl	8000f48 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9a:	e00f      	b.n	8001cbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7ff f954 	bl	8000f48 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d908      	bls.n	8001cbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e146      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	42420000 	.word	0x42420000
 8001cb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbc:	4b92      	ldr	r3, [pc, #584]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e9      	bne.n	8001c9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80a6 	beq.w	8001e22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cda:	4b8b      	ldr	r3, [pc, #556]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10d      	bne.n	8001d02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b88      	ldr	r3, [pc, #544]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a87      	ldr	r2, [pc, #540]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf0:	61d3      	str	r3, [r2, #28]
 8001cf2:	4b85      	ldr	r3, [pc, #532]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	4b82      	ldr	r3, [pc, #520]	@ (8001f0c <HAL_RCC_OscConfig+0x4c8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d118      	bne.n	8001d40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f0c <HAL_RCC_OscConfig+0x4c8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a7e      	ldr	r2, [pc, #504]	@ (8001f0c <HAL_RCC_OscConfig+0x4c8>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1a:	f7ff f915 	bl	8000f48 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d22:	f7ff f911 	bl	8000f48 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b64      	cmp	r3, #100	@ 0x64
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e103      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	4b75      	ldr	r3, [pc, #468]	@ (8001f0c <HAL_RCC_OscConfig+0x4c8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x312>
 8001d48:	4b6f      	ldr	r3, [pc, #444]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4a6e      	ldr	r2, [pc, #440]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6213      	str	r3, [r2, #32]
 8001d54:	e02d      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x334>
 8001d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4a69      	ldr	r2, [pc, #420]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	f023 0301 	bic.w	r3, r3, #1
 8001d68:	6213      	str	r3, [r2, #32]
 8001d6a:	4b67      	ldr	r3, [pc, #412]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a66      	ldr	r2, [pc, #408]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	f023 0304 	bic.w	r3, r3, #4
 8001d74:	6213      	str	r3, [r2, #32]
 8001d76:	e01c      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x356>
 8001d80:	4b61      	ldr	r3, [pc, #388]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a60      	ldr	r2, [pc, #384]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	6213      	str	r3, [r2, #32]
 8001d8c:	4b5e      	ldr	r3, [pc, #376]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a5d      	ldr	r2, [pc, #372]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	e00b      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d9a:	4b5b      	ldr	r3, [pc, #364]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4a5a      	ldr	r2, [pc, #360]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	6213      	str	r3, [r2, #32]
 8001da6:	4b58      	ldr	r3, [pc, #352]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a57      	ldr	r2, [pc, #348]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	f023 0304 	bic.w	r3, r3, #4
 8001db0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d015      	beq.n	8001de6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dba:	f7ff f8c5 	bl	8000f48 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7ff f8c1 	bl	8000f48 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e0b1      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0ee      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x37e>
 8001de4:	e014      	b.n	8001e10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7ff f8af 	bl	8000f48 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7ff f8ab 	bl	8000f48 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e09b      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e04:	4b40      	ldr	r3, [pc, #256]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ee      	bne.n	8001dee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d105      	bne.n	8001e22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e16:	4b3c      	ldr	r3, [pc, #240]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a3b      	ldr	r2, [pc, #236]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8087 	beq.w	8001f3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e2c:	4b36      	ldr	r3, [pc, #216]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d061      	beq.n	8001efc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d146      	bne.n	8001ece <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e40:	4b33      	ldr	r3, [pc, #204]	@ (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7ff f87f 	bl	8000f48 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7ff f87b 	bl	8000f48 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e06d      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e60:	4b29      	ldr	r3, [pc, #164]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f0      	bne.n	8001e4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e74:	d108      	bne.n	8001e88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e76:	4b24      	ldr	r3, [pc, #144]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	4921      	ldr	r1, [pc, #132]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e88:	4b1f      	ldr	r3, [pc, #124]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a19      	ldr	r1, [r3, #32]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	491b      	ldr	r1, [pc, #108]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7ff f84f 	bl	8000f48 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eae:	f7ff f84b 	bl	8000f48 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e03d      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec0:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x46a>
 8001ecc:	e035      	b.n	8001f3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff f838 	bl	8000f48 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001edc:	f7ff f834 	bl	8000f48 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e026      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eee:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x498>
 8001efa:	e01e      	b.n	8001f3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e019      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40007000 	.word	0x40007000
 8001f10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f14:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <HAL_RCC_OscConfig+0x500>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d106      	bne.n	8001f36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d001      	beq.n	8001f3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000

08001f48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0d0      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d910      	bls.n	8001f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6a:	4b67      	ldr	r3, [pc, #412]	@ (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 0207 	bic.w	r2, r3, #7
 8001f72:	4965      	ldr	r1, [pc, #404]	@ (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7a:	4b63      	ldr	r3, [pc, #396]	@ (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0b8      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d020      	beq.n	8001fda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa4:	4b59      	ldr	r3, [pc, #356]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a58      	ldr	r2, [pc, #352]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fbc:	4b53      	ldr	r3, [pc, #332]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4a52      	ldr	r2, [pc, #328]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001fc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc8:	4b50      	ldr	r3, [pc, #320]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	494d      	ldr	r1, [pc, #308]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d040      	beq.n	8002068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	4b47      	ldr	r3, [pc, #284]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d115      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e07f      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002006:	4b41      	ldr	r3, [pc, #260]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e073      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002016:	4b3d      	ldr	r3, [pc, #244]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e06b      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002026:	4b39      	ldr	r3, [pc, #228]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f023 0203 	bic.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4936      	ldr	r1, [pc, #216]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002038:	f7fe ff86 	bl	8000f48 <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	e00a      	b.n	8002056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7fe ff82 	bl	8000f48 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e053      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	4b2d      	ldr	r3, [pc, #180]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 020c 	and.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	429a      	cmp	r2, r3
 8002066:	d1eb      	bne.n	8002040 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002068:	4b27      	ldr	r3, [pc, #156]	@ (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d210      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b24      	ldr	r3, [pc, #144]	@ (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 0207 	bic.w	r2, r3, #7
 800207e:	4922      	ldr	r1, [pc, #136]	@ (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b20      	ldr	r3, [pc, #128]	@ (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e032      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a4:	4b19      	ldr	r3, [pc, #100]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4916      	ldr	r1, [pc, #88]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020c2:	4b12      	ldr	r3, [pc, #72]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	490e      	ldr	r1, [pc, #56]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020d6:	f000 f821 	bl	800211c <HAL_RCC_GetSysClockFreq>
 80020da:	4602      	mov	r2, r0
 80020dc:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	490a      	ldr	r1, [pc, #40]	@ (8002110 <HAL_RCC_ClockConfig+0x1c8>)
 80020e8:	5ccb      	ldrb	r3, [r1, r3]
 80020ea:	fa22 f303 	lsr.w	r3, r2, r3
 80020ee:	4a09      	ldr	r2, [pc, #36]	@ (8002114 <HAL_RCC_ClockConfig+0x1cc>)
 80020f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020f2:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <HAL_RCC_ClockConfig+0x1d0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fee4 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40022000 	.word	0x40022000
 800210c:	40021000 	.word	0x40021000
 8002110:	08003220 	.word	0x08003220
 8002114:	20000000 	.word	0x20000000
 8002118:	20000004 	.word	0x20000004

0800211c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002136:	4b1e      	ldr	r3, [pc, #120]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b04      	cmp	r3, #4
 8002144:	d002      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x30>
 8002146:	2b08      	cmp	r3, #8
 8002148:	d003      	beq.n	8002152 <HAL_RCC_GetSysClockFreq+0x36>
 800214a:	e027      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800214c:	4b19      	ldr	r3, [pc, #100]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800214e:	613b      	str	r3, [r7, #16]
      break;
 8002150:	e027      	b.n	80021a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	0c9b      	lsrs	r3, r3, #18
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	4a17      	ldr	r2, [pc, #92]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800215c:	5cd3      	ldrb	r3, [r2, r3]
 800215e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d010      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800216a:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	0c5b      	lsrs	r3, r3, #17
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	4a11      	ldr	r2, [pc, #68]	@ (80021bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a0d      	ldr	r2, [pc, #52]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800217e:	fb03 f202 	mul.w	r2, r3, r2
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	fbb2 f3f3 	udiv	r3, r2, r3
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	e004      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a0c      	ldr	r2, [pc, #48]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002190:	fb02 f303 	mul.w	r3, r2, r3
 8002194:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	613b      	str	r3, [r7, #16]
      break;
 800219a:	e002      	b.n	80021a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800219c:	4b05      	ldr	r3, [pc, #20]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800219e:	613b      	str	r3, [r7, #16]
      break;
 80021a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021a2:	693b      	ldr	r3, [r7, #16]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	371c      	adds	r7, #28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	007a1200 	.word	0x007a1200
 80021b8:	08003230 	.word	0x08003230
 80021bc:	08003240 	.word	0x08003240
 80021c0:	003d0900 	.word	0x003d0900

080021c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021cc:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <RCC_Delay+0x34>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0a      	ldr	r2, [pc, #40]	@ (80021fc <RCC_Delay+0x38>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	0a5b      	lsrs	r3, r3, #9
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021e0:	bf00      	nop
  }
  while (Delay --);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1e5a      	subs	r2, r3, #1
 80021e6:	60fa      	str	r2, [r7, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f9      	bne.n	80021e0 <RCC_Delay+0x1c>
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	20000000 	.word	0x20000000
 80021fc:	10624dd3 	.word	0x10624dd3

08002200 <sin>:
 8002200:	b530      	push	{r4, r5, lr}
 8002202:	4d20      	ldr	r5, [pc, #128]	@ (8002284 <sin+0x84>)
 8002204:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8002208:	42ac      	cmp	r4, r5
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	b087      	sub	sp, #28
 8002210:	d806      	bhi.n	8002220 <sin+0x20>
 8002212:	2300      	movs	r3, #0
 8002214:	2200      	movs	r2, #0
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	2300      	movs	r3, #0
 800221a:	f000 f8f9 	bl	8002410 <__kernel_sin>
 800221e:	e004      	b.n	800222a <sin+0x2a>
 8002220:	4d19      	ldr	r5, [pc, #100]	@ (8002288 <sin+0x88>)
 8002222:	42ac      	cmp	r4, r5
 8002224:	d903      	bls.n	800222e <sin+0x2e>
 8002226:	f7fe f8c1 	bl	80003ac <__aeabi_dsub>
 800222a:	b007      	add	sp, #28
 800222c:	bd30      	pop	{r4, r5, pc}
 800222e:	aa02      	add	r2, sp, #8
 8002230:	f000 f9a6 	bl	8002580 <__ieee754_rem_pio2>
 8002234:	f000 0003 	and.w	r0, r0, #3
 8002238:	2801      	cmp	r0, #1
 800223a:	d009      	beq.n	8002250 <sin+0x50>
 800223c:	2802      	cmp	r0, #2
 800223e:	d00e      	beq.n	800225e <sin+0x5e>
 8002240:	b9c0      	cbnz	r0, 8002274 <sin+0x74>
 8002242:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002246:	2301      	movs	r3, #1
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800224e:	e7e4      	b.n	800221a <sin+0x1a>
 8002250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002254:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002258:	f000 f81a 	bl	8002290 <__kernel_cos>
 800225c:	e7e5      	b.n	800222a <sin+0x2a>
 800225e:	2301      	movs	r3, #1
 8002260:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800226a:	f000 f8d1 	bl	8002410 <__kernel_sin>
 800226e:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8002272:	e7da      	b.n	800222a <sin+0x2a>
 8002274:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800227c:	f000 f808 	bl	8002290 <__kernel_cos>
 8002280:	e7f5      	b.n	800226e <sin+0x6e>
 8002282:	bf00      	nop
 8002284:	3fe921fb 	.word	0x3fe921fb
 8002288:	7fefffff 	.word	0x7fefffff
 800228c:	00000000 	.word	0x00000000

08002290 <__kernel_cos>:
 8002290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002294:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8002298:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800229c:	4680      	mov	r8, r0
 800229e:	4689      	mov	r9, r1
 80022a0:	e9cd 2300 	strd	r2, r3, [sp]
 80022a4:	d204      	bcs.n	80022b0 <__kernel_cos+0x20>
 80022a6:	f7fe fac1 	bl	800082c <__aeabi_d2iz>
 80022aa:	2800      	cmp	r0, #0
 80022ac:	f000 8086 	beq.w	80023bc <__kernel_cos+0x12c>
 80022b0:	4642      	mov	r2, r8
 80022b2:	464b      	mov	r3, r9
 80022b4:	4640      	mov	r0, r8
 80022b6:	4649      	mov	r1, r9
 80022b8:	f7fd ff4a 	bl	8000150 <__aeabi_dmul>
 80022bc:	2200      	movs	r2, #0
 80022be:	4b4e      	ldr	r3, [pc, #312]	@ (80023f8 <__kernel_cos+0x168>)
 80022c0:	4604      	mov	r4, r0
 80022c2:	460d      	mov	r5, r1
 80022c4:	f7fd ff44 	bl	8000150 <__aeabi_dmul>
 80022c8:	a33f      	add	r3, pc, #252	@ (adr r3, 80023c8 <__kernel_cos+0x138>)
 80022ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ce:	4682      	mov	sl, r0
 80022d0:	468b      	mov	fp, r1
 80022d2:	4620      	mov	r0, r4
 80022d4:	4629      	mov	r1, r5
 80022d6:	f7fd ff3b 	bl	8000150 <__aeabi_dmul>
 80022da:	a33d      	add	r3, pc, #244	@ (adr r3, 80023d0 <__kernel_cos+0x140>)
 80022dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e0:	f7fe f866 	bl	80003b0 <__adddf3>
 80022e4:	4622      	mov	r2, r4
 80022e6:	462b      	mov	r3, r5
 80022e8:	f7fd ff32 	bl	8000150 <__aeabi_dmul>
 80022ec:	a33a      	add	r3, pc, #232	@ (adr r3, 80023d8 <__kernel_cos+0x148>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fe f85b 	bl	80003ac <__aeabi_dsub>
 80022f6:	4622      	mov	r2, r4
 80022f8:	462b      	mov	r3, r5
 80022fa:	f7fd ff29 	bl	8000150 <__aeabi_dmul>
 80022fe:	a338      	add	r3, pc, #224	@ (adr r3, 80023e0 <__kernel_cos+0x150>)
 8002300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002304:	f7fe f854 	bl	80003b0 <__adddf3>
 8002308:	4622      	mov	r2, r4
 800230a:	462b      	mov	r3, r5
 800230c:	f7fd ff20 	bl	8000150 <__aeabi_dmul>
 8002310:	a335      	add	r3, pc, #212	@ (adr r3, 80023e8 <__kernel_cos+0x158>)
 8002312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002316:	f7fe f849 	bl	80003ac <__aeabi_dsub>
 800231a:	4622      	mov	r2, r4
 800231c:	462b      	mov	r3, r5
 800231e:	f7fd ff17 	bl	8000150 <__aeabi_dmul>
 8002322:	a333      	add	r3, pc, #204	@ (adr r3, 80023f0 <__kernel_cos+0x160>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	f7fe f842 	bl	80003b0 <__adddf3>
 800232c:	4622      	mov	r2, r4
 800232e:	462b      	mov	r3, r5
 8002330:	f7fd ff0e 	bl	8000150 <__aeabi_dmul>
 8002334:	4622      	mov	r2, r4
 8002336:	462b      	mov	r3, r5
 8002338:	f7fd ff0a 	bl	8000150 <__aeabi_dmul>
 800233c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002340:	4604      	mov	r4, r0
 8002342:	460d      	mov	r5, r1
 8002344:	4640      	mov	r0, r8
 8002346:	4649      	mov	r1, r9
 8002348:	f7fd ff02 	bl	8000150 <__aeabi_dmul>
 800234c:	460b      	mov	r3, r1
 800234e:	4602      	mov	r2, r0
 8002350:	4629      	mov	r1, r5
 8002352:	4620      	mov	r0, r4
 8002354:	f7fe f82a 	bl	80003ac <__aeabi_dsub>
 8002358:	4b28      	ldr	r3, [pc, #160]	@ (80023fc <__kernel_cos+0x16c>)
 800235a:	4680      	mov	r8, r0
 800235c:	429e      	cmp	r6, r3
 800235e:	4689      	mov	r9, r1
 8002360:	d80e      	bhi.n	8002380 <__kernel_cos+0xf0>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4650      	mov	r0, sl
 8002368:	4659      	mov	r1, fp
 800236a:	f7fe f81f 	bl	80003ac <__aeabi_dsub>
 800236e:	4602      	mov	r2, r0
 8002370:	2000      	movs	r0, #0
 8002372:	460b      	mov	r3, r1
 8002374:	4922      	ldr	r1, [pc, #136]	@ (8002400 <__kernel_cos+0x170>)
 8002376:	f7fe f819 	bl	80003ac <__aeabi_dsub>
 800237a:	b003      	add	sp, #12
 800237c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002380:	2400      	movs	r4, #0
 8002382:	4b20      	ldr	r3, [pc, #128]	@ (8002404 <__kernel_cos+0x174>)
 8002384:	4622      	mov	r2, r4
 8002386:	429e      	cmp	r6, r3
 8002388:	bf8c      	ite	hi
 800238a:	4d1f      	ldrhi	r5, [pc, #124]	@ (8002408 <__kernel_cos+0x178>)
 800238c:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8002390:	462b      	mov	r3, r5
 8002392:	2000      	movs	r0, #0
 8002394:	491a      	ldr	r1, [pc, #104]	@ (8002400 <__kernel_cos+0x170>)
 8002396:	f7fe f809 	bl	80003ac <__aeabi_dsub>
 800239a:	4622      	mov	r2, r4
 800239c:	4606      	mov	r6, r0
 800239e:	460f      	mov	r7, r1
 80023a0:	462b      	mov	r3, r5
 80023a2:	4650      	mov	r0, sl
 80023a4:	4659      	mov	r1, fp
 80023a6:	f7fe f801 	bl	80003ac <__aeabi_dsub>
 80023aa:	4642      	mov	r2, r8
 80023ac:	464b      	mov	r3, r9
 80023ae:	f7fd fffd 	bl	80003ac <__aeabi_dsub>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4630      	mov	r0, r6
 80023b8:	4639      	mov	r1, r7
 80023ba:	e7dc      	b.n	8002376 <__kernel_cos+0xe6>
 80023bc:	2000      	movs	r0, #0
 80023be:	4910      	ldr	r1, [pc, #64]	@ (8002400 <__kernel_cos+0x170>)
 80023c0:	e7db      	b.n	800237a <__kernel_cos+0xea>
 80023c2:	bf00      	nop
 80023c4:	f3af 8000 	nop.w
 80023c8:	be8838d4 	.word	0xbe8838d4
 80023cc:	bda8fae9 	.word	0xbda8fae9
 80023d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80023d4:	3e21ee9e 	.word	0x3e21ee9e
 80023d8:	809c52ad 	.word	0x809c52ad
 80023dc:	3e927e4f 	.word	0x3e927e4f
 80023e0:	19cb1590 	.word	0x19cb1590
 80023e4:	3efa01a0 	.word	0x3efa01a0
 80023e8:	16c15177 	.word	0x16c15177
 80023ec:	3f56c16c 	.word	0x3f56c16c
 80023f0:	5555554c 	.word	0x5555554c
 80023f4:	3fa55555 	.word	0x3fa55555
 80023f8:	3fe00000 	.word	0x3fe00000
 80023fc:	3fd33332 	.word	0x3fd33332
 8002400:	3ff00000 	.word	0x3ff00000
 8002404:	3fe90000 	.word	0x3fe90000
 8002408:	3fd20000 	.word	0x3fd20000
 800240c:	00000000 	.word	0x00000000

08002410 <__kernel_sin>:
 8002410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002414:	461f      	mov	r7, r3
 8002416:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800241a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800241e:	4604      	mov	r4, r0
 8002420:	460d      	mov	r5, r1
 8002422:	4616      	mov	r6, r2
 8002424:	b085      	sub	sp, #20
 8002426:	d203      	bcs.n	8002430 <__kernel_sin+0x20>
 8002428:	f7fe fa00 	bl	800082c <__aeabi_d2iz>
 800242c:	2800      	cmp	r0, #0
 800242e:	d051      	beq.n	80024d4 <__kernel_sin+0xc4>
 8002430:	4622      	mov	r2, r4
 8002432:	462b      	mov	r3, r5
 8002434:	4620      	mov	r0, r4
 8002436:	4629      	mov	r1, r5
 8002438:	f7fd fe8a 	bl	8000150 <__aeabi_dmul>
 800243c:	4682      	mov	sl, r0
 800243e:	468b      	mov	fp, r1
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4620      	mov	r0, r4
 8002446:	4629      	mov	r1, r5
 8002448:	f7fd fe82 	bl	8000150 <__aeabi_dmul>
 800244c:	a33e      	add	r3, pc, #248	@ (adr r3, 8002548 <__kernel_sin+0x138>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	4680      	mov	r8, r0
 8002454:	4689      	mov	r9, r1
 8002456:	4650      	mov	r0, sl
 8002458:	4659      	mov	r1, fp
 800245a:	f7fd fe79 	bl	8000150 <__aeabi_dmul>
 800245e:	a33c      	add	r3, pc, #240	@ (adr r3, 8002550 <__kernel_sin+0x140>)
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	f7fd ffa2 	bl	80003ac <__aeabi_dsub>
 8002468:	4652      	mov	r2, sl
 800246a:	465b      	mov	r3, fp
 800246c:	f7fd fe70 	bl	8000150 <__aeabi_dmul>
 8002470:	a339      	add	r3, pc, #228	@ (adr r3, 8002558 <__kernel_sin+0x148>)
 8002472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002476:	f7fd ff9b 	bl	80003b0 <__adddf3>
 800247a:	4652      	mov	r2, sl
 800247c:	465b      	mov	r3, fp
 800247e:	f7fd fe67 	bl	8000150 <__aeabi_dmul>
 8002482:	a337      	add	r3, pc, #220	@ (adr r3, 8002560 <__kernel_sin+0x150>)
 8002484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002488:	f7fd ff90 	bl	80003ac <__aeabi_dsub>
 800248c:	4652      	mov	r2, sl
 800248e:	465b      	mov	r3, fp
 8002490:	f7fd fe5e 	bl	8000150 <__aeabi_dmul>
 8002494:	a334      	add	r3, pc, #208	@ (adr r3, 8002568 <__kernel_sin+0x158>)
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	f7fd ff89 	bl	80003b0 <__adddf3>
 800249e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80024a0:	e9cd 0100 	strd	r0, r1, [sp]
 80024a4:	b9db      	cbnz	r3, 80024de <__kernel_sin+0xce>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4650      	mov	r0, sl
 80024ac:	4659      	mov	r1, fp
 80024ae:	f7fd fe4f 	bl	8000150 <__aeabi_dmul>
 80024b2:	a32f      	add	r3, pc, #188	@ (adr r3, 8002570 <__kernel_sin+0x160>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	f7fd ff78 	bl	80003ac <__aeabi_dsub>
 80024bc:	4642      	mov	r2, r8
 80024be:	464b      	mov	r3, r9
 80024c0:	f7fd fe46 	bl	8000150 <__aeabi_dmul>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4620      	mov	r0, r4
 80024ca:	4629      	mov	r1, r5
 80024cc:	f7fd ff70 	bl	80003b0 <__adddf3>
 80024d0:	4604      	mov	r4, r0
 80024d2:	460d      	mov	r5, r1
 80024d4:	4620      	mov	r0, r4
 80024d6:	4629      	mov	r1, r5
 80024d8:	b005      	add	sp, #20
 80024da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024de:	2200      	movs	r2, #0
 80024e0:	4630      	mov	r0, r6
 80024e2:	4639      	mov	r1, r7
 80024e4:	4b24      	ldr	r3, [pc, #144]	@ (8002578 <__kernel_sin+0x168>)
 80024e6:	f7fd fe33 	bl	8000150 <__aeabi_dmul>
 80024ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80024ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80024f2:	4640      	mov	r0, r8
 80024f4:	4649      	mov	r1, r9
 80024f6:	f7fd fe2b 	bl	8000150 <__aeabi_dmul>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002502:	f7fd ff53 	bl	80003ac <__aeabi_dsub>
 8002506:	4652      	mov	r2, sl
 8002508:	465b      	mov	r3, fp
 800250a:	f7fd fe21 	bl	8000150 <__aeabi_dmul>
 800250e:	4632      	mov	r2, r6
 8002510:	463b      	mov	r3, r7
 8002512:	f7fd ff4b 	bl	80003ac <__aeabi_dsub>
 8002516:	a316      	add	r3, pc, #88	@ (adr r3, 8002570 <__kernel_sin+0x160>)
 8002518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251c:	4606      	mov	r6, r0
 800251e:	460f      	mov	r7, r1
 8002520:	4640      	mov	r0, r8
 8002522:	4649      	mov	r1, r9
 8002524:	f7fd fe14 	bl	8000150 <__aeabi_dmul>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4630      	mov	r0, r6
 800252e:	4639      	mov	r1, r7
 8002530:	f7fd ff3e 	bl	80003b0 <__adddf3>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4620      	mov	r0, r4
 800253a:	4629      	mov	r1, r5
 800253c:	f7fd ff36 	bl	80003ac <__aeabi_dsub>
 8002540:	e7c6      	b.n	80024d0 <__kernel_sin+0xc0>
 8002542:	bf00      	nop
 8002544:	f3af 8000 	nop.w
 8002548:	5acfd57c 	.word	0x5acfd57c
 800254c:	3de5d93a 	.word	0x3de5d93a
 8002550:	8a2b9ceb 	.word	0x8a2b9ceb
 8002554:	3e5ae5e6 	.word	0x3e5ae5e6
 8002558:	57b1fe7d 	.word	0x57b1fe7d
 800255c:	3ec71de3 	.word	0x3ec71de3
 8002560:	19c161d5 	.word	0x19c161d5
 8002564:	3f2a01a0 	.word	0x3f2a01a0
 8002568:	1110f8a6 	.word	0x1110f8a6
 800256c:	3f811111 	.word	0x3f811111
 8002570:	55555549 	.word	0x55555549
 8002574:	3fc55555 	.word	0x3fc55555
 8002578:	3fe00000 	.word	0x3fe00000
 800257c:	00000000 	.word	0x00000000

08002580 <__ieee754_rem_pio2>:
 8002580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002584:	4bc4      	ldr	r3, [pc, #784]	@ (8002898 <__ieee754_rem_pio2+0x318>)
 8002586:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800258a:	b08d      	sub	sp, #52	@ 0x34
 800258c:	4598      	cmp	r8, r3
 800258e:	4606      	mov	r6, r0
 8002590:	460f      	mov	r7, r1
 8002592:	4614      	mov	r4, r2
 8002594:	9104      	str	r1, [sp, #16]
 8002596:	d807      	bhi.n	80025a8 <__ieee754_rem_pio2+0x28>
 8002598:	e9c2 6700 	strd	r6, r7, [r2]
 800259c:	2300      	movs	r3, #0
 800259e:	2200      	movs	r2, #0
 80025a0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80025a4:	2500      	movs	r5, #0
 80025a6:	e026      	b.n	80025f6 <__ieee754_rem_pio2+0x76>
 80025a8:	4bbc      	ldr	r3, [pc, #752]	@ (800289c <__ieee754_rem_pio2+0x31c>)
 80025aa:	4598      	cmp	r8, r3
 80025ac:	d876      	bhi.n	800269c <__ieee754_rem_pio2+0x11c>
 80025ae:	9b04      	ldr	r3, [sp, #16]
 80025b0:	4dbb      	ldr	r5, [pc, #748]	@ (80028a0 <__ieee754_rem_pio2+0x320>)
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	a3aa      	add	r3, pc, #680	@ (adr r3, 8002860 <__ieee754_rem_pio2+0x2e0>)
 80025b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ba:	dd38      	ble.n	800262e <__ieee754_rem_pio2+0xae>
 80025bc:	f7fd fef6 	bl	80003ac <__aeabi_dsub>
 80025c0:	45a8      	cmp	r8, r5
 80025c2:	4606      	mov	r6, r0
 80025c4:	460f      	mov	r7, r1
 80025c6:	d01a      	beq.n	80025fe <__ieee754_rem_pio2+0x7e>
 80025c8:	a3a7      	add	r3, pc, #668	@ (adr r3, 8002868 <__ieee754_rem_pio2+0x2e8>)
 80025ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ce:	f7fd feed 	bl	80003ac <__aeabi_dsub>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4680      	mov	r8, r0
 80025d8:	4689      	mov	r9, r1
 80025da:	4630      	mov	r0, r6
 80025dc:	4639      	mov	r1, r7
 80025de:	f7fd fee5 	bl	80003ac <__aeabi_dsub>
 80025e2:	a3a1      	add	r3, pc, #644	@ (adr r3, 8002868 <__ieee754_rem_pio2+0x2e8>)
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	f7fd fee0 	bl	80003ac <__aeabi_dsub>
 80025ec:	2501      	movs	r5, #1
 80025ee:	e9c4 8900 	strd	r8, r9, [r4]
 80025f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80025f6:	4628      	mov	r0, r5
 80025f8:	b00d      	add	sp, #52	@ 0x34
 80025fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025fe:	a39c      	add	r3, pc, #624	@ (adr r3, 8002870 <__ieee754_rem_pio2+0x2f0>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fd fed2 	bl	80003ac <__aeabi_dsub>
 8002608:	a39b      	add	r3, pc, #620	@ (adr r3, 8002878 <__ieee754_rem_pio2+0x2f8>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	4606      	mov	r6, r0
 8002610:	460f      	mov	r7, r1
 8002612:	f7fd fecb 	bl	80003ac <__aeabi_dsub>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4680      	mov	r8, r0
 800261c:	4689      	mov	r9, r1
 800261e:	4630      	mov	r0, r6
 8002620:	4639      	mov	r1, r7
 8002622:	f7fd fec3 	bl	80003ac <__aeabi_dsub>
 8002626:	a394      	add	r3, pc, #592	@ (adr r3, 8002878 <__ieee754_rem_pio2+0x2f8>)
 8002628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262c:	e7dc      	b.n	80025e8 <__ieee754_rem_pio2+0x68>
 800262e:	f7fd febf 	bl	80003b0 <__adddf3>
 8002632:	45a8      	cmp	r8, r5
 8002634:	4606      	mov	r6, r0
 8002636:	460f      	mov	r7, r1
 8002638:	d018      	beq.n	800266c <__ieee754_rem_pio2+0xec>
 800263a:	a38b      	add	r3, pc, #556	@ (adr r3, 8002868 <__ieee754_rem_pio2+0x2e8>)
 800263c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002640:	f7fd feb6 	bl	80003b0 <__adddf3>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4680      	mov	r8, r0
 800264a:	4689      	mov	r9, r1
 800264c:	4630      	mov	r0, r6
 800264e:	4639      	mov	r1, r7
 8002650:	f7fd feac 	bl	80003ac <__aeabi_dsub>
 8002654:	a384      	add	r3, pc, #528	@ (adr r3, 8002868 <__ieee754_rem_pio2+0x2e8>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f7fd fea9 	bl	80003b0 <__adddf3>
 800265e:	f04f 35ff 	mov.w	r5, #4294967295
 8002662:	e9c4 8900 	strd	r8, r9, [r4]
 8002666:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800266a:	e7c4      	b.n	80025f6 <__ieee754_rem_pio2+0x76>
 800266c:	a380      	add	r3, pc, #512	@ (adr r3, 8002870 <__ieee754_rem_pio2+0x2f0>)
 800266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002672:	f7fd fe9d 	bl	80003b0 <__adddf3>
 8002676:	a380      	add	r3, pc, #512	@ (adr r3, 8002878 <__ieee754_rem_pio2+0x2f8>)
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	4606      	mov	r6, r0
 800267e:	460f      	mov	r7, r1
 8002680:	f7fd fe96 	bl	80003b0 <__adddf3>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4680      	mov	r8, r0
 800268a:	4689      	mov	r9, r1
 800268c:	4630      	mov	r0, r6
 800268e:	4639      	mov	r1, r7
 8002690:	f7fd fe8c 	bl	80003ac <__aeabi_dsub>
 8002694:	a378      	add	r3, pc, #480	@ (adr r3, 8002878 <__ieee754_rem_pio2+0x2f8>)
 8002696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269a:	e7de      	b.n	800265a <__ieee754_rem_pio2+0xda>
 800269c:	4b81      	ldr	r3, [pc, #516]	@ (80028a4 <__ieee754_rem_pio2+0x324>)
 800269e:	4598      	cmp	r8, r3
 80026a0:	f200 80cf 	bhi.w	8002842 <__ieee754_rem_pio2+0x2c2>
 80026a4:	f000 f962 	bl	800296c <fabs>
 80026a8:	a375      	add	r3, pc, #468	@ (adr r3, 8002880 <__ieee754_rem_pio2+0x300>)
 80026aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ae:	4606      	mov	r6, r0
 80026b0:	460f      	mov	r7, r1
 80026b2:	f7fd fd4d 	bl	8000150 <__aeabi_dmul>
 80026b6:	2200      	movs	r2, #0
 80026b8:	4b7b      	ldr	r3, [pc, #492]	@ (80028a8 <__ieee754_rem_pio2+0x328>)
 80026ba:	f7fd fe79 	bl	80003b0 <__adddf3>
 80026be:	f7fe f8b5 	bl	800082c <__aeabi_d2iz>
 80026c2:	4605      	mov	r5, r0
 80026c4:	f7fd ffc0 	bl	8000648 <__aeabi_i2d>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026d0:	a363      	add	r3, pc, #396	@ (adr r3, 8002860 <__ieee754_rem_pio2+0x2e0>)
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	f7fd fd3b 	bl	8000150 <__aeabi_dmul>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4630      	mov	r0, r6
 80026e0:	4639      	mov	r1, r7
 80026e2:	f7fd fe63 	bl	80003ac <__aeabi_dsub>
 80026e6:	a360      	add	r3, pc, #384	@ (adr r3, 8002868 <__ieee754_rem_pio2+0x2e8>)
 80026e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ec:	4682      	mov	sl, r0
 80026ee:	468b      	mov	fp, r1
 80026f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80026f4:	f7fd fd2c 	bl	8000150 <__aeabi_dmul>
 80026f8:	2d1f      	cmp	r5, #31
 80026fa:	4606      	mov	r6, r0
 80026fc:	460f      	mov	r7, r1
 80026fe:	dc0c      	bgt.n	800271a <__ieee754_rem_pio2+0x19a>
 8002700:	4b6a      	ldr	r3, [pc, #424]	@ (80028ac <__ieee754_rem_pio2+0x32c>)
 8002702:	1e6a      	subs	r2, r5, #1
 8002704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002708:	4543      	cmp	r3, r8
 800270a:	d006      	beq.n	800271a <__ieee754_rem_pio2+0x19a>
 800270c:	4632      	mov	r2, r6
 800270e:	463b      	mov	r3, r7
 8002710:	4650      	mov	r0, sl
 8002712:	4659      	mov	r1, fp
 8002714:	f7fd fe4a 	bl	80003ac <__aeabi_dsub>
 8002718:	e00e      	b.n	8002738 <__ieee754_rem_pio2+0x1b8>
 800271a:	463b      	mov	r3, r7
 800271c:	4632      	mov	r2, r6
 800271e:	4650      	mov	r0, sl
 8002720:	4659      	mov	r1, fp
 8002722:	f7fd fe43 	bl	80003ac <__aeabi_dsub>
 8002726:	ea4f 5328 	mov.w	r3, r8, asr #20
 800272a:	9305      	str	r3, [sp, #20]
 800272c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002730:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8002734:	2b10      	cmp	r3, #16
 8002736:	dc02      	bgt.n	800273e <__ieee754_rem_pio2+0x1be>
 8002738:	e9c4 0100 	strd	r0, r1, [r4]
 800273c:	e039      	b.n	80027b2 <__ieee754_rem_pio2+0x232>
 800273e:	a34c      	add	r3, pc, #304	@ (adr r3, 8002870 <__ieee754_rem_pio2+0x2f0>)
 8002740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002748:	f7fd fd02 	bl	8000150 <__aeabi_dmul>
 800274c:	4606      	mov	r6, r0
 800274e:	460f      	mov	r7, r1
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4650      	mov	r0, sl
 8002756:	4659      	mov	r1, fp
 8002758:	f7fd fe28 	bl	80003ac <__aeabi_dsub>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4680      	mov	r8, r0
 8002762:	4689      	mov	r9, r1
 8002764:	4650      	mov	r0, sl
 8002766:	4659      	mov	r1, fp
 8002768:	f7fd fe20 	bl	80003ac <__aeabi_dsub>
 800276c:	4632      	mov	r2, r6
 800276e:	463b      	mov	r3, r7
 8002770:	f7fd fe1c 	bl	80003ac <__aeabi_dsub>
 8002774:	a340      	add	r3, pc, #256	@ (adr r3, 8002878 <__ieee754_rem_pio2+0x2f8>)
 8002776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277a:	4606      	mov	r6, r0
 800277c:	460f      	mov	r7, r1
 800277e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002782:	f7fd fce5 	bl	8000150 <__aeabi_dmul>
 8002786:	4632      	mov	r2, r6
 8002788:	463b      	mov	r3, r7
 800278a:	f7fd fe0f 	bl	80003ac <__aeabi_dsub>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4606      	mov	r6, r0
 8002794:	460f      	mov	r7, r1
 8002796:	4640      	mov	r0, r8
 8002798:	4649      	mov	r1, r9
 800279a:	f7fd fe07 	bl	80003ac <__aeabi_dsub>
 800279e:	9a05      	ldr	r2, [sp, #20]
 80027a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b31      	cmp	r3, #49	@ 0x31
 80027a8:	dc20      	bgt.n	80027ec <__ieee754_rem_pio2+0x26c>
 80027aa:	46c2      	mov	sl, r8
 80027ac:	46cb      	mov	fp, r9
 80027ae:	e9c4 0100 	strd	r0, r1, [r4]
 80027b2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80027b6:	4650      	mov	r0, sl
 80027b8:	4642      	mov	r2, r8
 80027ba:	464b      	mov	r3, r9
 80027bc:	4659      	mov	r1, fp
 80027be:	f7fd fdf5 	bl	80003ac <__aeabi_dsub>
 80027c2:	463b      	mov	r3, r7
 80027c4:	4632      	mov	r2, r6
 80027c6:	f7fd fdf1 	bl	80003ac <__aeabi_dsub>
 80027ca:	9b04      	ldr	r3, [sp, #16]
 80027cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f6bf af10 	bge.w	80025f6 <__ieee754_rem_pio2+0x76>
 80027d6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80027da:	6063      	str	r3, [r4, #4]
 80027dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80027e0:	f8c4 8000 	str.w	r8, [r4]
 80027e4:	60a0      	str	r0, [r4, #8]
 80027e6:	60e3      	str	r3, [r4, #12]
 80027e8:	426d      	negs	r5, r5
 80027ea:	e704      	b.n	80025f6 <__ieee754_rem_pio2+0x76>
 80027ec:	a326      	add	r3, pc, #152	@ (adr r3, 8002888 <__ieee754_rem_pio2+0x308>)
 80027ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80027f6:	f7fd fcab 	bl	8000150 <__aeabi_dmul>
 80027fa:	4606      	mov	r6, r0
 80027fc:	460f      	mov	r7, r1
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4640      	mov	r0, r8
 8002804:	4649      	mov	r1, r9
 8002806:	f7fd fdd1 	bl	80003ac <__aeabi_dsub>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4682      	mov	sl, r0
 8002810:	468b      	mov	fp, r1
 8002812:	4640      	mov	r0, r8
 8002814:	4649      	mov	r1, r9
 8002816:	f7fd fdc9 	bl	80003ac <__aeabi_dsub>
 800281a:	4632      	mov	r2, r6
 800281c:	463b      	mov	r3, r7
 800281e:	f7fd fdc5 	bl	80003ac <__aeabi_dsub>
 8002822:	a31b      	add	r3, pc, #108	@ (adr r3, 8002890 <__ieee754_rem_pio2+0x310>)
 8002824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002828:	4606      	mov	r6, r0
 800282a:	460f      	mov	r7, r1
 800282c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002830:	f7fd fc8e 	bl	8000150 <__aeabi_dmul>
 8002834:	4632      	mov	r2, r6
 8002836:	463b      	mov	r3, r7
 8002838:	f7fd fdb8 	bl	80003ac <__aeabi_dsub>
 800283c:	4606      	mov	r6, r0
 800283e:	460f      	mov	r7, r1
 8002840:	e764      	b.n	800270c <__ieee754_rem_pio2+0x18c>
 8002842:	4b1b      	ldr	r3, [pc, #108]	@ (80028b0 <__ieee754_rem_pio2+0x330>)
 8002844:	4598      	cmp	r8, r3
 8002846:	d935      	bls.n	80028b4 <__ieee754_rem_pio2+0x334>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	f7fd fdae 	bl	80003ac <__aeabi_dsub>
 8002850:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002854:	e9c4 0100 	strd	r0, r1, [r4]
 8002858:	e6a4      	b.n	80025a4 <__ieee754_rem_pio2+0x24>
 800285a:	bf00      	nop
 800285c:	f3af 8000 	nop.w
 8002860:	54400000 	.word	0x54400000
 8002864:	3ff921fb 	.word	0x3ff921fb
 8002868:	1a626331 	.word	0x1a626331
 800286c:	3dd0b461 	.word	0x3dd0b461
 8002870:	1a600000 	.word	0x1a600000
 8002874:	3dd0b461 	.word	0x3dd0b461
 8002878:	2e037073 	.word	0x2e037073
 800287c:	3ba3198a 	.word	0x3ba3198a
 8002880:	6dc9c883 	.word	0x6dc9c883
 8002884:	3fe45f30 	.word	0x3fe45f30
 8002888:	2e000000 	.word	0x2e000000
 800288c:	3ba3198a 	.word	0x3ba3198a
 8002890:	252049c1 	.word	0x252049c1
 8002894:	397b839a 	.word	0x397b839a
 8002898:	3fe921fb 	.word	0x3fe921fb
 800289c:	4002d97b 	.word	0x4002d97b
 80028a0:	3ff921fb 	.word	0x3ff921fb
 80028a4:	413921fb 	.word	0x413921fb
 80028a8:	3fe00000 	.word	0x3fe00000
 80028ac:	08003244 	.word	0x08003244
 80028b0:	7fefffff 	.word	0x7fefffff
 80028b4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80028b8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80028bc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80028c0:	460f      	mov	r7, r1
 80028c2:	f7fd ffb3 	bl	800082c <__aeabi_d2iz>
 80028c6:	f7fd febf 	bl	8000648 <__aeabi_i2d>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4630      	mov	r0, r6
 80028d0:	4639      	mov	r1, r7
 80028d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80028d6:	f7fd fd69 	bl	80003ac <__aeabi_dsub>
 80028da:	2200      	movs	r2, #0
 80028dc:	4b21      	ldr	r3, [pc, #132]	@ (8002964 <__ieee754_rem_pio2+0x3e4>)
 80028de:	f7fd fc37 	bl	8000150 <__aeabi_dmul>
 80028e2:	460f      	mov	r7, r1
 80028e4:	4606      	mov	r6, r0
 80028e6:	f7fd ffa1 	bl	800082c <__aeabi_d2iz>
 80028ea:	f7fd fead 	bl	8000648 <__aeabi_i2d>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4630      	mov	r0, r6
 80028f4:	4639      	mov	r1, r7
 80028f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80028fa:	f7fd fd57 	bl	80003ac <__aeabi_dsub>
 80028fe:	2200      	movs	r2, #0
 8002900:	4b18      	ldr	r3, [pc, #96]	@ (8002964 <__ieee754_rem_pio2+0x3e4>)
 8002902:	f7fd fc25 	bl	8000150 <__aeabi_dmul>
 8002906:	f04f 0803 	mov.w	r8, #3
 800290a:	2600      	movs	r6, #0
 800290c:	2700      	movs	r7, #0
 800290e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8002912:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8002916:	4632      	mov	r2, r6
 8002918:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800291c:	463b      	mov	r3, r7
 800291e:	46c2      	mov	sl, r8
 8002920:	f108 38ff 	add.w	r8, r8, #4294967295
 8002924:	f7fd ff50 	bl	80007c8 <__aeabi_dcmpeq>
 8002928:	2800      	cmp	r0, #0
 800292a:	d1f4      	bne.n	8002916 <__ieee754_rem_pio2+0x396>
 800292c:	4b0e      	ldr	r3, [pc, #56]	@ (8002968 <__ieee754_rem_pio2+0x3e8>)
 800292e:	462a      	mov	r2, r5
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	2302      	movs	r3, #2
 8002934:	4621      	mov	r1, r4
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	a806      	add	r0, sp, #24
 800293a:	4653      	mov	r3, sl
 800293c:	f000 f81a 	bl	8002974 <__kernel_rem_pio2>
 8002940:	9b04      	ldr	r3, [sp, #16]
 8002942:	4605      	mov	r5, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	f6bf ae56 	bge.w	80025f6 <__ieee754_rem_pio2+0x76>
 800294a:	e9d4 2100 	ldrd	r2, r1, [r4]
 800294e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002952:	e9c4 2300 	strd	r2, r3, [r4]
 8002956:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800295a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800295e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8002962:	e741      	b.n	80027e8 <__ieee754_rem_pio2+0x268>
 8002964:	41700000 	.word	0x41700000
 8002968:	080032c4 	.word	0x080032c4

0800296c <fabs>:
 800296c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002970:	4619      	mov	r1, r3
 8002972:	4770      	bx	lr

08002974 <__kernel_rem_pio2>:
 8002974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002978:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800297c:	9308      	str	r3, [sp, #32]
 800297e:	9104      	str	r1, [sp, #16]
 8002980:	4bb6      	ldr	r3, [pc, #728]	@ (8002c5c <__kernel_rem_pio2+0x2e8>)
 8002982:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8002984:	f112 0f14 	cmn.w	r2, #20
 8002988:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800298c:	bfa8      	it	ge
 800298e:	1ed4      	subge	r4, r2, #3
 8002990:	9302      	str	r3, [sp, #8]
 8002992:	9b08      	ldr	r3, [sp, #32]
 8002994:	bfb8      	it	lt
 8002996:	2400      	movlt	r4, #0
 8002998:	f103 33ff 	add.w	r3, r3, #4294967295
 800299c:	9306      	str	r3, [sp, #24]
 800299e:	bfa4      	itt	ge
 80029a0:	2318      	movge	r3, #24
 80029a2:	fb94 f4f3 	sdivge	r4, r4, r3
 80029a6:	f06f 0317 	mvn.w	r3, #23
 80029aa:	fb04 3303 	mla	r3, r4, r3, r3
 80029ae:	eb03 0a02 	add.w	sl, r3, r2
 80029b2:	9a06      	ldr	r2, [sp, #24]
 80029b4:	9b02      	ldr	r3, [sp, #8]
 80029b6:	1aa7      	subs	r7, r4, r2
 80029b8:	eb03 0802 	add.w	r8, r3, r2
 80029bc:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80029be:	2500      	movs	r5, #0
 80029c0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80029c4:	2200      	movs	r2, #0
 80029c6:	2300      	movs	r3, #0
 80029c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80029ca:	ae20      	add	r6, sp, #128	@ 0x80
 80029cc:	4545      	cmp	r5, r8
 80029ce:	dd14      	ble.n	80029fa <__kernel_rem_pio2+0x86>
 80029d0:	f04f 0800 	mov.w	r8, #0
 80029d4:	9a08      	ldr	r2, [sp, #32]
 80029d6:	ab20      	add	r3, sp, #128	@ 0x80
 80029d8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80029dc:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 80029e0:	9b02      	ldr	r3, [sp, #8]
 80029e2:	4598      	cmp	r8, r3
 80029e4:	dc35      	bgt.n	8002a52 <__kernel_rem_pio2+0xde>
 80029e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80029e8:	2200      	movs	r2, #0
 80029ea:	f1a3 0908 	sub.w	r9, r3, #8
 80029ee:	2300      	movs	r3, #0
 80029f0:	462f      	mov	r7, r5
 80029f2:	2600      	movs	r6, #0
 80029f4:	e9cd 2300 	strd	r2, r3, [sp]
 80029f8:	e01f      	b.n	8002a3a <__kernel_rem_pio2+0xc6>
 80029fa:	42ef      	cmn	r7, r5
 80029fc:	d40b      	bmi.n	8002a16 <__kernel_rem_pio2+0xa2>
 80029fe:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8002a02:	e9cd 2300 	strd	r2, r3, [sp]
 8002a06:	f7fd fe1f 	bl	8000648 <__aeabi_i2d>
 8002a0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002a0e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8002a12:	3501      	adds	r5, #1
 8002a14:	e7da      	b.n	80029cc <__kernel_rem_pio2+0x58>
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	e7f8      	b.n	8002a0e <__kernel_rem_pio2+0x9a>
 8002a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a20:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8002a24:	f7fd fb94 	bl	8000150 <__aeabi_dmul>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002a30:	f7fd fcbe 	bl	80003b0 <__adddf3>
 8002a34:	e9cd 0100 	strd	r0, r1, [sp]
 8002a38:	3601      	adds	r6, #1
 8002a3a:	9b06      	ldr	r3, [sp, #24]
 8002a3c:	3f08      	subs	r7, #8
 8002a3e:	429e      	cmp	r6, r3
 8002a40:	ddec      	ble.n	8002a1c <__kernel_rem_pio2+0xa8>
 8002a42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002a46:	f108 0801 	add.w	r8, r8, #1
 8002a4a:	e8eb 2302 	strd	r2, r3, [fp], #8
 8002a4e:	3508      	adds	r5, #8
 8002a50:	e7c6      	b.n	80029e0 <__kernel_rem_pio2+0x6c>
 8002a52:	9b02      	ldr	r3, [sp, #8]
 8002a54:	aa0c      	add	r2, sp, #48	@ 0x30
 8002a56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002a5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002a5c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8002a5e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8002a62:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002a66:	930a      	str	r3, [sp, #40]	@ 0x28
 8002a68:	ab98      	add	r3, sp, #608	@ 0x260
 8002a6a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002a6e:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 8002a72:	ab70      	add	r3, sp, #448	@ 0x1c0
 8002a74:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002a78:	ae0c      	add	r6, sp, #48	@ 0x30
 8002a7a:	4698      	mov	r8, r3
 8002a7c:	46b1      	mov	r9, r6
 8002a7e:	465f      	mov	r7, fp
 8002a80:	9307      	str	r3, [sp, #28]
 8002a82:	2f00      	cmp	r7, #0
 8002a84:	f1a8 0808 	sub.w	r8, r8, #8
 8002a88:	dc71      	bgt.n	8002b6e <__kernel_rem_pio2+0x1fa>
 8002a8a:	4652      	mov	r2, sl
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	4629      	mov	r1, r5
 8002a90:	f000 fa96 	bl	8002fc0 <scalbn>
 8002a94:	2200      	movs	r2, #0
 8002a96:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8002a9a:	4604      	mov	r4, r0
 8002a9c:	460d      	mov	r5, r1
 8002a9e:	f7fd fb57 	bl	8000150 <__aeabi_dmul>
 8002aa2:	f000 fb05 	bl	80030b0 <floor>
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	4b6d      	ldr	r3, [pc, #436]	@ (8002c60 <__kernel_rem_pio2+0x2ec>)
 8002aaa:	f7fd fb51 	bl	8000150 <__aeabi_dmul>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	f7fd fc79 	bl	80003ac <__aeabi_dsub>
 8002aba:	460d      	mov	r5, r1
 8002abc:	4604      	mov	r4, r0
 8002abe:	f7fd feb5 	bl	800082c <__aeabi_d2iz>
 8002ac2:	9005      	str	r0, [sp, #20]
 8002ac4:	f7fd fdc0 	bl	8000648 <__aeabi_i2d>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4620      	mov	r0, r4
 8002ace:	4629      	mov	r1, r5
 8002ad0:	f7fd fc6c 	bl	80003ac <__aeabi_dsub>
 8002ad4:	f1ba 0f00 	cmp.w	sl, #0
 8002ad8:	4680      	mov	r8, r0
 8002ada:	4689      	mov	r9, r1
 8002adc:	dd6d      	ble.n	8002bba <__kernel_rem_pio2+0x246>
 8002ade:	f10b 31ff 	add.w	r1, fp, #4294967295
 8002ae2:	ab0c      	add	r3, sp, #48	@ 0x30
 8002ae4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ae8:	9c05      	ldr	r4, [sp, #20]
 8002aea:	f1ca 0018 	rsb	r0, sl, #24
 8002aee:	fa43 f200 	asr.w	r2, r3, r0
 8002af2:	4414      	add	r4, r2
 8002af4:	4082      	lsls	r2, r0
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	aa0c      	add	r2, sp, #48	@ 0x30
 8002afa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002afe:	f1ca 0217 	rsb	r2, sl, #23
 8002b02:	9405      	str	r4, [sp, #20]
 8002b04:	4113      	asrs	r3, r2
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	9b00      	ldr	r3, [sp, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	dd64      	ble.n	8002bd8 <__kernel_rem_pio2+0x264>
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8002b14:	4614      	mov	r4, r2
 8002b16:	9b05      	ldr	r3, [sp, #20]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	9305      	str	r3, [sp, #20]
 8002b1c:	4593      	cmp	fp, r2
 8002b1e:	f300 80ab 	bgt.w	8002c78 <__kernel_rem_pio2+0x304>
 8002b22:	f1ba 0f00 	cmp.w	sl, #0
 8002b26:	dd07      	ble.n	8002b38 <__kernel_rem_pio2+0x1c4>
 8002b28:	f1ba 0f01 	cmp.w	sl, #1
 8002b2c:	f000 80b2 	beq.w	8002c94 <__kernel_rem_pio2+0x320>
 8002b30:	f1ba 0f02 	cmp.w	sl, #2
 8002b34:	f000 80b9 	beq.w	8002caa <__kernel_rem_pio2+0x336>
 8002b38:	9b00      	ldr	r3, [sp, #0]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d14c      	bne.n	8002bd8 <__kernel_rem_pio2+0x264>
 8002b3e:	4642      	mov	r2, r8
 8002b40:	464b      	mov	r3, r9
 8002b42:	2000      	movs	r0, #0
 8002b44:	4947      	ldr	r1, [pc, #284]	@ (8002c64 <__kernel_rem_pio2+0x2f0>)
 8002b46:	f7fd fc31 	bl	80003ac <__aeabi_dsub>
 8002b4a:	4680      	mov	r8, r0
 8002b4c:	4689      	mov	r9, r1
 8002b4e:	2c00      	cmp	r4, #0
 8002b50:	d042      	beq.n	8002bd8 <__kernel_rem_pio2+0x264>
 8002b52:	4652      	mov	r2, sl
 8002b54:	2000      	movs	r0, #0
 8002b56:	4943      	ldr	r1, [pc, #268]	@ (8002c64 <__kernel_rem_pio2+0x2f0>)
 8002b58:	f000 fa32 	bl	8002fc0 <scalbn>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4640      	mov	r0, r8
 8002b62:	4649      	mov	r1, r9
 8002b64:	f7fd fc22 	bl	80003ac <__aeabi_dsub>
 8002b68:	4680      	mov	r8, r0
 8002b6a:	4689      	mov	r9, r1
 8002b6c:	e034      	b.n	8002bd8 <__kernel_rem_pio2+0x264>
 8002b6e:	2200      	movs	r2, #0
 8002b70:	4b3d      	ldr	r3, [pc, #244]	@ (8002c68 <__kernel_rem_pio2+0x2f4>)
 8002b72:	4620      	mov	r0, r4
 8002b74:	4629      	mov	r1, r5
 8002b76:	f7fd faeb 	bl	8000150 <__aeabi_dmul>
 8002b7a:	f7fd fe57 	bl	800082c <__aeabi_d2iz>
 8002b7e:	f7fd fd63 	bl	8000648 <__aeabi_i2d>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	e9cd 2300 	strd	r2, r3, [sp]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	4b37      	ldr	r3, [pc, #220]	@ (8002c6c <__kernel_rem_pio2+0x2f8>)
 8002b8e:	f7fd fadf 	bl	8000150 <__aeabi_dmul>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4620      	mov	r0, r4
 8002b98:	4629      	mov	r1, r5
 8002b9a:	f7fd fc07 	bl	80003ac <__aeabi_dsub>
 8002b9e:	f7fd fe45 	bl	800082c <__aeabi_d2iz>
 8002ba2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8002ba6:	f849 0b04 	str.w	r0, [r9], #4
 8002baa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002bae:	f7fd fbff 	bl	80003b0 <__adddf3>
 8002bb2:	3f01      	subs	r7, #1
 8002bb4:	4604      	mov	r4, r0
 8002bb6:	460d      	mov	r5, r1
 8002bb8:	e763      	b.n	8002a82 <__kernel_rem_pio2+0x10e>
 8002bba:	d106      	bne.n	8002bca <__kernel_rem_pio2+0x256>
 8002bbc:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002bc0:	aa0c      	add	r2, sp, #48	@ 0x30
 8002bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc6:	15db      	asrs	r3, r3, #23
 8002bc8:	e79d      	b.n	8002b06 <__kernel_rem_pio2+0x192>
 8002bca:	2200      	movs	r2, #0
 8002bcc:	4b28      	ldr	r3, [pc, #160]	@ (8002c70 <__kernel_rem_pio2+0x2fc>)
 8002bce:	f7fd fe19 	bl	8000804 <__aeabi_dcmpge>
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	d13f      	bne.n	8002c56 <__kernel_rem_pio2+0x2e2>
 8002bd6:	9000      	str	r0, [sp, #0]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2300      	movs	r3, #0
 8002bdc:	4640      	mov	r0, r8
 8002bde:	4649      	mov	r1, r9
 8002be0:	f7fd fdf2 	bl	80007c8 <__aeabi_dcmpeq>
 8002be4:	2800      	cmp	r0, #0
 8002be6:	f000 80af 	beq.w	8002d48 <__kernel_rem_pio2+0x3d4>
 8002bea:	2200      	movs	r2, #0
 8002bec:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002bf0:	9902      	ldr	r1, [sp, #8]
 8002bf2:	428b      	cmp	r3, r1
 8002bf4:	da61      	bge.n	8002cba <__kernel_rem_pio2+0x346>
 8002bf6:	2a00      	cmp	r2, #0
 8002bf8:	d076      	beq.n	8002ce8 <__kernel_rem_pio2+0x374>
 8002bfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002bfe:	ab0c      	add	r3, sp, #48	@ 0x30
 8002c00:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8002c04:	f1aa 0a18 	sub.w	sl, sl, #24
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f6      	beq.n	8002bfa <__kernel_rem_pio2+0x286>
 8002c0c:	4652      	mov	r2, sl
 8002c0e:	2000      	movs	r0, #0
 8002c10:	4914      	ldr	r1, [pc, #80]	@ (8002c64 <__kernel_rem_pio2+0x2f0>)
 8002c12:	f000 f9d5 	bl	8002fc0 <scalbn>
 8002c16:	465d      	mov	r5, fp
 8002c18:	4606      	mov	r6, r0
 8002c1a:	460f      	mov	r7, r1
 8002c1c:	f04f 0900 	mov.w	r9, #0
 8002c20:	ab70      	add	r3, sp, #448	@ 0x1c0
 8002c22:	f8df a044 	ldr.w	sl, [pc, #68]	@ 8002c68 <__kernel_rem_pio2+0x2f4>
 8002c26:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8002c2a:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 8002c2e:	2d00      	cmp	r5, #0
 8002c30:	f280 80c0 	bge.w	8002db4 <__kernel_rem_pio2+0x440>
 8002c34:	465d      	mov	r5, fp
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	f2c0 80f0 	blt.w	8002e1c <__kernel_rem_pio2+0x4a8>
 8002c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c74 <__kernel_rem_pio2+0x300>)
 8002c3e:	f04f 0900 	mov.w	r9, #0
 8002c42:	9306      	str	r3, [sp, #24]
 8002c44:	ab70      	add	r3, sp, #448	@ 0x1c0
 8002c46:	f04f 0a00 	mov.w	sl, #0
 8002c4a:	2700      	movs	r7, #0
 8002c4c:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8002c50:	ebab 0605 	sub.w	r6, fp, r5
 8002c54:	e0d6      	b.n	8002e04 <__kernel_rem_pio2+0x490>
 8002c56:	2302      	movs	r3, #2
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	e758      	b.n	8002b0e <__kernel_rem_pio2+0x19a>
 8002c5c:	08003410 	.word	0x08003410
 8002c60:	40200000 	.word	0x40200000
 8002c64:	3ff00000 	.word	0x3ff00000
 8002c68:	3e700000 	.word	0x3e700000
 8002c6c:	41700000 	.word	0x41700000
 8002c70:	3fe00000 	.word	0x3fe00000
 8002c74:	080033d0 	.word	0x080033d0
 8002c78:	f856 3b04 	ldr.w	r3, [r6], #4
 8002c7c:	b944      	cbnz	r4, 8002c90 <__kernel_rem_pio2+0x31c>
 8002c7e:	b123      	cbz	r3, 8002c8a <__kernel_rem_pio2+0x316>
 8002c80:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8002c84:	f846 3c04 	str.w	r3, [r6, #-4]
 8002c88:	2301      	movs	r3, #1
 8002c8a:	461c      	mov	r4, r3
 8002c8c:	3201      	adds	r2, #1
 8002c8e:	e745      	b.n	8002b1c <__kernel_rem_pio2+0x1a8>
 8002c90:	1acb      	subs	r3, r1, r3
 8002c92:	e7f7      	b.n	8002c84 <__kernel_rem_pio2+0x310>
 8002c94:	f10b 32ff 	add.w	r2, fp, #4294967295
 8002c98:	ab0c      	add	r3, sp, #48	@ 0x30
 8002c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002ca2:	a90c      	add	r1, sp, #48	@ 0x30
 8002ca4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8002ca8:	e746      	b.n	8002b38 <__kernel_rem_pio2+0x1c4>
 8002caa:	f10b 32ff 	add.w	r2, fp, #4294967295
 8002cae:	ab0c      	add	r3, sp, #48	@ 0x30
 8002cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002cb8:	e7f3      	b.n	8002ca2 <__kernel_rem_pio2+0x32e>
 8002cba:	a90c      	add	r1, sp, #48	@ 0x30
 8002cbc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	e794      	b.n	8002bf0 <__kernel_rem_pio2+0x27c>
 8002cc6:	3401      	adds	r4, #1
 8002cc8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8002ccc:	2a00      	cmp	r2, #0
 8002cce:	d0fa      	beq.n	8002cc6 <__kernel_rem_pio2+0x352>
 8002cd0:	9b08      	ldr	r3, [sp, #32]
 8002cd2:	aa20      	add	r2, sp, #128	@ 0x80
 8002cd4:	445b      	add	r3, fp
 8002cd6:	f10b 0801 	add.w	r8, fp, #1
 8002cda:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8002cde:	445c      	add	r4, fp
 8002ce0:	4544      	cmp	r4, r8
 8002ce2:	da04      	bge.n	8002cee <__kernel_rem_pio2+0x37a>
 8002ce4:	46a3      	mov	fp, r4
 8002ce6:	e6bf      	b.n	8002a68 <__kernel_rem_pio2+0xf4>
 8002ce8:	2401      	movs	r4, #1
 8002cea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002cec:	e7ec      	b.n	8002cc8 <__kernel_rem_pio2+0x354>
 8002cee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002cf0:	46ab      	mov	fp, r5
 8002cf2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8002cf6:	f7fd fca7 	bl	8000648 <__aeabi_i2d>
 8002cfa:	f04f 0900 	mov.w	r9, #0
 8002cfe:	2600      	movs	r6, #0
 8002d00:	2700      	movs	r7, #0
 8002d02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d04:	e9c5 0100 	strd	r0, r1, [r5]
 8002d08:	3b08      	subs	r3, #8
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	9b06      	ldr	r3, [sp, #24]
 8002d0e:	4599      	cmp	r9, r3
 8002d10:	dd07      	ble.n	8002d22 <__kernel_rem_pio2+0x3ae>
 8002d12:	9b07      	ldr	r3, [sp, #28]
 8002d14:	f108 0801 	add.w	r8, r8, #1
 8002d18:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8002d1c:	3508      	adds	r5, #8
 8002d1e:	9307      	str	r3, [sp, #28]
 8002d20:	e7de      	b.n	8002ce0 <__kernel_rem_pio2+0x36c>
 8002d22:	9900      	ldr	r1, [sp, #0]
 8002d24:	f109 0901 	add.w	r9, r9, #1
 8002d28:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8002d2c:	9100      	str	r1, [sp, #0]
 8002d2e:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 8002d32:	f7fd fa0d 	bl	8000150 <__aeabi_dmul>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	4639      	mov	r1, r7
 8002d3e:	f7fd fb37 	bl	80003b0 <__adddf3>
 8002d42:	4606      	mov	r6, r0
 8002d44:	460f      	mov	r7, r1
 8002d46:	e7e1      	b.n	8002d0c <__kernel_rem_pio2+0x398>
 8002d48:	f1ca 0200 	rsb	r2, sl, #0
 8002d4c:	4640      	mov	r0, r8
 8002d4e:	4649      	mov	r1, r9
 8002d50:	f000 f936 	bl	8002fc0 <scalbn>
 8002d54:	2200      	movs	r2, #0
 8002d56:	4b97      	ldr	r3, [pc, #604]	@ (8002fb4 <__kernel_rem_pio2+0x640>)
 8002d58:	4604      	mov	r4, r0
 8002d5a:	460d      	mov	r5, r1
 8002d5c:	f7fd fd52 	bl	8000804 <__aeabi_dcmpge>
 8002d60:	b300      	cbz	r0, 8002da4 <__kernel_rem_pio2+0x430>
 8002d62:	2200      	movs	r2, #0
 8002d64:	4b94      	ldr	r3, [pc, #592]	@ (8002fb8 <__kernel_rem_pio2+0x644>)
 8002d66:	4620      	mov	r0, r4
 8002d68:	4629      	mov	r1, r5
 8002d6a:	f7fd f9f1 	bl	8000150 <__aeabi_dmul>
 8002d6e:	f7fd fd5d 	bl	800082c <__aeabi_d2iz>
 8002d72:	4606      	mov	r6, r0
 8002d74:	f7fd fc68 	bl	8000648 <__aeabi_i2d>
 8002d78:	2200      	movs	r2, #0
 8002d7a:	4b8e      	ldr	r3, [pc, #568]	@ (8002fb4 <__kernel_rem_pio2+0x640>)
 8002d7c:	f7fd f9e8 	bl	8000150 <__aeabi_dmul>
 8002d80:	460b      	mov	r3, r1
 8002d82:	4602      	mov	r2, r0
 8002d84:	4629      	mov	r1, r5
 8002d86:	4620      	mov	r0, r4
 8002d88:	f7fd fb10 	bl	80003ac <__aeabi_dsub>
 8002d8c:	f7fd fd4e 	bl	800082c <__aeabi_d2iz>
 8002d90:	ab0c      	add	r3, sp, #48	@ 0x30
 8002d92:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8002d96:	f10b 0b01 	add.w	fp, fp, #1
 8002d9a:	f10a 0a18 	add.w	sl, sl, #24
 8002d9e:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8002da2:	e733      	b.n	8002c0c <__kernel_rem_pio2+0x298>
 8002da4:	4620      	mov	r0, r4
 8002da6:	4629      	mov	r1, r5
 8002da8:	f7fd fd40 	bl	800082c <__aeabi_d2iz>
 8002dac:	ab0c      	add	r3, sp, #48	@ 0x30
 8002dae:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8002db2:	e72b      	b.n	8002c0c <__kernel_rem_pio2+0x298>
 8002db4:	ab0c      	add	r3, sp, #48	@ 0x30
 8002db6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002dba:	f7fd fc45 	bl	8000648 <__aeabi_i2d>
 8002dbe:	4632      	mov	r2, r6
 8002dc0:	463b      	mov	r3, r7
 8002dc2:	f7fd f9c5 	bl	8000150 <__aeabi_dmul>
 8002dc6:	464a      	mov	r2, r9
 8002dc8:	e868 0102 	strd	r0, r1, [r8], #-8
 8002dcc:	4653      	mov	r3, sl
 8002dce:	4630      	mov	r0, r6
 8002dd0:	4639      	mov	r1, r7
 8002dd2:	f7fd f9bd 	bl	8000150 <__aeabi_dmul>
 8002dd6:	3d01      	subs	r5, #1
 8002dd8:	4606      	mov	r6, r0
 8002dda:	460f      	mov	r7, r1
 8002ddc:	e727      	b.n	8002c2e <__kernel_rem_pio2+0x2ba>
 8002dde:	f8dd c018 	ldr.w	ip, [sp, #24]
 8002de2:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8002de6:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8002dea:	f8cd c018 	str.w	ip, [sp, #24]
 8002dee:	f7fd f9af 	bl	8000150 <__aeabi_dmul>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4648      	mov	r0, r9
 8002df8:	4651      	mov	r1, sl
 8002dfa:	f7fd fad9 	bl	80003b0 <__adddf3>
 8002dfe:	4681      	mov	r9, r0
 8002e00:	468a      	mov	sl, r1
 8002e02:	3701      	adds	r7, #1
 8002e04:	9b02      	ldr	r3, [sp, #8]
 8002e06:	429f      	cmp	r7, r3
 8002e08:	dc01      	bgt.n	8002e0e <__kernel_rem_pio2+0x49a>
 8002e0a:	42be      	cmp	r6, r7
 8002e0c:	dae7      	bge.n	8002dde <__kernel_rem_pio2+0x46a>
 8002e0e:	ab48      	add	r3, sp, #288	@ 0x120
 8002e10:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8002e14:	e9c6 9a00 	strd	r9, sl, [r6]
 8002e18:	3d01      	subs	r5, #1
 8002e1a:	e70c      	b.n	8002c36 <__kernel_rem_pio2+0x2c2>
 8002e1c:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	dc09      	bgt.n	8002e36 <__kernel_rem_pio2+0x4c2>
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	dc2c      	bgt.n	8002e80 <__kernel_rem_pio2+0x50c>
 8002e26:	d04e      	beq.n	8002ec6 <__kernel_rem_pio2+0x552>
 8002e28:	9b05      	ldr	r3, [sp, #20]
 8002e2a:	f003 0007 	and.w	r0, r3, #7
 8002e2e:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8002e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e36:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d1f5      	bne.n	8002e28 <__kernel_rem_pio2+0x4b4>
 8002e3c:	ab48      	add	r3, sp, #288	@ 0x120
 8002e3e:	441c      	add	r4, r3
 8002e40:	4625      	mov	r5, r4
 8002e42:	46da      	mov	sl, fp
 8002e44:	f1ba 0f00 	cmp.w	sl, #0
 8002e48:	dc63      	bgt.n	8002f12 <__kernel_rem_pio2+0x59e>
 8002e4a:	4625      	mov	r5, r4
 8002e4c:	46da      	mov	sl, fp
 8002e4e:	f1ba 0f01 	cmp.w	sl, #1
 8002e52:	dc7b      	bgt.n	8002f4c <__kernel_rem_pio2+0x5d8>
 8002e54:	2000      	movs	r0, #0
 8002e56:	2100      	movs	r1, #0
 8002e58:	f1bb 0f01 	cmp.w	fp, #1
 8002e5c:	f300 8093 	bgt.w	8002f86 <__kernel_rem_pio2+0x612>
 8002e60:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8002e64:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8002e68:	9b00      	ldr	r3, [sp, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f040 8092 	bne.w	8002f94 <__kernel_rem_pio2+0x620>
 8002e70:	9b04      	ldr	r3, [sp, #16]
 8002e72:	e9c3 7800 	strd	r7, r8, [r3]
 8002e76:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8002e7a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8002e7e:	e7d3      	b.n	8002e28 <__kernel_rem_pio2+0x4b4>
 8002e80:	465d      	mov	r5, fp
 8002e82:	2000      	movs	r0, #0
 8002e84:	2100      	movs	r1, #0
 8002e86:	ab48      	add	r3, sp, #288	@ 0x120
 8002e88:	441c      	add	r4, r3
 8002e8a:	2d00      	cmp	r5, #0
 8002e8c:	da32      	bge.n	8002ef4 <__kernel_rem_pio2+0x580>
 8002e8e:	9b00      	ldr	r3, [sp, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d035      	beq.n	8002f00 <__kernel_rem_pio2+0x58c>
 8002e94:	4602      	mov	r2, r0
 8002e96:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002e9a:	9c04      	ldr	r4, [sp, #16]
 8002e9c:	2501      	movs	r5, #1
 8002e9e:	e9c4 2300 	strd	r2, r3, [r4]
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8002eaa:	f7fd fa7f 	bl	80003ac <__aeabi_dsub>
 8002eae:	ac48      	add	r4, sp, #288	@ 0x120
 8002eb0:	45ab      	cmp	fp, r5
 8002eb2:	da28      	bge.n	8002f06 <__kernel_rem_pio2+0x592>
 8002eb4:	9b00      	ldr	r3, [sp, #0]
 8002eb6:	b113      	cbz	r3, 8002ebe <__kernel_rem_pio2+0x54a>
 8002eb8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	9b04      	ldr	r3, [sp, #16]
 8002ec0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8002ec4:	e7b0      	b.n	8002e28 <__kernel_rem_pio2+0x4b4>
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	2100      	movs	r1, #0
 8002eca:	ab48      	add	r3, sp, #288	@ 0x120
 8002ecc:	441c      	add	r4, r3
 8002ece:	f1bb 0f00 	cmp.w	fp, #0
 8002ed2:	da08      	bge.n	8002ee6 <__kernel_rem_pio2+0x572>
 8002ed4:	9b00      	ldr	r3, [sp, #0]
 8002ed6:	b113      	cbz	r3, 8002ede <__kernel_rem_pio2+0x56a>
 8002ed8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002edc:	4619      	mov	r1, r3
 8002ede:	9b04      	ldr	r3, [sp, #16]
 8002ee0:	e9c3 0100 	strd	r0, r1, [r3]
 8002ee4:	e7a0      	b.n	8002e28 <__kernel_rem_pio2+0x4b4>
 8002ee6:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8002eea:	f7fd fa61 	bl	80003b0 <__adddf3>
 8002eee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002ef2:	e7ec      	b.n	8002ece <__kernel_rem_pio2+0x55a>
 8002ef4:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8002ef8:	f7fd fa5a 	bl	80003b0 <__adddf3>
 8002efc:	3d01      	subs	r5, #1
 8002efe:	e7c4      	b.n	8002e8a <__kernel_rem_pio2+0x516>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	e7c9      	b.n	8002e9a <__kernel_rem_pio2+0x526>
 8002f06:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8002f0a:	f7fd fa51 	bl	80003b0 <__adddf3>
 8002f0e:	3501      	adds	r5, #1
 8002f10:	e7ce      	b.n	8002eb0 <__kernel_rem_pio2+0x53c>
 8002f12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002f16:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8002f1a:	4640      	mov	r0, r8
 8002f1c:	4649      	mov	r1, r9
 8002f1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002f22:	f7fd fa45 	bl	80003b0 <__adddf3>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4606      	mov	r6, r0
 8002f2c:	460f      	mov	r7, r1
 8002f2e:	4640      	mov	r0, r8
 8002f30:	4649      	mov	r1, r9
 8002f32:	f7fd fa3b 	bl	80003ac <__aeabi_dsub>
 8002f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f3a:	f7fd fa39 	bl	80003b0 <__adddf3>
 8002f3e:	e865 0102 	strd	r0, r1, [r5], #-8
 8002f42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002f46:	e9c5 6700 	strd	r6, r7, [r5]
 8002f4a:	e77b      	b.n	8002e44 <__kernel_rem_pio2+0x4d0>
 8002f4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002f50:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8002f54:	4640      	mov	r0, r8
 8002f56:	4649      	mov	r1, r9
 8002f58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002f5c:	f7fd fa28 	bl	80003b0 <__adddf3>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4606      	mov	r6, r0
 8002f66:	460f      	mov	r7, r1
 8002f68:	4640      	mov	r0, r8
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	f7fd fa1e 	bl	80003ac <__aeabi_dsub>
 8002f70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f74:	f7fd fa1c 	bl	80003b0 <__adddf3>
 8002f78:	e865 0102 	strd	r0, r1, [r5], #-8
 8002f7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002f80:	e9c5 6700 	strd	r6, r7, [r5]
 8002f84:	e763      	b.n	8002e4e <__kernel_rem_pio2+0x4da>
 8002f86:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8002f8a:	f7fd fa11 	bl	80003b0 <__adddf3>
 8002f8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002f92:	e761      	b.n	8002e58 <__kernel_rem_pio2+0x4e4>
 8002f94:	9b04      	ldr	r3, [sp, #16]
 8002f96:	9a04      	ldr	r2, [sp, #16]
 8002f98:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8002f9c:	601f      	str	r7, [r3, #0]
 8002f9e:	605c      	str	r4, [r3, #4]
 8002fa0:	609d      	str	r5, [r3, #8]
 8002fa2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8002fa6:	60d3      	str	r3, [r2, #12]
 8002fa8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002fac:	6110      	str	r0, [r2, #16]
 8002fae:	6153      	str	r3, [r2, #20]
 8002fb0:	e73a      	b.n	8002e28 <__kernel_rem_pio2+0x4b4>
 8002fb2:	bf00      	nop
 8002fb4:	41700000 	.word	0x41700000
 8002fb8:	3e700000 	.word	0x3e700000
 8002fbc:	00000000 	.word	0x00000000

08002fc0 <scalbn>:
 8002fc0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8002fc4:	4616      	mov	r6, r2
 8002fc6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002fca:	4683      	mov	fp, r0
 8002fcc:	468c      	mov	ip, r1
 8002fce:	460b      	mov	r3, r1
 8002fd0:	b982      	cbnz	r2, 8002ff4 <scalbn+0x34>
 8002fd2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002fd6:	4303      	orrs	r3, r0
 8002fd8:	d039      	beq.n	800304e <scalbn+0x8e>
 8002fda:	4b2f      	ldr	r3, [pc, #188]	@ (8003098 <scalbn+0xd8>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f7fd f8b7 	bl	8000150 <__aeabi_dmul>
 8002fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800309c <scalbn+0xdc>)
 8002fe4:	4683      	mov	fp, r0
 8002fe6:	429e      	cmp	r6, r3
 8002fe8:	468c      	mov	ip, r1
 8002fea:	da0d      	bge.n	8003008 <scalbn+0x48>
 8002fec:	a326      	add	r3, pc, #152	@ (adr r3, 8003088 <scalbn+0xc8>)
 8002fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff2:	e01b      	b.n	800302c <scalbn+0x6c>
 8002ff4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8002ff8:	42ba      	cmp	r2, r7
 8002ffa:	d109      	bne.n	8003010 <scalbn+0x50>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	f7fd f9d7 	bl	80003b0 <__adddf3>
 8003002:	4683      	mov	fp, r0
 8003004:	468c      	mov	ip, r1
 8003006:	e022      	b.n	800304e <scalbn+0x8e>
 8003008:	460b      	mov	r3, r1
 800300a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800300e:	3a36      	subs	r2, #54	@ 0x36
 8003010:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8003014:	428e      	cmp	r6, r1
 8003016:	dd0c      	ble.n	8003032 <scalbn+0x72>
 8003018:	a31d      	add	r3, pc, #116	@ (adr r3, 8003090 <scalbn+0xd0>)
 800301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301e:	461c      	mov	r4, r3
 8003020:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8003024:	f361 74df 	bfi	r4, r1, #31, #1
 8003028:	4621      	mov	r1, r4
 800302a:	481d      	ldr	r0, [pc, #116]	@ (80030a0 <scalbn+0xe0>)
 800302c:	f7fd f890 	bl	8000150 <__aeabi_dmul>
 8003030:	e7e7      	b.n	8003002 <scalbn+0x42>
 8003032:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8003036:	4432      	add	r2, r6
 8003038:	428a      	cmp	r2, r1
 800303a:	dced      	bgt.n	8003018 <scalbn+0x58>
 800303c:	2a00      	cmp	r2, #0
 800303e:	dd0a      	ble.n	8003056 <scalbn+0x96>
 8003040:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003044:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003048:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800304c:	46ac      	mov	ip, r5
 800304e:	4658      	mov	r0, fp
 8003050:	4661      	mov	r1, ip
 8003052:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8003056:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800305a:	da09      	bge.n	8003070 <scalbn+0xb0>
 800305c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8003060:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8003064:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8003068:	480e      	ldr	r0, [pc, #56]	@ (80030a4 <scalbn+0xe4>)
 800306a:	f041 011f 	orr.w	r1, r1, #31
 800306e:	e7bd      	b.n	8002fec <scalbn+0x2c>
 8003070:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003074:	3236      	adds	r2, #54	@ 0x36
 8003076:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800307a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800307e:	4658      	mov	r0, fp
 8003080:	4629      	mov	r1, r5
 8003082:	2200      	movs	r2, #0
 8003084:	4b08      	ldr	r3, [pc, #32]	@ (80030a8 <scalbn+0xe8>)
 8003086:	e7d1      	b.n	800302c <scalbn+0x6c>
 8003088:	c2f8f359 	.word	0xc2f8f359
 800308c:	01a56e1f 	.word	0x01a56e1f
 8003090:	8800759c 	.word	0x8800759c
 8003094:	7e37e43c 	.word	0x7e37e43c
 8003098:	43500000 	.word	0x43500000
 800309c:	ffff3cb0 	.word	0xffff3cb0
 80030a0:	8800759c 	.word	0x8800759c
 80030a4:	c2f8f359 	.word	0xc2f8f359
 80030a8:	3c900000 	.word	0x3c900000
 80030ac:	00000000 	.word	0x00000000

080030b0 <floor>:
 80030b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030b4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80030b8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80030bc:	2e13      	cmp	r6, #19
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	460c      	mov	r4, r1
 80030c4:	4605      	mov	r5, r0
 80030c6:	4680      	mov	r8, r0
 80030c8:	dc35      	bgt.n	8003136 <floor+0x86>
 80030ca:	2e00      	cmp	r6, #0
 80030cc:	da17      	bge.n	80030fe <floor+0x4e>
 80030ce:	a334      	add	r3, pc, #208	@ (adr r3, 80031a0 <floor+0xf0>)
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f7fd f96c 	bl	80003b0 <__adddf3>
 80030d8:	2200      	movs	r2, #0
 80030da:	2300      	movs	r3, #0
 80030dc:	f7fd fb9c 	bl	8000818 <__aeabi_dcmpgt>
 80030e0:	b150      	cbz	r0, 80030f8 <floor+0x48>
 80030e2:	2c00      	cmp	r4, #0
 80030e4:	da57      	bge.n	8003196 <floor+0xe6>
 80030e6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80030ea:	432c      	orrs	r4, r5
 80030ec:	2500      	movs	r5, #0
 80030ee:	42ac      	cmp	r4, r5
 80030f0:	4c2d      	ldr	r4, [pc, #180]	@ (80031a8 <floor+0xf8>)
 80030f2:	bf08      	it	eq
 80030f4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80030f8:	4623      	mov	r3, r4
 80030fa:	462a      	mov	r2, r5
 80030fc:	e024      	b.n	8003148 <floor+0x98>
 80030fe:	4f2b      	ldr	r7, [pc, #172]	@ (80031ac <floor+0xfc>)
 8003100:	4137      	asrs	r7, r6
 8003102:	ea01 0c07 	and.w	ip, r1, r7
 8003106:	ea5c 0c00 	orrs.w	ip, ip, r0
 800310a:	d01d      	beq.n	8003148 <floor+0x98>
 800310c:	a324      	add	r3, pc, #144	@ (adr r3, 80031a0 <floor+0xf0>)
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f7fd f94d 	bl	80003b0 <__adddf3>
 8003116:	2200      	movs	r2, #0
 8003118:	2300      	movs	r3, #0
 800311a:	f7fd fb7d 	bl	8000818 <__aeabi_dcmpgt>
 800311e:	2800      	cmp	r0, #0
 8003120:	d0ea      	beq.n	80030f8 <floor+0x48>
 8003122:	2c00      	cmp	r4, #0
 8003124:	bfbe      	ittt	lt
 8003126:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800312a:	4133      	asrlt	r3, r6
 800312c:	18e4      	addlt	r4, r4, r3
 800312e:	2500      	movs	r5, #0
 8003130:	ea24 0407 	bic.w	r4, r4, r7
 8003134:	e7e0      	b.n	80030f8 <floor+0x48>
 8003136:	2e33      	cmp	r6, #51	@ 0x33
 8003138:	dd0a      	ble.n	8003150 <floor+0xa0>
 800313a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800313e:	d103      	bne.n	8003148 <floor+0x98>
 8003140:	f7fd f936 	bl	80003b0 <__adddf3>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4610      	mov	r0, r2
 800314a:	4619      	mov	r1, r3
 800314c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003150:	f04f 3cff 	mov.w	ip, #4294967295
 8003154:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8003158:	fa2c f707 	lsr.w	r7, ip, r7
 800315c:	4207      	tst	r7, r0
 800315e:	d0f3      	beq.n	8003148 <floor+0x98>
 8003160:	a30f      	add	r3, pc, #60	@ (adr r3, 80031a0 <floor+0xf0>)
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	f7fd f923 	bl	80003b0 <__adddf3>
 800316a:	2200      	movs	r2, #0
 800316c:	2300      	movs	r3, #0
 800316e:	f7fd fb53 	bl	8000818 <__aeabi_dcmpgt>
 8003172:	2800      	cmp	r0, #0
 8003174:	d0c0      	beq.n	80030f8 <floor+0x48>
 8003176:	2c00      	cmp	r4, #0
 8003178:	da0a      	bge.n	8003190 <floor+0xe0>
 800317a:	2e14      	cmp	r6, #20
 800317c:	d101      	bne.n	8003182 <floor+0xd2>
 800317e:	3401      	adds	r4, #1
 8003180:	e006      	b.n	8003190 <floor+0xe0>
 8003182:	2301      	movs	r3, #1
 8003184:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8003188:	40b3      	lsls	r3, r6
 800318a:	441d      	add	r5, r3
 800318c:	4545      	cmp	r5, r8
 800318e:	d3f6      	bcc.n	800317e <floor+0xce>
 8003190:	ea25 0507 	bic.w	r5, r5, r7
 8003194:	e7b0      	b.n	80030f8 <floor+0x48>
 8003196:	2500      	movs	r5, #0
 8003198:	462c      	mov	r4, r5
 800319a:	e7ad      	b.n	80030f8 <floor+0x48>
 800319c:	f3af 8000 	nop.w
 80031a0:	8800759c 	.word	0x8800759c
 80031a4:	7e37e43c 	.word	0x7e37e43c
 80031a8:	bff00000 	.word	0xbff00000
 80031ac:	000fffff 	.word	0x000fffff

080031b0 <memset>:
 80031b0:	4603      	mov	r3, r0
 80031b2:	4402      	add	r2, r0
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d100      	bne.n	80031ba <memset+0xa>
 80031b8:	4770      	bx	lr
 80031ba:	f803 1b01 	strb.w	r1, [r3], #1
 80031be:	e7f9      	b.n	80031b4 <memset+0x4>

080031c0 <__libc_init_array>:
 80031c0:	b570      	push	{r4, r5, r6, lr}
 80031c2:	2600      	movs	r6, #0
 80031c4:	4d0c      	ldr	r5, [pc, #48]	@ (80031f8 <__libc_init_array+0x38>)
 80031c6:	4c0d      	ldr	r4, [pc, #52]	@ (80031fc <__libc_init_array+0x3c>)
 80031c8:	1b64      	subs	r4, r4, r5
 80031ca:	10a4      	asrs	r4, r4, #2
 80031cc:	42a6      	cmp	r6, r4
 80031ce:	d109      	bne.n	80031e4 <__libc_init_array+0x24>
 80031d0:	f000 f81a 	bl	8003208 <_init>
 80031d4:	2600      	movs	r6, #0
 80031d6:	4d0a      	ldr	r5, [pc, #40]	@ (8003200 <__libc_init_array+0x40>)
 80031d8:	4c0a      	ldr	r4, [pc, #40]	@ (8003204 <__libc_init_array+0x44>)
 80031da:	1b64      	subs	r4, r4, r5
 80031dc:	10a4      	asrs	r4, r4, #2
 80031de:	42a6      	cmp	r6, r4
 80031e0:	d105      	bne.n	80031ee <__libc_init_array+0x2e>
 80031e2:	bd70      	pop	{r4, r5, r6, pc}
 80031e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031e8:	4798      	blx	r3
 80031ea:	3601      	adds	r6, #1
 80031ec:	e7ee      	b.n	80031cc <__libc_init_array+0xc>
 80031ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f2:	4798      	blx	r3
 80031f4:	3601      	adds	r6, #1
 80031f6:	e7f2      	b.n	80031de <__libc_init_array+0x1e>
 80031f8:	08003420 	.word	0x08003420
 80031fc:	08003420 	.word	0x08003420
 8003200:	08003420 	.word	0x08003420
 8003204:	08003424 	.word	0x08003424

08003208 <_init>:
 8003208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320a:	bf00      	nop
 800320c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320e:	bc08      	pop	{r3}
 8003210:	469e      	mov	lr, r3
 8003212:	4770      	bx	lr

08003214 <_fini>:
 8003214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003216:	bf00      	nop
 8003218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321a:	bc08      	pop	{r3}
 800321c:	469e      	mov	lr, r3
 800321e:	4770      	bx	lr
