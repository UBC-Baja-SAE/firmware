
rl_esus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a04  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002cd4  08002cd4  00003cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002d40  08002d40  00003d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08002d44  08002d44  00003d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08002d48  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000012c  24000010  08002d58  00004010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400013c  08002d58  0000413c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000af9c  00000000  00000000  0000403e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001762  00000000  00000000  0000efda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000009d8  00000000  00000000  00010740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000766  00000000  00000000  00011118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00031b5e  00000000  00000000  0001187e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000a4c2  00000000  00000000  000433dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00142d64  00000000  00000000  0004d89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00190602  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002908  00000000  00000000  00190648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000068  00000000  00000000  00192f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000010 	.word	0x24000010
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08002cbc 	.word	0x08002cbc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000014 	.word	0x24000014
 800030c:	08002cbc 	.word	0x08002cbc

08000310 <V_to_X>:
/**
 * @brief Converts voltage to physical distance using linear interpolation.
 * @param volt Voltage read from the potentiometer.
 * @return Distance in centimeters (cm).
 */
static float V_to_X(float volt) {
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	ed87 0a01 	vstr	s0, [r7, #4]
    // Linear Interpolation: X = X_EXTEND + V * ( (X_EXTEND - X_COMP) / (V_EXTEND - V_COMP) )

    // Safety check against division by zero
    if (V_EXTEND == V_COMP) return 0.0f;

    x_cm = X_EXTEND + volt * ((X_EXTEND - X_COMP) / (V_EXTEND - V_COMP));
 800031a:	edd7 7a01 	vldr	s15, [r7, #4]
 800031e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000348 <V_to_X+0x38>
 8000322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000326:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800034c <V_to_X+0x3c>
 800032a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800032e:	edc7 7a03 	vstr	s15, [r7, #12]

    return x_cm;
 8000332:	68fb      	ldr	r3, [r7, #12]
}
 8000334:	ee07 3a90 	vmov	s15, r3
 8000338:	eeb0 0a67 	vmov.f32	s0, s15
 800033c:	3714      	adds	r7, #20
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	c09e7efa 	.word	0xc09e7efa
 800034c:	4290c7ae 	.word	0x4290c7ae

08000350 <HW_Read_IMU_Raw>:
// the relevant peripherals (ADC, SPI, I2C, CAN, PWM timers).
// =============================================================================

// Placeholder for reading the IMU via SPI/I2C
static void HW_Read_IMU_Raw(int16_t *accel_x, int16_t *accel_y, int16_t *accel_z,
                            int16_t *gyro_x, int16_t *gyro_y, int16_t *gyro_z) {
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
 800035c:	603b      	str	r3, [r7, #0]
    // --- Simulation placeholder for IMU ---
    *accel_x = 100; *accel_y = 50; *accel_z = 9810;
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	2264      	movs	r2, #100	@ 0x64
 8000362:	801a      	strh	r2, [r3, #0]
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	2232      	movs	r2, #50	@ 0x32
 8000368:	801a      	strh	r2, [r3, #0]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	f242 6252 	movw	r2, #9810	@ 0x2652
 8000370:	801a      	strh	r2, [r3, #0]
    *gyro_x = 100; *gyro_y = -50; *gyro_z = 20;
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	2264      	movs	r2, #100	@ 0x64
 8000376:	801a      	strh	r2, [r3, #0]
 8000378:	69bb      	ldr	r3, [r7, #24]
 800037a:	f64f 72ce 	movw	r2, #65486	@ 0xffce
 800037e:	801a      	strh	r2, [r3, #0]
 8000380:	69fb      	ldr	r3, [r7, #28]
 8000382:	2214      	movs	r2, #20
 8000384:	801a      	strh	r2, [r3, #0]
}
 8000386:	bf00      	nop
 8000388:	3714      	adds	r7, #20
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <HW_Read_Potentiometer_Raw>:

// Placeholder for reading the Linear Potentiometer via ADC
static uint16_t HW_Read_Potentiometer_Raw(void) {
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0
    // return HAL_ADC_GetValue(&hadc_potentiometer);
    // --- Simulation placeholder: returns raw ADC count (0-1023) ---
    return 512;
 8000396:	f44f 7300 	mov.w	r3, #512	@ 0x200
}
 800039a:	4618      	mov	r0, r3
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <HW_Read_Strain_Gauge_Raw>:

// Placeholder for reading the Strain Gauge via ADC
static uint16_t HW_Read_Strain_Gauge_Raw(void) {
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
    // return HAL_ADC_GetValue(&hadc_strain_gauge);
    // --- Simulation placeholder ---
    return 1200;
 80003a8:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <HW_Set_Actuator_Current_mA>:

// Placeholder for driving the physical actuator (PWM/DAC/Motor Driver)
static void HW_Set_Actuator_Current_mA(int16_t current_mA) {
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	4603      	mov	r3, r0
 80003be:	80fb      	strh	r3, [r7, #6]
    // PWM duty cyle update
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <CAN_Transmit_Message>:
    FDCAN_TxHeaderTypeDef *TxHeader,
    uint8_t aData[],
    uint32_t *TxMailbox,
    uint32_t id,
	const void* newData)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
 80003d8:	603b      	str	r3, [r7, #0]
    // 1. Configure the ID and DLC in the header
    TxHeader->Identifier = id;
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	69ba      	ldr	r2, [r7, #24]
 80003de:	601a      	str	r2, [r3, #0]

    // 2. Copy the message data into the transmission buffer
    memcpy(aData, newData, 8);
 80003e0:	2208      	movs	r2, #8
 80003e2:	69f9      	ldr	r1, [r7, #28]
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f002 fc5b 	bl	8002ca0 <memcpy>

    // 3. Transmit the message
    if (HAL_FDCAN_AddMessageToTxFifoQ(hcan, TxHeader, aData) != HAL_OK) {
 80003ea:	687a      	ldr	r2, [r7, #4]
 80003ec:	68b9      	ldr	r1, [r7, #8]
 80003ee:	68f8      	ldr	r0, [r7, #12]
 80003f0:	f001 f8a1 	bl	8001536 <HAL_FDCAN_AddMessageToTxFifoQ>
        // handle error
    }
}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <ESUS_Sense>:
// =============================================================================

/**
 * @brief Phase 1: Sense - Reads all local sensors, filters data, and converts to engineering units.
 */
void ESUS_Sense(void) {
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b08f      	sub	sp, #60	@ 0x3c
 8000400:	af02      	add	r7, sp, #8
    // raw_[0] = <x>, raw_[1] = <y>, raw_[2] = <z>
    int16_t raw_accel[3], raw_gyro[3];
    uint16_t raw_strain;
    float pot_x_cm_sum = 0.0f;
 8000402:	f04f 0300 	mov.w	r3, #0
 8000406:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // 1. IMU and Strain Gauge
    HW_Read_IMU_Raw(&raw_accel[0], &raw_accel[1], &raw_accel[2],
 8000408:	463c      	mov	r4, r7
 800040a:	f107 0308 	add.w	r3, r7, #8
 800040e:	1d1a      	adds	r2, r3, #4
 8000410:	f107 0308 	add.w	r3, r7, #8
 8000414:	1c99      	adds	r1, r3, #2
 8000416:	f107 0008 	add.w	r0, r7, #8
 800041a:	463b      	mov	r3, r7
 800041c:	3304      	adds	r3, #4
 800041e:	9301      	str	r3, [sp, #4]
 8000420:	463b      	mov	r3, r7
 8000422:	3302      	adds	r3, #2
 8000424:	9300      	str	r3, [sp, #0]
 8000426:	4623      	mov	r3, r4
 8000428:	f7ff ff92 	bl	8000350 <HW_Read_IMU_Raw>
                    &raw_gyro[0], &raw_gyro[1], &raw_gyro[2]);
    raw_strain = HW_Read_Strain_Gauge_Raw();
 800042c:	f7ff ffba 	bl	80003a4 <HW_Read_Strain_Gauge_Raw>
 8000430:	4603      	mov	r3, r0
 8000432:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // 2. Linear Potentiometer Reading (Averaged over NUM_SAMPLES)
    for(int i = 0; i < NUM_SAMPLES; i++){
 8000434:	2300      	movs	r3, #0
 8000436:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000438:	e01d      	b.n	8000476 <ESUS_Sense+0x7a>
        uint16_t raw_pot = HW_Read_Potentiometer_Raw();
 800043a:	f7ff ffaa 	bl	8000392 <HW_Read_Potentiometer_Raw>
 800043e:	4603      	mov	r3, r0
 8000440:	82fb      	strh	r3, [r7, #22]

        // Convert raw ADC value to voltage
        float voltage = (float)raw_pot * (V_REF / ADC_MAX_VALUE);
 8000442:	8afb      	ldrh	r3, [r7, #22]
 8000444:	ee07 3a90 	vmov	s15, r3
 8000448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800044c:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8000554 <ESUS_Sense+0x158>
 8000450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000454:	edc7 7a04 	vstr	s15, [r7, #16]

        // Convert voltage to distance in centimeters
        pot_x_cm_sum += V_to_X(voltage);;
 8000458:	ed97 0a04 	vldr	s0, [r7, #16]
 800045c:	f7ff ff58 	bl	8000310 <V_to_X>
 8000460:	eeb0 7a40 	vmov.f32	s14, s0
 8000464:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000468:	ee77 7a87 	vadd.f32	s15, s15, s14
 800046c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    for(int i = 0; i < NUM_SAMPLES; i++){
 8000470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000472:	3301      	adds	r3, #1
 8000474:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000478:	2b09      	cmp	r3, #9
 800047a:	ddde      	ble.n	800043a <ESUS_Sense+0x3e>
    }
    float avg_x_cm = pot_x_cm_sum / NUM_SAMPLES;
 800047c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000480:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000488:	edc7 7a08 	vstr	s15, [r7, #32]

    // --- Store Results in Global State Structure ---

    // IMU Acceleration Scaling (g * 100)
    g_esus_data.accel_x_g_x100 = raw_accel[0];
 800048c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000490:	4b31      	ldr	r3, [pc, #196]	@ (8000558 <ESUS_Sense+0x15c>)
 8000492:	801a      	strh	r2, [r3, #0]
    g_esus_data.accel_y_g_x100 = raw_accel[1];
 8000494:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000498:	4b2f      	ldr	r3, [pc, #188]	@ (8000558 <ESUS_Sense+0x15c>)
 800049a:	805a      	strh	r2, [r3, #2]
    g_esus_data.accel_z_g_x100 = raw_accel[2];
 800049c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80004a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000558 <ESUS_Sense+0x15c>)
 80004a2:	809a      	strh	r2, [r3, #4]

    // IMU Gyro Scaling (deg/s * 10)
    g_esus_data.gyro_x_dps_x10 = raw_gyro[0];
 80004a4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80004a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000558 <ESUS_Sense+0x15c>)
 80004aa:	80da      	strh	r2, [r3, #6]
    g_esus_data.gyro_y_dps_x10 = raw_gyro[1];
 80004ac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80004b0:	4b29      	ldr	r3, [pc, #164]	@ (8000558 <ESUS_Sense+0x15c>)
 80004b2:	811a      	strh	r2, [r3, #8]
    g_esus_data.gyro_z_dps_x10 = raw_gyro[2];
 80004b4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80004b8:	4b27      	ldr	r3, [pc, #156]	@ (8000558 <ESUS_Sense+0x15c>)
 80004ba:	815a      	strh	r2, [r3, #10]

    // Potentiometer Position (Convert cm to mm and round to nearest integer)
    uint16_t current_position_mm = (uint16_t)roundf(avg_x_cm * 10.0f);
 80004bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80004c0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80004c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80004c8:	eeb0 0a67 	vmov.f32	s0, s15
 80004cc:	f002 fb98 	bl	8002c00 <roundf>
 80004d0:	eef0 7a40 	vmov.f32	s15, s0
 80004d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80004d8:	ee17 3a90 	vmov	r3, s15
 80004dc:	83fb      	strh	r3, [r7, #30]
    g_esus_data.suspension_position_mm = current_position_mm;
 80004de:	4a1e      	ldr	r2, [pc, #120]	@ (8000558 <ESUS_Sense+0x15c>)
 80004e0:	8bfb      	ldrh	r3, [r7, #30]
 80004e2:	8193      	strh	r3, [r2, #12]

    // Calculate Suspension Velocity
    float velocity_mm_s = ((float)current_position_mm - s_prev_position_mm) / CONTROL_PERIOD_S;
 80004e4:	8bfb      	ldrh	r3, [r7, #30]
 80004e6:	ee07 3a90 	vmov	s15, r3
 80004ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80004ee:	4b1b      	ldr	r3, [pc, #108]	@ (800055c <ESUS_Sense+0x160>)
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	ee07 3a90 	vmov	s15, r3
 80004f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80004fe:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000560 <ESUS_Sense+0x164>
 8000502:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000506:	edc7 7a06 	vstr	s15, [r7, #24]
    g_esus_data.suspension_velocity_mmps_x10 = (int16_t)roundf(velocity_mm_s * 10.0f);
 800050a:	edd7 7a06 	vldr	s15, [r7, #24]
 800050e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000516:	eeb0 0a67 	vmov.f32	s0, s15
 800051a:	f002 fb71 	bl	8002c00 <roundf>
 800051e:	eef0 7a40 	vmov.f32	s15, s0
 8000522:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000526:	ee17 3a90 	vmov	r3, s15
 800052a:	b21a      	sxth	r2, r3
 800052c:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <ESUS_Sense+0x15c>)
 800052e:	81da      	strh	r2, [r3, #14]

    s_prev_position_mm = current_position_mm;
 8000530:	4a0a      	ldr	r2, [pc, #40]	@ (800055c <ESUS_Sense+0x160>)
 8000532:	8bfb      	ldrh	r3, [r7, #30]
 8000534:	8013      	strh	r3, [r2, #0]

    // Strain Gauge Scaling
    g_esus_data.strain_force_mN_x10 = (int16_t)((raw_strain * 5) / 10);
 8000536:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000538:	2b00      	cmp	r3, #0
 800053a:	da00      	bge.n	800053e <ESUS_Sense+0x142>
 800053c:	3301      	adds	r3, #1
 800053e:	105b      	asrs	r3, r3, #1
 8000540:	b21a      	sxth	r2, r3
 8000542:	4b05      	ldr	r3, [pc, #20]	@ (8000558 <ESUS_Sense+0x15c>)
 8000544:	821a      	strh	r2, [r3, #16]

    g_esus_data.sensor_data_fresh = true;
 8000546:	4b04      	ldr	r3, [pc, #16]	@ (8000558 <ESUS_Sense+0x15c>)
 8000548:	2201      	movs	r2, #1
 800054a:	749a      	strb	r2, [r3, #18]
}
 800054c:	bf00      	nop
 800054e:	3734      	adds	r7, #52	@ 0x34
 8000550:	46bd      	mov	sp, r7
 8000552:	bd90      	pop	{r4, r7, pc}
 8000554:	3ba0280a 	.word	0x3ba0280a
 8000558:	2400002c 	.word	0x2400002c
 800055c:	24000044 	.word	0x24000044
 8000560:	3c23d70a 	.word	0x3c23d70a

08000564 <ESUS_Control>:
// =============================================================================

/**
 * @brief Phase 2: Control - Executes the core suspension control algorithm and calculates actuator command.
 */
void ESUS_Control(void) {
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
    if (!g_esus_data.sensor_data_fresh) {
 800056a:	4b1f      	ldr	r3, [pc, #124]	@ (80005e8 <ESUS_Control+0x84>)
 800056c:	7c9b      	ldrb	r3, [r3, #18]
 800056e:	f083 0301 	eor.w	r3, r3, #1
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b00      	cmp	r3, #0
 8000576:	d130      	bne.n	80005da <ESUS_Control+0x76>
    }

    // --- Simplified Control Algorithm Placeholder (PID Example) ---

    // 1. Calculate Error (Target ride height is 500mm)
    int16_t position_error = 500 - (int16_t)g_esus_data.suspension_position_mm;
 8000578:	4b1b      	ldr	r3, [pc, #108]	@ (80005e8 <ESUS_Control+0x84>)
 800057a:	899b      	ldrh	r3, [r3, #12]
 800057c:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8000580:	b29b      	uxth	r3, r3
 8000582:	817b      	strh	r3, [r7, #10]

    // 2. Proportional Term (Kp = 10)
    int32_t proportional_cmd = position_error * 10;
 8000584:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000588:	4613      	mov	r3, r2
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	4413      	add	r3, r2
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	607b      	str	r3, [r7, #4]

    // 3. Damping Term (Placeholder: resistance based on angular velocity)
    int32_t damping_term = g_esus_data.gyro_z_dps_x10 * 2;
 8000592:	4b15      	ldr	r3, [pc, #84]	@ (80005e8 <ESUS_Control+0x84>)
 8000594:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	603b      	str	r3, [r7, #0]

    // 4. Calculate Total Command (Target current in mA)
    int32_t total_command_mA = (proportional_cmd - damping_term) / 10;
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	4a12      	ldr	r2, [pc, #72]	@ (80005ec <ESUS_Control+0x88>)
 80005a4:	fb82 1203 	smull	r1, r2, r2, r3
 80005a8:	1092      	asrs	r2, r2, #2
 80005aa:	17db      	asrs	r3, r3, #31
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	60fb      	str	r3, [r7, #12]

    // 5. Apply Saturation/Clamping
    if (total_command_mA > 1000) total_command_mA = 1000;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80005b6:	dd02      	ble.n	80005be <ESUS_Control+0x5a>
 80005b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005bc:	60fb      	str	r3, [r7, #12]
    if (total_command_mA < -1000) total_command_mA = -1000;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80005c4:	da01      	bge.n	80005ca <ESUS_Control+0x66>
 80005c6:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <ESUS_Control+0x8c>)
 80005c8:	60fb      	str	r3, [r7, #12]

    // 6. Update Actuator Command Structure
    g_actuator_command.actuator_current_mA = (int16_t)total_command_mA;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	b21a      	sxth	r2, r3
 80005ce:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <ESUS_Control+0x90>)
 80005d0:	801a      	strh	r2, [r3, #0]
    g_esus_data.sensor_data_fresh = false; // Data is now consumed
 80005d2:	4b05      	ldr	r3, [pc, #20]	@ (80005e8 <ESUS_Control+0x84>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	749a      	strb	r2, [r3, #18]
 80005d8:	e000      	b.n	80005dc <ESUS_Control+0x78>
        return;
 80005da:	bf00      	nop
}
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	2400002c 	.word	0x2400002c
 80005ec:	66666667 	.word	0x66666667
 80005f0:	fffffc18 	.word	0xfffffc18
 80005f4:	24000040 	.word	0x24000040

080005f8 <ESUS_Publish>:
void ESUS_Publish(
    FDCAN_HandleTypeDef *hcan,
    FDCAN_TxHeaderTypeDef *TxHeader,
    uint8_t aData[],
    uint32_t *TxMailbox
) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08c      	sub	sp, #48	@ 0x30
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
 8000604:	603b      	str	r3, [r7, #0]
    // 1. Actuation (Output)
    HW_Set_Actuator_Current_mA(g_actuator_command.actuator_current_mA);
 8000606:	4b2f      	ldr	r3, [pc, #188]	@ (80006c4 <ESUS_Publish+0xcc>)
 8000608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fed2 	bl	80003b6 <HW_Set_Actuator_Current_mA>


    // A. Acceleration Message
    CanMsg_Accel_t accel_msg = {
        .accel_x_g_x100 = g_esus_data.accel_x_g_x100,
 8000612:	4b2d      	ldr	r3, [pc, #180]	@ (80006c8 <ESUS_Publish+0xd0>)
 8000614:	f9b3 3000 	ldrsh.w	r3, [r3]
    CanMsg_Accel_t accel_msg = {
 8000618:	843b      	strh	r3, [r7, #32]
        .accel_y_g_x100 = g_esus_data.accel_y_g_x100,
 800061a:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <ESUS_Publish+0xd0>)
 800061c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    CanMsg_Accel_t accel_msg = {
 8000620:	847b      	strh	r3, [r7, #34]	@ 0x22
        .accel_z_g_x100 = g_esus_data.accel_z_g_x100,
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <ESUS_Publish+0xd0>)
 8000624:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    CanMsg_Accel_t accel_msg = {
 8000628:	84bb      	strh	r3, [r7, #36]	@ 0x24
    };
    CAN_Transmit_Message(hcan, TxHeader, aData, TxMailbox, CAN_ID_ESUS_RL_IMU_ACCEL, (const uint8_t*)&accel_msg);
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	68b9      	ldr	r1, [r7, #8]
 800063c:	68f8      	ldr	r0, [r7, #12]
 800063e:	f7ff fec5 	bl	80003cc <CAN_Transmit_Message>

    // B. Gyro Message
    CanMsg_Gyro_t gyro_msg = {
        .gyro_x_dps_x10 = g_esus_data.gyro_x_dps_x10,
 8000642:	4b21      	ldr	r3, [pc, #132]	@ (80006c8 <ESUS_Publish+0xd0>)
 8000644:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    CanMsg_Gyro_t gyro_msg = {
 8000648:	833b      	strh	r3, [r7, #24]
        .gyro_y_dps_x10 = g_esus_data.gyro_y_dps_x10,
 800064a:	4b1f      	ldr	r3, [pc, #124]	@ (80006c8 <ESUS_Publish+0xd0>)
 800064c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    CanMsg_Gyro_t gyro_msg = {
 8000650:	837b      	strh	r3, [r7, #26]
        .gyro_z_dps_x10 = g_esus_data.gyro_z_dps_x10,
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <ESUS_Publish+0xd0>)
 8000654:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    CanMsg_Gyro_t gyro_msg = {
 8000658:	83bb      	strh	r3, [r7, #28]
    };
    CAN_Transmit_Message(hcan, TxHeader, aData, TxMailbox, CAN_ID_ESUS_RL_IMU_GYRO, (const uint8_t*)&gyro_msg);
 800065a:	f107 0318 	add.w	r3, r7, #24
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	f240 1321 	movw	r3, #289	@ 0x121
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	68b9      	ldr	r1, [r7, #8]
 800066c:	68f8      	ldr	r0, [r7, #12]
 800066e:	f7ff fead 	bl	80003cc <CAN_Transmit_Message>

    // C. Suspension Position Message
    CanMsg_Suspension_t susp_msg = {
        .suspension_mm = g_esus_data.suspension_position_mm,
 8000672:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <ESUS_Publish+0xd0>)
 8000674:	899b      	ldrh	r3, [r3, #12]
    CanMsg_Suspension_t susp_msg = {
 8000676:	82bb      	strh	r3, [r7, #20]
        .suspension_velocity_mmps_x10 = g_esus_data.suspension_velocity_mmps_x10
 8000678:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <ESUS_Publish+0xd0>)
 800067a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800067e:	b29b      	uxth	r3, r3
    CanMsg_Suspension_t susp_msg = {
 8000680:	82fb      	strh	r3, [r7, #22]
    };
    CAN_Transmit_Message(hcan, TxHeader, aData, TxMailbox, CAN_ID_ESUS_RL_SUSPENSION, (const uint8_t*)&susp_msg);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	9301      	str	r3, [sp, #4]
 8000688:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	68b9      	ldr	r1, [r7, #8]
 8000694:	68f8      	ldr	r0, [r7, #12]
 8000696:	f7ff fe99 	bl	80003cc <CAN_Transmit_Message>

    // D. Strain Gauge Message
    CanMsg_Strain_t strain_msg = {
        .strain_milli_N_x10 = g_esus_data.strain_force_mN_x10
 800069a:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <ESUS_Publish+0xd0>)
 800069c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
    CanMsg_Strain_t strain_msg = {
 80006a0:	823b      	strh	r3, [r7, #16]
    };
    CAN_Transmit_Message(hcan, TxHeader, aData, TxMailbox, CAN_ID_ESUS_RL_STRAIN_L, (const uint8_t*)&strain_msg);
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	f240 1323 	movw	r3, #291	@ 0x123
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	68b9      	ldr	r1, [r7, #8]
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	f7ff fe89 	bl	80003cc <CAN_Transmit_Message>
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	@ 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	24000040 	.word	0x24000040
 80006c8:	2400002c 	.word	0x2400002c
 80006cc:	00000000 	.word	0x00000000

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006d6:	f000 f8e3 	bl	80008a0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 fab5 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f881 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 f937 	bl	8000954 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80006e6:	f000 f907 	bl	80008f8 <MX_FDCAN1_Init>

  /* USER CODE BEGIN 2 */
  filter.IdType = FDCAN_STANDARD_ID;
 80006ea:	4b39      	ldr	r3, [pc, #228]	@ (80007d0 <main+0x100>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
  filter.FilterIndex = 0;
 80006f0:	4b37      	ldr	r3, [pc, #220]	@ (80007d0 <main+0x100>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
  filter.FilterType = FDCAN_FILTER_MASK;
 80006f6:	4b36      	ldr	r3, [pc, #216]	@ (80007d0 <main+0x100>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	609a      	str	r2, [r3, #8]
  filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006fc:	4b34      	ldr	r3, [pc, #208]	@ (80007d0 <main+0x100>)
 80006fe:	2201      	movs	r2, #1
 8000700:	60da      	str	r2, [r3, #12]

  filter.FilterID1 = 0x000;
 8000702:	4b33      	ldr	r3, [pc, #204]	@ (80007d0 <main+0x100>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  filter.FilterID2 = 0x000;
 8000708:	4b31      	ldr	r3, [pc, #196]	@ (80007d0 <main+0x100>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
//  filter.FilterFIFOAssignment = FDCAN_FILTER_FIFO0;
//  filter.FilterActivation = FDCAN_FILTER_DISABLE;
//  filter.SlaveStartFilterBank = 0;

  // Configure the CAN Tx Header
  header.Identifier = 0; // Initialize ID
 800070e:	4b31      	ldr	r3, [pc, #196]	@ (80007d4 <main+0x104>)
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
  header.IdType = FDCAN_STANDARD_ID; // Use FDCAN_STANDARD_ID
 8000714:	4b2f      	ldr	r3, [pc, #188]	@ (80007d4 <main+0x104>)
 8000716:	2200      	movs	r2, #0
 8000718:	605a      	str	r2, [r3, #4]
  header.TxFrameType = FDCAN_DATA_FRAME; // Data frame
 800071a:	4b2e      	ldr	r3, [pc, #184]	@ (80007d4 <main+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  header.DataLength = FDCAN_DLC_BYTES_8; // Set DLC correctly using FDCAN constants
 8000720:	4b2c      	ldr	r3, [pc, #176]	@ (80007d4 <main+0x104>)
 8000722:	2208      	movs	r2, #8
 8000724:	60da      	str	r2, [r3, #12]
  header.FDFormat = FDCAN_CLASSIC_CAN; // Use Classic CAN mode
 8000726:	4b2b      	ldr	r3, [pc, #172]	@ (80007d4 <main+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  header.BitRateSwitch = FDCAN_BRS_OFF; // BRS off for Classic CAN
 800072c:	4b29      	ldr	r3, [pc, #164]	@ (80007d4 <main+0x104>)
 800072e:	2200      	movs	r2, #0
 8000730:	615a      	str	r2, [r3, #20]
  header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000732:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <main+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  header.MessageMarker = 0;
 8000738:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <main+0x104>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  
  if (HAL_FDCAN_ConfigFilter(&hcan, &filter) != HAL_OK) {
 800073e:	4924      	ldr	r1, [pc, #144]	@ (80007d0 <main+0x100>)
 8000740:	4825      	ldr	r0, [pc, #148]	@ (80007d8 <main+0x108>)
 8000742:	f000 fe57 	bl	80013f4 <HAL_FDCAN_ConfigFilter>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <main+0x80>
    Error_Handler();
 800074c:	f000 f958 	bl	8000a00 <Error_Handler>
  }

  if (HAL_FDCAN_Start(&hcan) != HAL_OK) {
 8000750:	4821      	ldr	r0, [pc, #132]	@ (80007d8 <main+0x108>)
 8000752:	f000 fec5 	bl	80014e0 <HAL_FDCAN_Start>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <main+0x90>
    Error_Handler();
 800075c:	f000 f950 	bl	8000a00 <Error_Handler>
  }

  // Time variable for oscillation (radians)
  double t = 0.0;
 8000760:	f04f 0200 	mov.w	r2, #0
 8000764:	f04f 0300 	mov.w	r3, #0
 8000768:	e9c7 2302 	strd	r2, r3, [r7, #8]
  const double dt = 0.1;  // increment per loop
 800076c:	a314      	add	r3, pc, #80	@ (adr r3, 80007c0 <main+0xf0>)
 800076e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000772:	e9c7 2300 	strd	r2, r3, [r7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Advance time
	  t += dt;
 8000776:	ed97 6b02 	vldr	d6, [r7, #8]
 800077a:	ed97 7b00 	vldr	d7, [r7]
 800077e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000782:	ed87 7b02 	vstr	d7, [r7, #8]
	  if (t > 2.0 * M_PI) {
 8000786:	ed97 7b02 	vldr	d7, [r7, #8]
 800078a:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 80007c8 <main+0xf8>
 800078e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000796:	dd07      	ble.n	80007a8 <main+0xd8>
		  t -= 2.0 * M_PI;
 8000798:	ed97 7b02 	vldr	d7, [r7, #8]
 800079c:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 80007c8 <main+0xf8>
 80007a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80007a4:	ed87 7b02 	vstr	d7, [r7, #8]
	  }

    // USER CODE HERE

    ESUS_Sense();
 80007a8:	f7ff fe28 	bl	80003fc <ESUS_Sense>
    ESUS_Control();
 80007ac:	f7ff feda 	bl	8000564 <ESUS_Control>
    ESUS_Publish(&hcan, &header, data, &mailbox);
 80007b0:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <main+0x10c>)
 80007b2:	4a0b      	ldr	r2, [pc, #44]	@ (80007e0 <main+0x110>)
 80007b4:	4907      	ldr	r1, [pc, #28]	@ (80007d4 <main+0x104>)
 80007b6:	4808      	ldr	r0, [pc, #32]	@ (80007d8 <main+0x108>)
 80007b8:	f7ff ff1e 	bl	80005f8 <ESUS_Publish>
	  t += dt;
 80007bc:	e7db      	b.n	8000776 <main+0xa6>
 80007be:	bf00      	nop
 80007c0:	9999999a 	.word	0x9999999a
 80007c4:	3fb99999 	.word	0x3fb99999
 80007c8:	54442d18 	.word	0x54442d18
 80007cc:	401921fb 	.word	0x401921fb
 80007d0:	24000118 	.word	0x24000118
 80007d4:	240000e8 	.word	0x240000e8
 80007d8:	24000048 	.word	0x24000048
 80007dc:	24000114 	.word	0x24000114
 80007e0:	2400010c 	.word	0x2400010c

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	@ 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ee:	224c      	movs	r2, #76	@ 0x4c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 fa28 	bl	8002c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2220      	movs	r2, #32
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f002 fa22 	bl	8002c48 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000804:	2002      	movs	r0, #2
 8000806:	f001 fab7 	bl	8001d78 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b23      	ldr	r3, [pc, #140]	@ (800089c <SystemClock_Config+0xb8>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000816:	4a21      	ldr	r2, [pc, #132]	@ (800089c <SystemClock_Config+0xb8>)
 8000818:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800081c:	6193      	str	r3, [r2, #24]
 800081e:	4b1f      	ldr	r3, [pc, #124]	@ (800089c <SystemClock_Config+0xb8>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800082a:	bf00      	nop
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <SystemClock_Config+0xb8>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000838:	d1f8      	bne.n	800082c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083a:	2302      	movs	r3, #2
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800083e:	2301      	movs	r3, #1
 8000840:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000842:	2340      	movs	r3, #64	@ 0x40
 8000844:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000846:	2300      	movs	r3, #0
 8000848:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084e:	4618      	mov	r0, r3
 8000850:	f001 facc 	bl	8001dec <HAL_RCC_OscConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800085a:	f000 f8d1 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	233f      	movs	r3, #63	@ 0x3f
 8000860:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2101      	movs	r1, #1
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fe8c 	bl	80025a0 <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800088e:	f000 f8b7 	bl	8000a00 <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3770      	adds	r7, #112	@ 0x70
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	58024800 	.word	0x58024800

080008a0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008a6:	463b      	mov	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008b2:	f000 fb3f 	bl	8000f34 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008b6:	2301      	movs	r3, #1
 80008b8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008c2:	231f      	movs	r3, #31
 80008c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008c6:	2387      	movs	r3, #135	@ 0x87
 80008c8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008ce:	2300      	movs	r3, #0
 80008d0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008d2:	2301      	movs	r3, #1
 80008d4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008d6:	2301      	movs	r3, #1
 80008d8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008e2:	463b      	mov	r3, r7
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fb5d 	bl	8000fa4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008ea:	2004      	movs	r0, #4
 80008ec:	f000 fb3a 	bl	8000f64 <HAL_MPU_Enable>

}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hcan.Instance = FDCAN1;
 80008fc:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_FDCAN1_Init+0x54>)
 80008fe:	4a14      	ldr	r2, [pc, #80]	@ (8000950 <MX_FDCAN1_Init+0x58>)
 8000900:	601a      	str	r2, [r3, #0]
  hcan.Init.Mode = FDCAN_MODE_NORMAL;
 8000902:	4b12      	ldr	r3, [pc, #72]	@ (800094c <MX_FDCAN1_Init+0x54>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  hcan.Init.AutoRetransmission = ENABLE;
 8000908:	4b10      	ldr	r3, [pc, #64]	@ (800094c <MX_FDCAN1_Init+0x54>)
 800090a:	2201      	movs	r2, #1
 800090c:	741a      	strb	r2, [r3, #16]
  hcan.Init.TransmitPause = DISABLE;
 800090e:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_FDCAN1_Init+0x54>)
 8000910:	2200      	movs	r2, #0
 8000912:	745a      	strb	r2, [r3, #17]
  hcan.Init.ProtocolException = ENABLE;
 8000914:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <MX_FDCAN1_Init+0x54>)
 8000916:	2201      	movs	r2, #1
 8000918:	749a      	strb	r2, [r3, #18]
  hcan.Init.NominalPrescaler = 5;
 800091a:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_FDCAN1_Init+0x54>)
 800091c:	2205      	movs	r2, #5
 800091e:	615a      	str	r2, [r3, #20]
  hcan.Init.DataPrescaler = 1;             // Unused in Classic CAN mode
 8000920:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <MX_FDCAN1_Init+0x54>)
 8000922:	2201      	movs	r2, #1
 8000924:	625a      	str	r2, [r3, #36]	@ 0x24
  hcan.Init.StdFiltersNbr = 1;
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_FDCAN1_Init+0x54>)
 8000928:	2201      	movs	r2, #1
 800092a:	639a      	str	r2, [r3, #56]	@ 0x38
  hcan.Init.ExtFiltersNbr = 0;
 800092c:	4b07      	ldr	r3, [pc, #28]	@ (800094c <MX_FDCAN1_Init+0x54>)
 800092e:	2200      	movs	r2, #0
 8000930:	63da      	str	r2, [r3, #60]	@ 0x3c
  hcan.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_FDCAN1_Init+0x54>)
 8000934:	2200      	movs	r2, #0
 8000936:	665a      	str	r2, [r3, #100]	@ 0x64

  if (HAL_FDCAN_Init(&hcan) != HAL_OK)
 8000938:	4804      	ldr	r0, [pc, #16]	@ (800094c <MX_FDCAN1_Init+0x54>)
 800093a:	f000 fb73 	bl	8001024 <HAL_FDCAN_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_FDCAN1_Init+0x50>
  {
    Error_Handler();
 8000944:	f000 f85c 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	24000048 	.word	0x24000048
 8000950:	4000a000 	.word	0x4000a000

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	4b23      	ldr	r3, [pc, #140]	@ (80009f8 <MX_GPIO_Init+0xa4>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000970:	4a21      	ldr	r2, [pc, #132]	@ (80009f8 <MX_GPIO_Init+0xa4>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097a:	4b1f      	ldr	r3, [pc, #124]	@ (80009f8 <MX_GPIO_Init+0xa4>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000988:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <MX_GPIO_Init+0xa4>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098e:	4a1a      	ldr	r2, [pc, #104]	@ (80009f8 <MX_GPIO_Init+0xa4>)
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000998:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <MX_GPIO_Init+0xa4>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <MX_GPIO_Init+0xa4>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ac:	4a12      	ldr	r2, [pc, #72]	@ (80009f8 <MX_GPIO_Init+0xa4>)
 80009ae:	f043 0302 	orr.w	r3, r3, #2
 80009b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b6:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <MX_GPIO_Init+0xa4>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009bc:	f003 0302 	and.w	r3, r3, #2
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ca:	480c      	ldr	r0, [pc, #48]	@ (80009fc <MX_GPIO_Init+0xa8>)
 80009cc:	f001 f9ba 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4619      	mov	r1, r3
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <MX_GPIO_Init+0xa8>)
 80009ea:	f001 f803 	bl	80019f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ee:	bf00      	nop
 80009f0:	3720      	adds	r7, #32
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	58024400 	.word	0x58024400
 80009fc:	58020800 	.word	0x58020800

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <Error_Handler+0x8>

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <HAL_MspInit+0x30>)
 8000a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a18:	4a08      	ldr	r2, [pc, #32]	@ (8000a3c <HAL_MspInit+0x30>)
 8000a1a:	f043 0302 	orr.w	r3, r3, #2
 8000a1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_MspInit+0x30>)
 8000a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	58024400 	.word	0x58024400

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <NMI_Handler+0x4>

08000a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <MemManage_Handler+0x4>

08000a58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a96:	f000 f949 	bl	8000d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aa4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ba0 <SystemInit+0x100>)
 8000aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aaa:	4a3d      	ldr	r2, [pc, #244]	@ (8000ba0 <SystemInit+0x100>)
 8000aac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ba4 <SystemInit+0x104>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f003 030f 	and.w	r3, r3, #15
 8000abc:	2b06      	cmp	r3, #6
 8000abe:	d807      	bhi.n	8000ad0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ac0:	4b38      	ldr	r3, [pc, #224]	@ (8000ba4 <SystemInit+0x104>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f023 030f 	bic.w	r3, r3, #15
 8000ac8:	4a36      	ldr	r2, [pc, #216]	@ (8000ba4 <SystemInit+0x104>)
 8000aca:	f043 0307 	orr.w	r3, r3, #7
 8000ace:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ad0:	4b35      	ldr	r3, [pc, #212]	@ (8000ba8 <SystemInit+0x108>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a34      	ldr	r2, [pc, #208]	@ (8000ba8 <SystemInit+0x108>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000adc:	4b32      	ldr	r3, [pc, #200]	@ (8000ba8 <SystemInit+0x108>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ae2:	4b31      	ldr	r3, [pc, #196]	@ (8000ba8 <SystemInit+0x108>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	4930      	ldr	r1, [pc, #192]	@ (8000ba8 <SystemInit+0x108>)
 8000ae8:	4b30      	ldr	r3, [pc, #192]	@ (8000bac <SystemInit+0x10c>)
 8000aea:	4013      	ands	r3, r2
 8000aec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aee:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba4 <SystemInit+0x104>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d007      	beq.n	8000b0a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000afa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba4 <SystemInit+0x104>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f023 030f 	bic.w	r3, r3, #15
 8000b02:	4a28      	ldr	r2, [pc, #160]	@ (8000ba4 <SystemInit+0x104>)
 8000b04:	f043 0307 	orr.w	r3, r3, #7
 8000b08:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ba8 <SystemInit+0x108>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b10:	4b25      	ldr	r3, [pc, #148]	@ (8000ba8 <SystemInit+0x108>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b16:	4b24      	ldr	r3, [pc, #144]	@ (8000ba8 <SystemInit+0x108>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ba8 <SystemInit+0x108>)
 8000b1e:	4a24      	ldr	r2, [pc, #144]	@ (8000bb0 <SystemInit+0x110>)
 8000b20:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b22:	4b21      	ldr	r3, [pc, #132]	@ (8000ba8 <SystemInit+0x108>)
 8000b24:	4a23      	ldr	r2, [pc, #140]	@ (8000bb4 <SystemInit+0x114>)
 8000b26:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <SystemInit+0x108>)
 8000b2a:	4a23      	ldr	r2, [pc, #140]	@ (8000bb8 <SystemInit+0x118>)
 8000b2c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba8 <SystemInit+0x108>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <SystemInit+0x108>)
 8000b36:	4a20      	ldr	r2, [pc, #128]	@ (8000bb8 <SystemInit+0x118>)
 8000b38:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <SystemInit+0x108>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b40:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <SystemInit+0x108>)
 8000b42:	4a1d      	ldr	r2, [pc, #116]	@ (8000bb8 <SystemInit+0x118>)
 8000b44:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b46:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <SystemInit+0x108>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <SystemInit+0x108>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a15      	ldr	r2, [pc, #84]	@ (8000ba8 <SystemInit+0x108>)
 8000b52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b58:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <SystemInit+0x108>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <SystemInit+0x108>)
 8000b60:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d113      	bne.n	8000b94 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <SystemInit+0x108>)
 8000b6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b72:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <SystemInit+0x108>)
 8000b74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b78:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <SystemInit+0x11c>)
 8000b7e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b82:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <SystemInit+0x108>)
 8000b86:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b8a:	4a07      	ldr	r2, [pc, #28]	@ (8000ba8 <SystemInit+0x108>)
 8000b8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b90:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00
 8000ba4:	52002000 	.word	0x52002000
 8000ba8:	58024400 	.word	0x58024400
 8000bac:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bb0:	02020200 	.word	0x02020200
 8000bb4:	01ff0000 	.word	0x01ff0000
 8000bb8:	01010280 	.word	0x01010280
 8000bbc:	52004000 	.word	0x52004000

08000bc0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <ExitRun0Mode+0x2c>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	4a08      	ldr	r2, [pc, #32]	@ (8000bec <ExitRun0Mode+0x2c>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000bd0:	bf00      	nop
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <ExitRun0Mode+0x2c>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d0f9      	beq.n	8000bd2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000bde:	bf00      	nop
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	58024800 	.word	0x58024800

08000bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bf0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000c2c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000bf4:	f7ff ffe4 	bl	8000bc0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bf8:	f7ff ff52 	bl	8000aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bfc:	480c      	ldr	r0, [pc, #48]	@ (8000c30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bfe:	490d      	ldr	r1, [pc, #52]	@ (8000c34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c00:	4a0d      	ldr	r2, [pc, #52]	@ (8000c38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c14:	4c0a      	ldr	r4, [pc, #40]	@ (8000c40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c22:	f002 f819 	bl	8002c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c26:	f7ff fd53 	bl	80006d0 <main>
  bx  lr
 8000c2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c2c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000c30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c34:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c38:	08002d48 	.word	0x08002d48
  ldr r2, =_sbss
 8000c3c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c40:	2400013c 	.word	0x2400013c

08000c44 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC3_IRQHandler>
	...

08000c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4e:	2003      	movs	r0, #3
 8000c50:	f000 f93e 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c54:	f001 fe5a 	bl	800290c <HAL_RCC_GetSysClockFreq>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <HAL_Init+0x68>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	0a1b      	lsrs	r3, r3, #8
 8000c60:	f003 030f 	and.w	r3, r3, #15
 8000c64:	4913      	ldr	r1, [pc, #76]	@ (8000cb4 <HAL_Init+0x6c>)
 8000c66:	5ccb      	ldrb	r3, [r1, r3]
 8000c68:	f003 031f 	and.w	r3, r3, #31
 8000c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c72:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <HAL_Init+0x68>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb4 <HAL_Init+0x6c>)
 8000c7c:	5cd3      	ldrb	r3, [r2, r3]
 8000c7e:	f003 031f 	and.w	r3, r3, #31
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	fa22 f303 	lsr.w	r3, r2, r3
 8000c88:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb8 <HAL_Init+0x70>)
 8000c8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000cbc <HAL_Init+0x74>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c92:	200f      	movs	r0, #15
 8000c94:	f000 f814 	bl	8000cc0 <HAL_InitTick>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e002      	b.n	8000ca8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca2:	f7ff feb3 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	58024400 	.word	0x58024400
 8000cb4:	08002d20 	.word	0x08002d20
 8000cb8:	24000004 	.word	0x24000004
 8000cbc:	24000000 	.word	0x24000000

08000cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cc8:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_InitTick+0x60>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d101      	bne.n	8000cd4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e021      	b.n	8000d18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <HAL_InitTick+0x64>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <HAL_InitTick+0x60>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f915 	bl	8000f1a <HAL_SYSTICK_Config>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00e      	b.n	8000d18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d80a      	bhi.n	8000d16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d08:	f000 f8ed 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d0c:	4a06      	ldr	r2, [pc, #24]	@ (8000d28 <HAL_InitTick+0x68>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e000      	b.n	8000d18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2400000c 	.word	0x2400000c
 8000d24:	24000000 	.word	0x24000000
 8000d28:	24000008 	.word	0x24000008

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	@ (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	2400000c 	.word	0x2400000c
 8000d50:	24000138 	.word	0x24000138

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	@ (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	24000138 	.word	0x24000138

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <__NVIC_SetPriorityGrouping+0x40>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	4313      	orrs	r3, r2
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	@ (8000dac <__NVIC_SetPriorityGrouping+0x40>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00
 8000db0:	05fa0000 	.word	0x05fa0000

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	@ (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	@ (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	@ 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	@ 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000eb0:	f7ff ff8e 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff47 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef4:	f7ff ff5e 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000ef8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	6978      	ldr	r0, [r7, #20]
 8000f00:	f7ff ff90 	bl	8000e24 <NVIC_EncodePriority>
 8000f04:	4602      	mov	r2, r0
 8000f06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff5f 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ffb2 	bl	8000e8c <SysTick_Config>
 8000f28:	4603      	mov	r3, r0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f38:	f3bf 8f5f 	dmb	sy
}
 8000f3c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <HAL_MPU_Disable+0x28>)
 8000f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f42:	4a06      	ldr	r2, [pc, #24]	@ (8000f5c <HAL_MPU_Disable+0x28>)
 8000f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f48:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f4a:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <HAL_MPU_Disable+0x2c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00
 8000f60:	e000ed90 	.word	0xe000ed90

08000f64 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f9c <HAL_MPU_Enable+0x38>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_MPU_Enable+0x3c>)
 8000f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7a:	4a09      	ldr	r2, [pc, #36]	@ (8000fa0 <HAL_MPU_Enable+0x3c>)
 8000f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f80:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed90 	.word	0xe000ed90
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	785a      	ldrb	r2, [r3, #1]
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <HAL_MPU_ConfigRegion+0x7c>)
 8000fb2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <HAL_MPU_ConfigRegion+0x7c>)
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	4a19      	ldr	r2, [pc, #100]	@ (8001020 <HAL_MPU_ConfigRegion+0x7c>)
 8000fba:	f023 0301 	bic.w	r3, r3, #1
 8000fbe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000fc0:	4a17      	ldr	r2, [pc, #92]	@ (8001020 <HAL_MPU_ConfigRegion+0x7c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7b1b      	ldrb	r3, [r3, #12]
 8000fcc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7adb      	ldrb	r3, [r3, #11]
 8000fd2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7a9b      	ldrb	r3, [r3, #10]
 8000fda:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fdc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7b5b      	ldrb	r3, [r3, #13]
 8000fe2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fe4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7b9b      	ldrb	r3, [r3, #14]
 8000fea:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7bdb      	ldrb	r3, [r3, #15]
 8000ff2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ff4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	7a5b      	ldrb	r3, [r3, #9]
 8000ffa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000ffc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7a1b      	ldrb	r3, [r3, #8]
 8001002:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001004:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	7812      	ldrb	r2, [r2, #0]
 800100a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800100c:	4a04      	ldr	r2, [pc, #16]	@ (8001020 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800100e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001010:	6113      	str	r3, [r2, #16]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed90 	.word	0xe000ed90

08001024 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b098      	sub	sp, #96	@ 0x60
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800102c:	4a84      	ldr	r2, [pc, #528]	@ (8001240 <HAL_FDCAN_Init+0x21c>)
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4611      	mov	r1, r2
 8001034:	224c      	movs	r2, #76	@ 0x4c
 8001036:	4618      	mov	r0, r3
 8001038:	f001 fe32 	bl	8002ca0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e1c6      	b.n	80013d4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check function parameters */
  assert_param(IS_FDCAN_ALL_INSTANCE(hfdcan->Instance));
  if (hfdcan->Instance == FDCAN1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a7e      	ldr	r2, [pc, #504]	@ (8001244 <HAL_FDCAN_Init+0x220>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d106      	bne.n	800105e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001058:	461a      	mov	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d106      	bne.n	8001078 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f9b4 	bl	80013e0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	699a      	ldr	r2, [r3, #24]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0210 	bic.w	r2, r2, #16
 8001086:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001088:	f7ff fe64 	bl	8000d54 <HAL_GetTick>
 800108c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800108e:	e014      	b.n	80010ba <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001090:	f7ff fe60 	bl	8000d54 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b0a      	cmp	r3, #10
 800109c:	d90d      	bls.n	80010ba <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010a4:	f043 0201 	orr.w	r2, r3, #1
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2203      	movs	r2, #3
 80010b2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e18c      	b.n	80013d4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d0e3      	beq.n	8001090 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	699a      	ldr	r2, [r3, #24]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010d8:	f7ff fe3c 	bl	8000d54 <HAL_GetTick>
 80010dc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80010de:	e014      	b.n	800110a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010e0:	f7ff fe38 	bl	8000d54 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b0a      	cmp	r3, #10
 80010ec:	d90d      	bls.n	800110a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010f4:	f043 0201 	orr.w	r2, r3, #1
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2203      	movs	r2, #3
 8001102:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e164      	b.n	80013d4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0e3      	beq.n	80010e0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	699a      	ldr	r2, [r3, #24]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0202 	orr.w	r2, r2, #2
 8001126:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7c1b      	ldrb	r3, [r3, #16]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d108      	bne.n	8001142 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	699a      	ldr	r2, [r3, #24]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800113e:	619a      	str	r2, [r3, #24]
 8001140:	e007      	b.n	8001152 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	699a      	ldr	r2, [r3, #24]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001150:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7c5b      	ldrb	r3, [r3, #17]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d108      	bne.n	800116c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	699a      	ldr	r2, [r3, #24]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001168:	619a      	str	r2, [r3, #24]
 800116a:	e007      	b.n	800117c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	699a      	ldr	r2, [r3, #24]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800117a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7c9b      	ldrb	r3, [r3, #18]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d108      	bne.n	8001196 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	699a      	ldr	r2, [r3, #24]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	e007      	b.n	80011a6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	699a      	ldr	r2, [r3, #24]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80011a4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	699a      	ldr	r2, [r3, #24]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80011ca:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	691a      	ldr	r2, [r3, #16]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0210 	bic.w	r2, r2, #16
 80011da:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d108      	bne.n	80011f6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	699a      	ldr	r2, [r3, #24]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0204 	orr.w	r2, r2, #4
 80011f2:	619a      	str	r2, [r3, #24]
 80011f4:	e030      	b.n	8001258 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d02c      	beq.n	8001258 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	2b02      	cmp	r3, #2
 8001204:	d020      	beq.n	8001248 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	699a      	ldr	r2, [r3, #24]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001214:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0210 	orr.w	r2, r2, #16
 8001224:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	2b03      	cmp	r3, #3
 800122c:	d114      	bne.n	8001258 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	699a      	ldr	r2, [r3, #24]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f042 0220 	orr.w	r2, r2, #32
 800123c:	619a      	str	r2, [r3, #24]
 800123e:	e00b      	b.n	8001258 <HAL_FDCAN_Init+0x234>
 8001240:	08002cd4 	.word	0x08002cd4
 8001244:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	699a      	ldr	r2, [r3, #24]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0220 	orr.w	r2, r2, #32
 8001256:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	3b01      	subs	r3, #1
 800125e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	3b01      	subs	r3, #1
 8001266:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001268:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001270:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	3b01      	subs	r3, #1
 800127a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001280:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001282:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800128c:	d115      	bne.n	80012ba <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001292:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001298:	3b01      	subs	r3, #1
 800129a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800129c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	3b01      	subs	r3, #1
 80012a4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012a6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ae:	3b01      	subs	r3, #1
 80012b0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012b6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012b8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00a      	beq.n	80012d8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e0:	4413      	add	r3, r2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d011      	beq.n	800130a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80012ee:	f023 0107 	bic.w	r1, r3, #7
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	3360      	adds	r3, #96	@ 0x60
 80012fa:	443b      	add	r3, r7
 80012fc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	2b00      	cmp	r3, #0
 8001310:	d011      	beq.n	8001336 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800131a:	f023 0107 	bic.w	r1, r3, #7
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	3360      	adds	r3, #96	@ 0x60
 8001326:	443b      	add	r3, r7
 8001328:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800133a:	2b00      	cmp	r3, #0
 800133c:	d012      	beq.n	8001364 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001346:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	3360      	adds	r3, #96	@ 0x60
 8001352:	443b      	add	r3, r7
 8001354:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001358:	011a      	lsls	r2, r3, #4
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001368:	2b00      	cmp	r3, #0
 800136a:	d012      	beq.n	8001392 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001374:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	3360      	adds	r3, #96	@ 0x60
 8001380:	443b      	add	r3, r7
 8001382:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001386:	021a      	lsls	r2, r3, #8
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a11      	ldr	r2, [pc, #68]	@ (80013dc <HAL_FDCAN_Init+0x3b8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d107      	bne.n	80013ac <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f022 0203 	bic.w	r2, r2, #3
 80013aa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalculateRamBlockAddresses(hfdcan);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f911 	bl	80015ec <FDCAN_CalculateRamBlockAddresses>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80013d0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3760      	adds	r7, #96	@ 0x60
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	4000a000 	.word	0x4000a000

080013e0 <HAL_FDCAN_MspInit>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef *hfdcan)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hfdcan);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_MspInit could be implemented in the user file
   */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001404:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d002      	beq.n	8001412 <HAL_FDCAN_ConfigFilter+0x1e>
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d157      	bne.n	80014c2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, (SRAMCAN_RB_NBR - 1U)));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d12b      	bne.n	8001472 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b07      	cmp	r3, #7
 8001420:	d10d      	bne.n	800143e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800142e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001434:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8001436:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e00e      	b.n	800145c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800144a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001452:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001458:	4313      	orrs	r3, r2
 800145a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	e025      	b.n	80014be <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	075a      	lsls	r2, r3, #29
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b07      	cmp	r3, #7
 8001486:	d103      	bne.n	8001490 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	e006      	b.n	800149e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	079a      	lsls	r2, r3, #30
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	3304      	adds	r3, #4
 80014b6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	e008      	b.n	80014d4 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014c8:	f043 0202 	orr.w	r2, r3, #2
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
  }
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	371c      	adds	r7, #28
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d111      	bne.n	8001518 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2202      	movs	r2, #2
 80014f8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	699a      	ldr	r2, [r3, #24]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0201 	bic.w	r2, r2, #1
 800150a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	e008      	b.n	800152a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800151e:	f043 0204 	orr.w	r2, r3, #4
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
  }
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d141      	bne.n	80015d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001556:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d109      	bne.n	8001572 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001564:	f043 0220 	orr.w	r2, r3, #32
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e038      	b.n	80015e4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800157a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d009      	beq.n	8001596 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001588:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e026      	b.n	80015e4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800159e:	0c1b      	lsrs	r3, r3, #16
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	68b9      	ldr	r1, [r7, #8]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 f9a3 	bl	80018f8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2101      	movs	r1, #1
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	fa01 f202 	lsl.w	r2, r1, r2
 80015be:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80015c2:	2201      	movs	r2, #1
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	409a      	lsls	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e008      	b.n	80015e4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015d8:	f043 0208 	orr.w	r2, r3, #8
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
  }
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <FDCAN_CalculateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalculateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015f8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001602:	4ba7      	ldr	r3, [pc, #668]	@ (80018a0 <FDCAN_CalculateRamBlockAddresses+0x2b4>)
 8001604:	4013      	ands	r3, r2
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	0091      	lsls	r1, r2, #2
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	430b      	orrs	r3, r1
 8001610:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800161c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001624:	041a      	lsls	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	4413      	add	r3, r2
 8001638:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001642:	4b97      	ldr	r3, [pc, #604]	@ (80018a0 <FDCAN_CalculateRamBlockAddresses+0x2b4>)
 8001644:	4013      	ands	r3, r2
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	0091      	lsls	r1, r2, #2
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6812      	ldr	r2, [r2, #0]
 800164e:	430b      	orrs	r3, r1
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800165c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001664:	041a      	lsls	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	4413      	add	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001684:	4b86      	ldr	r3, [pc, #536]	@ (80018a0 <FDCAN_CalculateRamBlockAddresses+0x2b4>)
 8001686:	4013      	ands	r3, r2
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	0091      	lsls	r1, r2, #2
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	430b      	orrs	r3, r1
 8001692:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800169e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	041a      	lsls	r2, r3, #16
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	4413      	add	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80016cc:	4b74      	ldr	r3, [pc, #464]	@ (80018a0 <FDCAN_CalculateRamBlockAddresses+0x2b4>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	0091      	lsls	r1, r2, #2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	430b      	orrs	r3, r1
 80016da:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80016e6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ee:	041a      	lsls	r2, r3, #16
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001702:	fb02 f303 	mul.w	r3, r2, r3
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	4413      	add	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8001714:	4b62      	ldr	r3, [pc, #392]	@ (80018a0 <FDCAN_CalculateRamBlockAddresses+0x2b4>)
 8001716:	4013      	ands	r3, r2
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	0091      	lsls	r1, r2, #2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	430b      	orrs	r3, r1
 8001722:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	4413      	add	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001740:	4b57      	ldr	r3, [pc, #348]	@ (80018a0 <FDCAN_CalculateRamBlockAddresses+0x2b4>)
 8001742:	4013      	ands	r3, r2
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	0091      	lsls	r1, r2, #2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	430b      	orrs	r3, r1
 800174e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800175a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001762:	041a      	lsls	r2, r3, #16
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	4413      	add	r3, r2
 8001778:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001782:	4b47      	ldr	r3, [pc, #284]	@ (80018a0 <FDCAN_CalculateRamBlockAddresses+0x2b4>)
 8001784:	4013      	ands	r3, r2
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	0091      	lsls	r1, r2, #2
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	430b      	orrs	r3, r1
 8001790:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800179c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a4:	041a      	lsls	r2, r3, #16
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80017b8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c0:	061a      	lsls	r2, r3, #24
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017d0:	4b34      	ldr	r3, [pc, #208]	@ (80018a4 <FDCAN_CalculateRamBlockAddresses+0x2b8>)
 80017d2:	4413      	add	r3, r2
 80017d4:	009a      	lsls	r2, r3, #2
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	441a      	add	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	441a      	add	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800180c:	441a      	add	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001824:	441a      	add	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800183c:	441a      	add	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	441a      	add	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001866:	fb01 f303 	mul.w	r3, r1, r3
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	441a      	add	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001882:	fb01 f303 	mul.w	r3, r1, r3
 8001886:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001888:	441a      	add	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001896:	4a04      	ldr	r2, [pc, #16]	@ (80018a8 <FDCAN_CalculateRamBlockAddresses+0x2bc>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d915      	bls.n	80018c8 <FDCAN_CalculateRamBlockAddresses+0x2dc>
 800189c:	e006      	b.n	80018ac <FDCAN_CalculateRamBlockAddresses+0x2c0>
 800189e:	bf00      	nop
 80018a0:	ffff0003 	.word	0xffff0003
 80018a4:	10002b00 	.word	0x10002b00
 80018a8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018b2:	f043 0220 	orr.w	r2, r3, #32
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2203      	movs	r2, #3
 80018c0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e010      	b.n	80018ea <FDCAN_CalculateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	e005      	b.n	80018dc <FDCAN_CalculateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3304      	adds	r3, #4
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d3f3      	bcc.n	80018d0 <FDCAN_CalculateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	@ 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10a      	bne.n	8001924 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001916:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800191e:	4313      	orrs	r3, r2
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	e00a      	b.n	800193a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800192c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001932:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001934:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001938:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001944:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800194a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001950:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001966:	6839      	ldr	r1, [r7, #0]
 8001968:	fb01 f303 	mul.w	r3, r1, r3
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	69fa      	ldr	r2, [r7, #28]
 8001976:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	3304      	adds	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	3304      	adds	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	e020      	b.n	80019d2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3303      	adds	r3, #3
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	4413      	add	r3, r2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3302      	adds	r3, #2
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	440b      	add	r3, r1
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80019a8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3301      	adds	r3, #1
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	440b      	add	r3, r1
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80019b6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	440a      	add	r2, r1
 80019be:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80019c0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	3304      	adds	r3, #4
 80019ca:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3304      	adds	r3, #4
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	4a06      	ldr	r2, [pc, #24]	@ (80019f0 <FDCAN_CopyMessageToRAM+0xf8>)
 80019d8:	5cd3      	ldrb	r3, [r2, r3]
 80019da:	461a      	mov	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	4293      	cmp	r3, r2
 80019e0:	d3d6      	bcc.n	8001990 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	3724      	adds	r7, #36	@ 0x24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	08002d30 	.word	0x08002d30

080019f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	@ 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a02:	4b86      	ldr	r3, [pc, #536]	@ (8001c1c <HAL_GPIO_Init+0x228>)
 8001a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a06:	e18c      	b.n	8001d22 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 817e 	beq.w	8001d1c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d005      	beq.n	8001a38 <HAL_GPIO_Init+0x44>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d130      	bne.n	8001a9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a6e:	2201      	movs	r2, #1
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	f003 0201 	and.w	r2, r3, #1
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d017      	beq.n	8001ad6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d123      	bne.n	8001b2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	08da      	lsrs	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3208      	adds	r2, #8
 8001aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	220f      	movs	r2, #15
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	08da      	lsrs	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3208      	adds	r2, #8
 8001b24:	69b9      	ldr	r1, [r7, #24]
 8001b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2203      	movs	r2, #3
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0203 	and.w	r2, r3, #3
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 80d8 	beq.w	8001d1c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c20 <HAL_GPIO_Init+0x22c>)
 8001b6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b72:	4a2b      	ldr	r2, [pc, #172]	@ (8001c20 <HAL_GPIO_Init+0x22c>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b7c:	4b28      	ldr	r3, [pc, #160]	@ (8001c20 <HAL_GPIO_Init+0x22c>)
 8001b7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b8a:	4a26      	ldr	r2, [pc, #152]	@ (8001c24 <HAL_GPIO_Init+0x230>)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c28 <HAL_GPIO_Init+0x234>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d04a      	beq.n	8001c4c <HAL_GPIO_Init+0x258>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8001c2c <HAL_GPIO_Init+0x238>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d02b      	beq.n	8001c16 <HAL_GPIO_Init+0x222>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c30 <HAL_GPIO_Init+0x23c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d025      	beq.n	8001c12 <HAL_GPIO_Init+0x21e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c34 <HAL_GPIO_Init+0x240>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d01f      	beq.n	8001c0e <HAL_GPIO_Init+0x21a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a19      	ldr	r2, [pc, #100]	@ (8001c38 <HAL_GPIO_Init+0x244>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d019      	beq.n	8001c0a <HAL_GPIO_Init+0x216>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a18      	ldr	r2, [pc, #96]	@ (8001c3c <HAL_GPIO_Init+0x248>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d013      	beq.n	8001c06 <HAL_GPIO_Init+0x212>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a17      	ldr	r2, [pc, #92]	@ (8001c40 <HAL_GPIO_Init+0x24c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d00d      	beq.n	8001c02 <HAL_GPIO_Init+0x20e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a16      	ldr	r2, [pc, #88]	@ (8001c44 <HAL_GPIO_Init+0x250>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d007      	beq.n	8001bfe <HAL_GPIO_Init+0x20a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a15      	ldr	r2, [pc, #84]	@ (8001c48 <HAL_GPIO_Init+0x254>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d101      	bne.n	8001bfa <HAL_GPIO_Init+0x206>
 8001bf6:	2309      	movs	r3, #9
 8001bf8:	e029      	b.n	8001c4e <HAL_GPIO_Init+0x25a>
 8001bfa:	230a      	movs	r3, #10
 8001bfc:	e027      	b.n	8001c4e <HAL_GPIO_Init+0x25a>
 8001bfe:	2307      	movs	r3, #7
 8001c00:	e025      	b.n	8001c4e <HAL_GPIO_Init+0x25a>
 8001c02:	2306      	movs	r3, #6
 8001c04:	e023      	b.n	8001c4e <HAL_GPIO_Init+0x25a>
 8001c06:	2305      	movs	r3, #5
 8001c08:	e021      	b.n	8001c4e <HAL_GPIO_Init+0x25a>
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	e01f      	b.n	8001c4e <HAL_GPIO_Init+0x25a>
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e01d      	b.n	8001c4e <HAL_GPIO_Init+0x25a>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e01b      	b.n	8001c4e <HAL_GPIO_Init+0x25a>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e019      	b.n	8001c4e <HAL_GPIO_Init+0x25a>
 8001c1a:	bf00      	nop
 8001c1c:	58000080 	.word	0x58000080
 8001c20:	58024400 	.word	0x58024400
 8001c24:	58000400 	.word	0x58000400
 8001c28:	58020000 	.word	0x58020000
 8001c2c:	58020400 	.word	0x58020400
 8001c30:	58020800 	.word	0x58020800
 8001c34:	58020c00 	.word	0x58020c00
 8001c38:	58021000 	.word	0x58021000
 8001c3c:	58021400 	.word	0x58021400
 8001c40:	58021800 	.word	0x58021800
 8001c44:	58021c00 	.word	0x58021c00
 8001c48:	58022400 	.word	0x58022400
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	f002 0203 	and.w	r2, r2, #3
 8001c54:	0092      	lsls	r2, r2, #2
 8001c56:	4093      	lsls	r3, r2
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c5e:	4938      	ldr	r1, [pc, #224]	@ (8001d40 <HAL_GPIO_Init+0x34c>)
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	3302      	adds	r3, #2
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001cc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f47f ae6b 	bne.w	8001a08 <HAL_GPIO_Init+0x14>
  }
}
 8001d32:	bf00      	nop
 8001d34:	bf00      	nop
 8001d36:	3724      	adds	r7, #36	@ 0x24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	58000400 	.word	0x58000400

08001d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	807b      	strh	r3, [r7, #2]
 8001d50:	4613      	mov	r3, r2
 8001d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d54:	787b      	ldrb	r3, [r7, #1]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d60:	e003      	b.n	8001d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d62:	887b      	ldrh	r3, [r7, #2]
 8001d64:	041a      	lsls	r2, r3, #16
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	619a      	str	r2, [r3, #24]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001d80:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <HAL_PWREx_ConfigSupply+0x70>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d00a      	beq.n	8001da2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d8c:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <HAL_PWREx_ConfigSupply+0x70>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d001      	beq.n	8001d9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e01f      	b.n	8001dde <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e01d      	b.n	8001dde <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <HAL_PWREx_ConfigSupply+0x70>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f023 0207 	bic.w	r2, r3, #7
 8001daa:	490f      	ldr	r1, [pc, #60]	@ (8001de8 <HAL_PWREx_ConfigSupply+0x70>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001db2:	f7fe ffcf 	bl	8000d54 <HAL_GetTick>
 8001db6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001db8:	e009      	b.n	8001dce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001dba:	f7fe ffcb 	bl	8000d54 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dc8:	d901      	bls.n	8001dce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e007      	b.n	8001dde <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <HAL_PWREx_ConfigSupply+0x70>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dda:	d1ee      	bne.n	8001dba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	58024800 	.word	0x58024800

08001dec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08c      	sub	sp, #48	@ 0x30
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e3c8      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8087 	beq.w	8001f1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e0c:	4b88      	ldr	r3, [pc, #544]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e16:	4b86      	ldr	r3, [pc, #536]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e1e:	2b10      	cmp	r3, #16
 8001e20:	d007      	beq.n	8001e32 <HAL_RCC_OscConfig+0x46>
 8001e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e24:	2b18      	cmp	r3, #24
 8001e26:	d110      	bne.n	8001e4a <HAL_RCC_OscConfig+0x5e>
 8001e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d10b      	bne.n	8001e4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e32:	4b7f      	ldr	r3, [pc, #508]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d06c      	beq.n	8001f18 <HAL_RCC_OscConfig+0x12c>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d168      	bne.n	8001f18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e3a2      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e52:	d106      	bne.n	8001e62 <HAL_RCC_OscConfig+0x76>
 8001e54:	4b76      	ldr	r3, [pc, #472]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a75      	ldr	r2, [pc, #468]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001e5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	e02e      	b.n	8001ec0 <HAL_RCC_OscConfig+0xd4>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10c      	bne.n	8001e84 <HAL_RCC_OscConfig+0x98>
 8001e6a:	4b71      	ldr	r3, [pc, #452]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a70      	ldr	r2, [pc, #448]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	4b6e      	ldr	r3, [pc, #440]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a6d      	ldr	r2, [pc, #436]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001e7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e01d      	b.n	8001ec0 <HAL_RCC_OscConfig+0xd4>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0xbc>
 8001e8e:	4b68      	ldr	r3, [pc, #416]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a67      	ldr	r2, [pc, #412]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b65      	ldr	r3, [pc, #404]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a64      	ldr	r2, [pc, #400]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0xd4>
 8001ea8:	4b61      	ldr	r3, [pc, #388]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a60      	ldr	r2, [pc, #384]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b5e      	ldr	r3, [pc, #376]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a5d      	ldr	r2, [pc, #372]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7fe ff44 	bl	8000d54 <HAL_GetTick>
 8001ecc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7fe ff40 	bl	8000d54 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	@ 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e356      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ee2:	4b53      	ldr	r3, [pc, #332]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xe4>
 8001eee:	e014      	b.n	8001f1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7fe ff30 	bl	8000d54 <HAL_GetTick>
 8001ef4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7fe ff2c 	bl	8000d54 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	@ 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e342      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f0a:	4b49      	ldr	r3, [pc, #292]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x10c>
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 808c 	beq.w	8002040 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f28:	4b41      	ldr	r3, [pc, #260]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f30:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f32:	4b3f      	ldr	r3, [pc, #252]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f36:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <HAL_RCC_OscConfig+0x162>
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	2b18      	cmp	r3, #24
 8001f42:	d137      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x1c8>
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d132      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f4e:	4b38      	ldr	r3, [pc, #224]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_RCC_OscConfig+0x17a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e314      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f66:	4b32      	ldr	r3, [pc, #200]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 0219 	bic.w	r2, r3, #25
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	492f      	ldr	r1, [pc, #188]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7fe feec 	bl	8000d54 <HAL_GetTick>
 8001f7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f80:	f7fe fee8 	bl	8000d54 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e2fe      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f92:	4b27      	ldr	r3, [pc, #156]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9e:	4b24      	ldr	r3, [pc, #144]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	061b      	lsls	r3, r3, #24
 8001fac:	4920      	ldr	r1, [pc, #128]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fb2:	e045      	b.n	8002040 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d026      	beq.n	800200a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 0219 	bic.w	r2, r3, #25
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4919      	ldr	r1, [pc, #100]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fce:	f7fe fec1 	bl	8000d54 <HAL_GetTick>
 8001fd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd6:	f7fe febd 	bl	8000d54 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e2d3      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fe8:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	061b      	lsls	r3, r3, #24
 8002002:	490b      	ldr	r1, [pc, #44]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
 8002008:	e01a      	b.n	8002040 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200a:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a08      	ldr	r2, [pc, #32]	@ (8002030 <HAL_RCC_OscConfig+0x244>)
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002016:	f7fe fe9d 	bl	8000d54 <HAL_GetTick>
 800201a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201e:	f7fe fe99 	bl	8000d54 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d903      	bls.n	8002034 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e2af      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
 8002030:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002034:	4b96      	ldr	r3, [pc, #600]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1ee      	bne.n	800201e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	d06a      	beq.n	8002122 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800204c:	4b90      	ldr	r3, [pc, #576]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002054:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002056:	4b8e      	ldr	r3, [pc, #568]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 8002058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2b08      	cmp	r3, #8
 8002060:	d007      	beq.n	8002072 <HAL_RCC_OscConfig+0x286>
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b18      	cmp	r3, #24
 8002066:	d11b      	bne.n	80020a0 <HAL_RCC_OscConfig+0x2b4>
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d116      	bne.n	80020a0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002072:	4b87      	ldr	r3, [pc, #540]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_RCC_OscConfig+0x29e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	2b80      	cmp	r3, #128	@ 0x80
 8002084:	d001      	beq.n	800208a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e282      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800208a:	4b81      	ldr	r3, [pc, #516]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	061b      	lsls	r3, r3, #24
 8002098:	497d      	ldr	r1, [pc, #500]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 800209a:	4313      	orrs	r3, r2
 800209c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800209e:	e040      	b.n	8002122 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d023      	beq.n	80020f0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80020a8:	4b79      	ldr	r3, [pc, #484]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a78      	ldr	r2, [pc, #480]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 80020ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7fe fe4e 	bl	8000d54 <HAL_GetTick>
 80020b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020bc:	f7fe fe4a 	bl	8000d54 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e260      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020ce:	4b70      	ldr	r3, [pc, #448]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020da:	4b6d      	ldr	r3, [pc, #436]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	061b      	lsls	r3, r3, #24
 80020e8:	4969      	ldr	r1, [pc, #420]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60cb      	str	r3, [r1, #12]
 80020ee:	e018      	b.n	8002122 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020f0:	4b67      	ldr	r3, [pc, #412]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a66      	ldr	r2, [pc, #408]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 80020f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7fe fe2a 	bl	8000d54 <HAL_GetTick>
 8002100:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002104:	f7fe fe26 	bl	8000d54 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e23c      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002116:	4b5e      	ldr	r3, [pc, #376]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d036      	beq.n	800219c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d019      	beq.n	800216a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002136:	4b56      	ldr	r3, [pc, #344]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 8002138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800213a:	4a55      	ldr	r2, [pc, #340]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002142:	f7fe fe07 	bl	8000d54 <HAL_GetTick>
 8002146:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214a:	f7fe fe03 	bl	8000d54 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e219      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800215c:	4b4c      	ldr	r3, [pc, #304]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 800215e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x35e>
 8002168:	e018      	b.n	800219c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800216a:	4b49      	ldr	r3, [pc, #292]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 800216c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800216e:	4a48      	ldr	r2, [pc, #288]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002176:	f7fe fded 	bl	8000d54 <HAL_GetTick>
 800217a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217e:	f7fe fde9 	bl	8000d54 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e1ff      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002190:	4b3f      	ldr	r3, [pc, #252]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 8002192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f0      	bne.n	800217e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d036      	beq.n	8002216 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d019      	beq.n	80021e4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021b0:	4b37      	ldr	r3, [pc, #220]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a36      	ldr	r2, [pc, #216]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 80021b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021bc:	f7fe fdca 	bl	8000d54 <HAL_GetTick>
 80021c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021c4:	f7fe fdc6 	bl	8000d54 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e1dc      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x3d8>
 80021e2:	e018      	b.n	8002216 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a29      	ldr	r2, [pc, #164]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 80021ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021f0:	f7fe fdb0 	bl	8000d54 <HAL_GetTick>
 80021f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021f8:	f7fe fdac 	bl	8000d54 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e1c2      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800220a:	4b21      	ldr	r3, [pc, #132]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8086 	beq.w	8002330 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002224:	4b1b      	ldr	r3, [pc, #108]	@ (8002294 <HAL_RCC_OscConfig+0x4a8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a1a      	ldr	r2, [pc, #104]	@ (8002294 <HAL_RCC_OscConfig+0x4a8>)
 800222a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002230:	f7fe fd90 	bl	8000d54 <HAL_GetTick>
 8002234:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002238:	f7fe fd8c 	bl	8000d54 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	@ 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1a2      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800224a:	4b12      	ldr	r3, [pc, #72]	@ (8002294 <HAL_RCC_OscConfig+0x4a8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d106      	bne.n	800226c <HAL_RCC_OscConfig+0x480>
 800225e:	4b0c      	ldr	r3, [pc, #48]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 8002260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002262:	4a0b      	ldr	r2, [pc, #44]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6713      	str	r3, [r2, #112]	@ 0x70
 800226a:	e032      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e6>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d111      	bne.n	8002298 <HAL_RCC_OscConfig+0x4ac>
 8002274:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002278:	4a05      	ldr	r2, [pc, #20]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002280:	4b03      	ldr	r3, [pc, #12]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002284:	4a02      	ldr	r2, [pc, #8]	@ (8002290 <HAL_RCC_OscConfig+0x4a4>)
 8002286:	f023 0304 	bic.w	r3, r3, #4
 800228a:	6713      	str	r3, [r2, #112]	@ 0x70
 800228c:	e021      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e6>
 800228e:	bf00      	nop
 8002290:	58024400 	.word	0x58024400
 8002294:	58024800 	.word	0x58024800
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b05      	cmp	r3, #5
 800229e:	d10c      	bne.n	80022ba <HAL_RCC_OscConfig+0x4ce>
 80022a0:	4b83      	ldr	r3, [pc, #524]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 80022a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a4:	4a82      	ldr	r2, [pc, #520]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 80022a6:	f043 0304 	orr.w	r3, r3, #4
 80022aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ac:	4b80      	ldr	r3, [pc, #512]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 80022ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b0:	4a7f      	ldr	r2, [pc, #508]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022b8:	e00b      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e6>
 80022ba:	4b7d      	ldr	r3, [pc, #500]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022be:	4a7c      	ldr	r2, [pc, #496]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022c6:	4b7a      	ldr	r3, [pc, #488]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 80022c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ca:	4a79      	ldr	r2, [pc, #484]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 80022cc:	f023 0304 	bic.w	r3, r3, #4
 80022d0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d015      	beq.n	8002306 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022da:	f7fe fd3b 	bl	8000d54 <HAL_GetTick>
 80022de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e2:	f7fe fd37 	bl	8000d54 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e14b      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022f8:	4b6d      	ldr	r3, [pc, #436]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 80022fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0ee      	beq.n	80022e2 <HAL_RCC_OscConfig+0x4f6>
 8002304:	e014      	b.n	8002330 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002306:	f7fe fd25 	bl	8000d54 <HAL_GetTick>
 800230a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800230c:	e00a      	b.n	8002324 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7fe fd21 	bl	8000d54 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e135      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002324:	4b62      	ldr	r3, [pc, #392]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1ee      	bne.n	800230e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 812a 	beq.w	800258e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800233a:	4b5d      	ldr	r3, [pc, #372]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002342:	2b18      	cmp	r3, #24
 8002344:	f000 80ba 	beq.w	80024bc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	2b02      	cmp	r3, #2
 800234e:	f040 8095 	bne.w	800247c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002352:	4b57      	ldr	r3, [pc, #348]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a56      	ldr	r2, [pc, #344]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 8002358:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800235c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235e:	f7fe fcf9 	bl	8000d54 <HAL_GetTick>
 8002362:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002366:	f7fe fcf5 	bl	8000d54 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e10b      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002378:	4b4d      	ldr	r3, [pc, #308]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f0      	bne.n	8002366 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002384:	4b4a      	ldr	r3, [pc, #296]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 8002386:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002388:	4b4a      	ldr	r3, [pc, #296]	@ (80024b4 <HAL_RCC_OscConfig+0x6c8>)
 800238a:	4013      	ands	r3, r2
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	430a      	orrs	r2, r1
 8002398:	4945      	ldr	r1, [pc, #276]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 800239a:	4313      	orrs	r3, r2
 800239c:	628b      	str	r3, [r1, #40]	@ 0x28
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	3b01      	subs	r3, #1
 80023a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ac:	3b01      	subs	r3, #1
 80023ae:	025b      	lsls	r3, r3, #9
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b8:	3b01      	subs	r3, #1
 80023ba:	041b      	lsls	r3, r3, #16
 80023bc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c6:	3b01      	subs	r3, #1
 80023c8:	061b      	lsls	r3, r3, #24
 80023ca:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80023ce:	4938      	ldr	r1, [pc, #224]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80023d4:	4b36      	ldr	r3, [pc, #216]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 80023d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d8:	4a35      	ldr	r2, [pc, #212]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023e0:	4b33      	ldr	r3, [pc, #204]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 80023e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023e4:	4b34      	ldr	r3, [pc, #208]	@ (80024b8 <HAL_RCC_OscConfig+0x6cc>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023ec:	00d2      	lsls	r2, r2, #3
 80023ee:	4930      	ldr	r1, [pc, #192]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023f4:	4b2e      	ldr	r3, [pc, #184]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 80023f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f8:	f023 020c 	bic.w	r2, r3, #12
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	492b      	ldr	r1, [pc, #172]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 8002402:	4313      	orrs	r3, r2
 8002404:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002406:	4b2a      	ldr	r3, [pc, #168]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 8002408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240a:	f023 0202 	bic.w	r2, r3, #2
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002412:	4927      	ldr	r1, [pc, #156]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 8002414:	4313      	orrs	r3, r2
 8002416:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002418:	4b25      	ldr	r3, [pc, #148]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 800241a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241c:	4a24      	ldr	r2, [pc, #144]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 800241e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002424:	4b22      	ldr	r3, [pc, #136]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 8002426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002428:	4a21      	ldr	r2, [pc, #132]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 800242a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800242e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002430:	4b1f      	ldr	r3, [pc, #124]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 8002432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002434:	4a1e      	ldr	r2, [pc, #120]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 8002436:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800243a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800243c:	4b1c      	ldr	r3, [pc, #112]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 800243e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002440:	4a1b      	ldr	r2, [pc, #108]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002448:	4b19      	ldr	r3, [pc, #100]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a18      	ldr	r2, [pc, #96]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 800244e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe fc7e 	bl	8000d54 <HAL_GetTick>
 8002458:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245c:	f7fe fc7a 	bl	8000d54 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e090      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800246e:	4b10      	ldr	r3, [pc, #64]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x670>
 800247a:	e088      	b.n	800258e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247c:	4b0c      	ldr	r3, [pc, #48]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0b      	ldr	r2, [pc, #44]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 8002482:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7fe fc64 	bl	8000d54 <HAL_GetTick>
 800248c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002490:	f7fe fc60 	bl	8000d54 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e076      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024a2:	4b03      	ldr	r3, [pc, #12]	@ (80024b0 <HAL_RCC_OscConfig+0x6c4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x6a4>
 80024ae:	e06e      	b.n	800258e <HAL_RCC_OscConfig+0x7a2>
 80024b0:	58024400 	.word	0x58024400
 80024b4:	fffffc0c 	.word	0xfffffc0c
 80024b8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80024bc:	4b36      	ldr	r3, [pc, #216]	@ (8002598 <HAL_RCC_OscConfig+0x7ac>)
 80024be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024c2:	4b35      	ldr	r3, [pc, #212]	@ (8002598 <HAL_RCC_OscConfig+0x7ac>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d031      	beq.n	8002534 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f003 0203 	and.w	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d12a      	bne.n	8002534 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d122      	bne.n	8002534 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d11a      	bne.n	8002534 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	0a5b      	lsrs	r3, r3, #9
 8002502:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d111      	bne.n	8002534 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	0c1b      	lsrs	r3, r3, #16
 8002514:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d108      	bne.n	8002534 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	0e1b      	lsrs	r3, r3, #24
 8002526:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e02b      	b.n	8002590 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002538:	4b17      	ldr	r3, [pc, #92]	@ (8002598 <HAL_RCC_OscConfig+0x7ac>)
 800253a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800253c:	08db      	lsrs	r3, r3, #3
 800253e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002542:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	429a      	cmp	r2, r3
 800254c:	d01f      	beq.n	800258e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800254e:	4b12      	ldr	r3, [pc, #72]	@ (8002598 <HAL_RCC_OscConfig+0x7ac>)
 8002550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002552:	4a11      	ldr	r2, [pc, #68]	@ (8002598 <HAL_RCC_OscConfig+0x7ac>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800255a:	f7fe fbfb 	bl	8000d54 <HAL_GetTick>
 800255e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002560:	bf00      	nop
 8002562:	f7fe fbf7 	bl	8000d54 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	4293      	cmp	r3, r2
 800256c:	d0f9      	beq.n	8002562 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800256e:	4b0a      	ldr	r3, [pc, #40]	@ (8002598 <HAL_RCC_OscConfig+0x7ac>)
 8002570:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002572:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <HAL_RCC_OscConfig+0x7b0>)
 8002574:	4013      	ands	r3, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800257a:	00d2      	lsls	r2, r2, #3
 800257c:	4906      	ldr	r1, [pc, #24]	@ (8002598 <HAL_RCC_OscConfig+0x7ac>)
 800257e:	4313      	orrs	r3, r2
 8002580:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002582:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <HAL_RCC_OscConfig+0x7ac>)
 8002584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002586:	4a04      	ldr	r2, [pc, #16]	@ (8002598 <HAL_RCC_OscConfig+0x7ac>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3730      	adds	r7, #48	@ 0x30
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	58024400 	.word	0x58024400
 800259c:	ffff0007 	.word	0xffff0007

080025a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e19c      	b.n	80028ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b4:	4b8a      	ldr	r3, [pc, #552]	@ (80027e0 <HAL_RCC_ClockConfig+0x240>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d910      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b87      	ldr	r3, [pc, #540]	@ (80027e0 <HAL_RCC_ClockConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 020f 	bic.w	r2, r3, #15
 80025ca:	4985      	ldr	r1, [pc, #532]	@ (80027e0 <HAL_RCC_ClockConfig+0x240>)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b83      	ldr	r3, [pc, #524]	@ (80027e0 <HAL_RCC_ClockConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e184      	b.n	80028ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d010      	beq.n	8002612 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	4b7b      	ldr	r3, [pc, #492]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d908      	bls.n	8002612 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002600:	4b78      	ldr	r3, [pc, #480]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	4975      	ldr	r1, [pc, #468]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 800260e:	4313      	orrs	r3, r2
 8002610:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d010      	beq.n	8002640 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	4b70      	ldr	r3, [pc, #448]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800262a:	429a      	cmp	r2, r3
 800262c:	d908      	bls.n	8002640 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800262e:	4b6d      	ldr	r3, [pc, #436]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	496a      	ldr	r1, [pc, #424]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 800263c:	4313      	orrs	r3, r2
 800263e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2b00      	cmp	r3, #0
 800264a:	d010      	beq.n	800266e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699a      	ldr	r2, [r3, #24]
 8002650:	4b64      	ldr	r3, [pc, #400]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002658:	429a      	cmp	r2, r3
 800265a:	d908      	bls.n	800266e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800265c:	4b61      	ldr	r3, [pc, #388]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	495e      	ldr	r1, [pc, #376]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 800266a:	4313      	orrs	r3, r2
 800266c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b00      	cmp	r3, #0
 8002678:	d010      	beq.n	800269c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69da      	ldr	r2, [r3, #28]
 800267e:	4b59      	ldr	r3, [pc, #356]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002686:	429a      	cmp	r2, r3
 8002688:	d908      	bls.n	800269c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800268a:	4b56      	ldr	r3, [pc, #344]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	4953      	ldr	r1, [pc, #332]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 8002698:	4313      	orrs	r3, r2
 800269a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d010      	beq.n	80026ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	4b4d      	ldr	r3, [pc, #308]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d908      	bls.n	80026ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b8:	4b4a      	ldr	r3, [pc, #296]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f023 020f 	bic.w	r2, r3, #15
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4947      	ldr	r1, [pc, #284]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d055      	beq.n	8002782 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80026d6:	4b43      	ldr	r3, [pc, #268]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	4940      	ldr	r1, [pc, #256]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d107      	bne.n	8002700 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026f0:	4b3c      	ldr	r3, [pc, #240]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d121      	bne.n	8002740 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0f6      	b.n	80028ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d107      	bne.n	8002718 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002708:	4b36      	ldr	r3, [pc, #216]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d115      	bne.n	8002740 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0ea      	b.n	80028ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d107      	bne.n	8002730 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002720:	4b30      	ldr	r3, [pc, #192]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d109      	bne.n	8002740 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0de      	b.n	80028ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002730:	4b2c      	ldr	r3, [pc, #176]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0d6      	b.n	80028ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002740:	4b28      	ldr	r3, [pc, #160]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	f023 0207 	bic.w	r2, r3, #7
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4925      	ldr	r1, [pc, #148]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 800274e:	4313      	orrs	r3, r2
 8002750:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002752:	f7fe faff 	bl	8000d54 <HAL_GetTick>
 8002756:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002758:	e00a      	b.n	8002770 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800275a:	f7fe fafb 	bl	8000d54 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002768:	4293      	cmp	r3, r2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e0be      	b.n	80028ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002770:	4b1c      	ldr	r3, [pc, #112]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	429a      	cmp	r2, r3
 8002780:	d1eb      	bne.n	800275a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d010      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	4b14      	ldr	r3, [pc, #80]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	429a      	cmp	r2, r3
 800279c:	d208      	bcs.n	80027b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800279e:	4b11      	ldr	r3, [pc, #68]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	f023 020f 	bic.w	r2, r3, #15
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	490e      	ldr	r1, [pc, #56]	@ (80027e4 <HAL_RCC_ClockConfig+0x244>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b0:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <HAL_RCC_ClockConfig+0x240>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d214      	bcs.n	80027e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b08      	ldr	r3, [pc, #32]	@ (80027e0 <HAL_RCC_ClockConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 020f 	bic.w	r2, r3, #15
 80027c6:	4906      	ldr	r1, [pc, #24]	@ (80027e0 <HAL_RCC_ClockConfig+0x240>)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ce:	4b04      	ldr	r3, [pc, #16]	@ (80027e0 <HAL_RCC_ClockConfig+0x240>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e086      	b.n	80028ee <HAL_RCC_ClockConfig+0x34e>
 80027e0:	52002000 	.word	0x52002000
 80027e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d010      	beq.n	8002816 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	4b3f      	ldr	r3, [pc, #252]	@ (80028f8 <HAL_RCC_ClockConfig+0x358>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002800:	429a      	cmp	r2, r3
 8002802:	d208      	bcs.n	8002816 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002804:	4b3c      	ldr	r3, [pc, #240]	@ (80028f8 <HAL_RCC_ClockConfig+0x358>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	4939      	ldr	r1, [pc, #228]	@ (80028f8 <HAL_RCC_ClockConfig+0x358>)
 8002812:	4313      	orrs	r3, r2
 8002814:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d010      	beq.n	8002844 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	4b34      	ldr	r3, [pc, #208]	@ (80028f8 <HAL_RCC_ClockConfig+0x358>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800282e:	429a      	cmp	r2, r3
 8002830:	d208      	bcs.n	8002844 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002832:	4b31      	ldr	r3, [pc, #196]	@ (80028f8 <HAL_RCC_ClockConfig+0x358>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	492e      	ldr	r1, [pc, #184]	@ (80028f8 <HAL_RCC_ClockConfig+0x358>)
 8002840:	4313      	orrs	r3, r2
 8002842:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b00      	cmp	r3, #0
 800284e:	d010      	beq.n	8002872 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699a      	ldr	r2, [r3, #24]
 8002854:	4b28      	ldr	r3, [pc, #160]	@ (80028f8 <HAL_RCC_ClockConfig+0x358>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800285c:	429a      	cmp	r2, r3
 800285e:	d208      	bcs.n	8002872 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002860:	4b25      	ldr	r3, [pc, #148]	@ (80028f8 <HAL_RCC_ClockConfig+0x358>)
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	4922      	ldr	r1, [pc, #136]	@ (80028f8 <HAL_RCC_ClockConfig+0x358>)
 800286e:	4313      	orrs	r3, r2
 8002870:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0320 	and.w	r3, r3, #32
 800287a:	2b00      	cmp	r3, #0
 800287c:	d010      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69da      	ldr	r2, [r3, #28]
 8002882:	4b1d      	ldr	r3, [pc, #116]	@ (80028f8 <HAL_RCC_ClockConfig+0x358>)
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800288a:	429a      	cmp	r2, r3
 800288c:	d208      	bcs.n	80028a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800288e:	4b1a      	ldr	r3, [pc, #104]	@ (80028f8 <HAL_RCC_ClockConfig+0x358>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4917      	ldr	r1, [pc, #92]	@ (80028f8 <HAL_RCC_ClockConfig+0x358>)
 800289c:	4313      	orrs	r3, r2
 800289e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028a0:	f000 f834 	bl	800290c <HAL_RCC_GetSysClockFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b14      	ldr	r3, [pc, #80]	@ (80028f8 <HAL_RCC_ClockConfig+0x358>)
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	0a1b      	lsrs	r3, r3, #8
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	4912      	ldr	r1, [pc, #72]	@ (80028fc <HAL_RCC_ClockConfig+0x35c>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
 80028bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028be:	4b0e      	ldr	r3, [pc, #56]	@ (80028f8 <HAL_RCC_ClockConfig+0x358>)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	4a0d      	ldr	r2, [pc, #52]	@ (80028fc <HAL_RCC_ClockConfig+0x35c>)
 80028c8:	5cd3      	ldrb	r3, [r2, r3]
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
 80028d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002900 <HAL_RCC_ClockConfig+0x360>)
 80028d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002904 <HAL_RCC_ClockConfig+0x364>)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80028de:	4b0a      	ldr	r3, [pc, #40]	@ (8002908 <HAL_RCC_ClockConfig+0x368>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe f9ec 	bl	8000cc0 <HAL_InitTick>
 80028e8:	4603      	mov	r3, r0
 80028ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	58024400 	.word	0x58024400
 80028fc:	08002d20 	.word	0x08002d20
 8002900:	24000004 	.word	0x24000004
 8002904:	24000000 	.word	0x24000000
 8002908:	24000008 	.word	0x24000008

0800290c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	@ 0x24
 8002910:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002912:	4bb3      	ldr	r3, [pc, #716]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800291a:	2b18      	cmp	r3, #24
 800291c:	f200 8155 	bhi.w	8002bca <HAL_RCC_GetSysClockFreq+0x2be>
 8002920:	a201      	add	r2, pc, #4	@ (adr r2, 8002928 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002926:	bf00      	nop
 8002928:	0800298d 	.word	0x0800298d
 800292c:	08002bcb 	.word	0x08002bcb
 8002930:	08002bcb 	.word	0x08002bcb
 8002934:	08002bcb 	.word	0x08002bcb
 8002938:	08002bcb 	.word	0x08002bcb
 800293c:	08002bcb 	.word	0x08002bcb
 8002940:	08002bcb 	.word	0x08002bcb
 8002944:	08002bcb 	.word	0x08002bcb
 8002948:	080029b3 	.word	0x080029b3
 800294c:	08002bcb 	.word	0x08002bcb
 8002950:	08002bcb 	.word	0x08002bcb
 8002954:	08002bcb 	.word	0x08002bcb
 8002958:	08002bcb 	.word	0x08002bcb
 800295c:	08002bcb 	.word	0x08002bcb
 8002960:	08002bcb 	.word	0x08002bcb
 8002964:	08002bcb 	.word	0x08002bcb
 8002968:	080029b9 	.word	0x080029b9
 800296c:	08002bcb 	.word	0x08002bcb
 8002970:	08002bcb 	.word	0x08002bcb
 8002974:	08002bcb 	.word	0x08002bcb
 8002978:	08002bcb 	.word	0x08002bcb
 800297c:	08002bcb 	.word	0x08002bcb
 8002980:	08002bcb 	.word	0x08002bcb
 8002984:	08002bcb 	.word	0x08002bcb
 8002988:	080029bf 	.word	0x080029bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800298c:	4b94      	ldr	r3, [pc, #592]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b00      	cmp	r3, #0
 8002996:	d009      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002998:	4b91      	ldr	r3, [pc, #580]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	08db      	lsrs	r3, r3, #3
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	4a90      	ldr	r2, [pc, #576]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
 80029a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80029aa:	e111      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80029ac:	4b8d      	ldr	r3, [pc, #564]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029ae:	61bb      	str	r3, [r7, #24]
      break;
 80029b0:	e10e      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80029b2:	4b8d      	ldr	r3, [pc, #564]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80029b4:	61bb      	str	r3, [r7, #24]
      break;
 80029b6:	e10b      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80029b8:	4b8c      	ldr	r3, [pc, #560]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80029ba:	61bb      	str	r3, [r7, #24]
      break;
 80029bc:	e108      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029be:	4b88      	ldr	r3, [pc, #544]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80029c8:	4b85      	ldr	r3, [pc, #532]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029d4:	4b82      	ldr	r3, [pc, #520]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80029de:	4b80      	ldr	r3, [pc, #512]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e2:	08db      	lsrs	r3, r3, #3
 80029e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	ee07 3a90 	vmov	s15, r3
 80029f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80e1 	beq.w	8002bc4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	f000 8083 	beq.w	8002b10 <HAL_RCC_GetSysClockFreq+0x204>
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	f200 80a1 	bhi.w	8002b54 <HAL_RCC_GetSysClockFreq+0x248>
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x114>
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d056      	beq.n	8002acc <HAL_RCC_GetSysClockFreq+0x1c0>
 8002a1e:	e099      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a20:	4b6f      	ldr	r3, [pc, #444]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d02d      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a2c:	4b6c      	ldr	r3, [pc, #432]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	08db      	lsrs	r3, r3, #3
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	4a6b      	ldr	r2, [pc, #428]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	ee07 3a90 	vmov	s15, r3
 8002a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	ee07 3a90 	vmov	s15, r3
 8002a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a56:	4b62      	ldr	r3, [pc, #392]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5e:	ee07 3a90 	vmov	s15, r3
 8002a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a6a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002bf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a82:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a86:	e087      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	ee07 3a90 	vmov	s15, r3
 8002a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a92:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002bf4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a9a:	4b51      	ldr	r3, [pc, #324]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa2:	ee07 3a90 	vmov	s15, r3
 8002aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002bf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002aca:	e065      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	ee07 3a90 	vmov	s15, r3
 8002ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002bf8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ade:	4b40      	ldr	r3, [pc, #256]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aee:	ed97 6a02 	vldr	s12, [r7, #8]
 8002af2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002bf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b0e:	e043      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	ee07 3a90 	vmov	s15, r3
 8002b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b1a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002bfc <HAL_RCC_GetSysClockFreq+0x2f0>
 8002b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b22:	4b2f      	ldr	r3, [pc, #188]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b32:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b36:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002bf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b52:	e021      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002bf8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b66:	4b1e      	ldr	r3, [pc, #120]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b76:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b7a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002bf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b96:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b98:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9c:	0a5b      	lsrs	r3, r3, #9
 8002b9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bbc:	ee17 3a90 	vmov	r3, s15
 8002bc0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002bc2:	e005      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61bb      	str	r3, [r7, #24]
      break;
 8002bc8:	e002      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002bca:	4b07      	ldr	r3, [pc, #28]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002bcc:	61bb      	str	r3, [r7, #24]
      break;
 8002bce:	bf00      	nop
  }

  return sysclockfreq;
 8002bd0:	69bb      	ldr	r3, [r7, #24]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3724      	adds	r7, #36	@ 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	58024400 	.word	0x58024400
 8002be4:	03d09000 	.word	0x03d09000
 8002be8:	003d0900 	.word	0x003d0900
 8002bec:	017d7840 	.word	0x017d7840
 8002bf0:	46000000 	.word	0x46000000
 8002bf4:	4c742400 	.word	0x4c742400
 8002bf8:	4a742400 	.word	0x4a742400
 8002bfc:	4bbebc20 	.word	0x4bbebc20

08002c00 <roundf>:
 8002c00:	ee10 0a10 	vmov	r0, s0
 8002c04:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8002c08:	3a7f      	subs	r2, #127	@ 0x7f
 8002c0a:	2a16      	cmp	r2, #22
 8002c0c:	dc15      	bgt.n	8002c3a <roundf+0x3a>
 8002c0e:	2a00      	cmp	r2, #0
 8002c10:	da08      	bge.n	8002c24 <roundf+0x24>
 8002c12:	3201      	adds	r2, #1
 8002c14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8002c18:	d101      	bne.n	8002c1e <roundf+0x1e>
 8002c1a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8002c1e:	ee00 3a10 	vmov	s0, r3
 8002c22:	4770      	bx	lr
 8002c24:	4907      	ldr	r1, [pc, #28]	@ (8002c44 <roundf+0x44>)
 8002c26:	4111      	asrs	r1, r2
 8002c28:	4201      	tst	r1, r0
 8002c2a:	d0fa      	beq.n	8002c22 <roundf+0x22>
 8002c2c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c30:	4113      	asrs	r3, r2
 8002c32:	4403      	add	r3, r0
 8002c34:	ea23 0301 	bic.w	r3, r3, r1
 8002c38:	e7f1      	b.n	8002c1e <roundf+0x1e>
 8002c3a:	2a80      	cmp	r2, #128	@ 0x80
 8002c3c:	d1f1      	bne.n	8002c22 <roundf+0x22>
 8002c3e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002c42:	4770      	bx	lr
 8002c44:	007fffff 	.word	0x007fffff

08002c48 <memset>:
 8002c48:	4402      	add	r2, r0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d100      	bne.n	8002c52 <memset+0xa>
 8002c50:	4770      	bx	lr
 8002c52:	f803 1b01 	strb.w	r1, [r3], #1
 8002c56:	e7f9      	b.n	8002c4c <memset+0x4>

08002c58 <__libc_init_array>:
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	4d0d      	ldr	r5, [pc, #52]	@ (8002c90 <__libc_init_array+0x38>)
 8002c5c:	4c0d      	ldr	r4, [pc, #52]	@ (8002c94 <__libc_init_array+0x3c>)
 8002c5e:	1b64      	subs	r4, r4, r5
 8002c60:	10a4      	asrs	r4, r4, #2
 8002c62:	2600      	movs	r6, #0
 8002c64:	42a6      	cmp	r6, r4
 8002c66:	d109      	bne.n	8002c7c <__libc_init_array+0x24>
 8002c68:	4d0b      	ldr	r5, [pc, #44]	@ (8002c98 <__libc_init_array+0x40>)
 8002c6a:	4c0c      	ldr	r4, [pc, #48]	@ (8002c9c <__libc_init_array+0x44>)
 8002c6c:	f000 f826 	bl	8002cbc <_init>
 8002c70:	1b64      	subs	r4, r4, r5
 8002c72:	10a4      	asrs	r4, r4, #2
 8002c74:	2600      	movs	r6, #0
 8002c76:	42a6      	cmp	r6, r4
 8002c78:	d105      	bne.n	8002c86 <__libc_init_array+0x2e>
 8002c7a:	bd70      	pop	{r4, r5, r6, pc}
 8002c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c80:	4798      	blx	r3
 8002c82:	3601      	adds	r6, #1
 8002c84:	e7ee      	b.n	8002c64 <__libc_init_array+0xc>
 8002c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c8a:	4798      	blx	r3
 8002c8c:	3601      	adds	r6, #1
 8002c8e:	e7f2      	b.n	8002c76 <__libc_init_array+0x1e>
 8002c90:	08002d40 	.word	0x08002d40
 8002c94:	08002d40 	.word	0x08002d40
 8002c98:	08002d40 	.word	0x08002d40
 8002c9c:	08002d44 	.word	0x08002d44

08002ca0 <memcpy>:
 8002ca0:	440a      	add	r2, r1
 8002ca2:	4291      	cmp	r1, r2
 8002ca4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8002ca8:	d100      	bne.n	8002cac <memcpy+0xc>
 8002caa:	4770      	bx	lr
 8002cac:	b510      	push	{r4, lr}
 8002cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cb6:	4291      	cmp	r1, r2
 8002cb8:	d1f9      	bne.n	8002cae <memcpy+0xe>
 8002cba:	bd10      	pop	{r4, pc}

08002cbc <_init>:
 8002cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cbe:	bf00      	nop
 8002cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc2:	bc08      	pop	{r3}
 8002cc4:	469e      	mov	lr, r3
 8002cc6:	4770      	bx	lr

08002cc8 <_fini>:
 8002cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cca:	bf00      	nop
 8002ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cce:	bc08      	pop	{r3}
 8002cd0:	469e      	mov	lr, r3
 8002cd2:	4770      	bx	lr
